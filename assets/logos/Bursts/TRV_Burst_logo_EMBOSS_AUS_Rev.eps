%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: TRV_Burst_logo_EMBOSS_AUS_Rev.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: kati
%%CreationDate: 7/11/14
%%BoundingBox: 0 0 267 267
%%HiResBoundingBox: 0 0 266.0787 266.0762
%%CropBox: 0 0 266.0787 266.0762
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 2006 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFFFFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic CMYK</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2014-07-11T16:15:51-05:00</xmp:CreateDate>
         <xmp:ModifyDate>2014-07-11T16:15:51-05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2014-07-11T16:15:51-05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:0280117407206811822A9FA71EB8342F</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0280117407206811822A9FA71EB8342F</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:292ACD34902168118A6DAD1F97FFE163</stRef:instanceID>
            <stRef:documentID>xmp.did:292ACD34902168118A6DAD1F97FFE163</stRef:documentID>
            <stRef:originalDocumentID>uuid:A61B42A6523211E0B69BF9F731EB0D67</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:292ACD34902168118A6DAD1F97FFE163</stEvt:instanceID>
                  <stEvt:when>2011-04-29T10:13:58-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0280117407206811822A9FA71EB8342F</stEvt:instanceID>
                  <stEvt:when>2014-07-11T16:15:51-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:A61B42A6523211E0B69BF9F731EB0D67</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.000000</stDim:w>
            <stDim:h>4.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Emboss</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 305 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>51.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>9.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 193 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>66.000000</xmpG:yellow>
                           <xmpG:black>13.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -266.076 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 266.076 li
266.079 266.076 li
266.079 0 li
cp
clp
265.501 144.601 mo
265.58 144.581 265.654 144.569 265.736 144.555 cv
265.66 144.537 265.585 144.509 265.511 144.474 cv
261.378 142.72 261.101 130.312 247.83 134.784 cv
247.759 140.31 247.281 145.757 246.435 151.089 cv
258.705 157.769 261.126 145.61 265.501 144.601 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
1 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
265.501 144.601 mo
265.58 144.581 265.654 144.569 265.736 144.555 cv
265.66 144.537 265.585 144.509 265.511 144.474 cv
261.378 142.72 261.101 130.312 247.83 134.784 cv
247.759 140.31 247.281 145.757 246.435 151.089 cv
258.705 157.769 261.126 145.61 265.501 144.601 cv
cp
@
131.11 18.2529 mo
135.765 4.78613 123.242 4.5332 121.483 .374023 cv
121.45 .305176 121.421 .22998 121.397 .155273 cv
121.388 .22998 121.373 .313477 121.357 .385742 cv
120.338 4.78613 108.051 7.21387 114.98 19.6563 cv
117.631 19.2422 120.31 18.9087 123.022 18.6758 cv
125.728 18.437 128.428 18.2988 131.11 18.2529 cv
cp
f
131.11 18.2529 mo
135.765 4.78613 123.242 4.5332 121.483 .374023 cv
121.45 .305176 121.421 .22998 121.397 .155273 cv
121.388 .22998 121.373 .313477 121.357 .385742 cv
120.338 4.78613 108.051 7.21387 114.98 19.6563 cv
117.631 19.2422 120.31 18.9087 123.022 18.6758 cv
125.728 18.437 128.428 18.2988 131.11 18.2529 cv
cp
@
98.7593 4.55029 mo
98.7192 4.48682 98.6831 4.4209 98.646 4.34912 cv
98.646 4.42969 98.646 4.50977 98.6431 4.58496 cv
98.4087 9.07178 86.855 13.5674 95.5649 24.4941 cv
100.667 22.7368 105.949 21.3188 111.375 20.2861 cv
113.48 6.43408 101.205 8.32129 98.7593 4.55029 cv
cp
f
98.7593 4.55029 mo
98.7192 4.48682 98.6831 4.4209 98.646 4.34912 cv
98.646 4.42969 98.646 4.50977 98.6431 4.58496 cv
98.4087 9.07178 86.855 13.5674 95.5649 24.4941 cv
100.667 22.7368 105.949 21.3188 111.375 20.2861 cv
113.48 6.43408 101.205 8.32129 98.7593 4.55029 cv
cp
@
77.106 12.6328 mo
77.0522 12.5752 77.0015 12.5176 76.9526 12.4512 cv
76.9692 12.5288 76.9819 12.6123 76.9946 12.6846 cv
77.5356 17.1196 67.0571 23.5078 77.2388 32.6685 cv
82.0308 29.9995 87.0483 27.6611 92.2505 25.6909 cv
91.7876 11.9795 80.1499 15.9028 77.106 12.6328 cv
cp
f
77.106 12.6328 mo
77.0522 12.5752 77.0015 12.5176 76.9526 12.4512 cv
76.9692 12.5288 76.9819 12.6123 76.9946 12.6846 cv
77.5356 17.1196 67.0571 23.5078 77.2388 32.6685 cv
82.0308 29.9995 87.0483 27.6611 92.2505 25.6909 cv
91.7876 11.9795 80.1499 15.9028 77.106 12.6328 cv
cp
@
57.1831 24.3647 mo
57.1226 24.3218 57.061 24.27 57.0034 24.2183 cv
57.0337 24.293 57.061 24.3647 57.0854 24.4424 cv
58.3784 28.6851 49.2876 36.7295 60.5972 43.9551 cv
64.9136 40.4346 69.4946 37.2246 74.3159 34.3481 cv
71.3989 21.2441 60.728 27.0425 57.1831 24.3647 cv
cp
f
57.1831 24.3647 mo
57.1226 24.3218 57.061 24.27 57.0034 24.2183 cv
57.0337 24.293 57.061 24.3647 57.0854 24.4424 cv
58.3784 28.6851 49.2876 36.7295 60.5972 43.9551 cv
64.9136 40.4346 69.4946 37.2246 74.3159 34.3481 cv
71.3989 21.2441 60.728 27.0425 57.1831 24.3647 cv
cp
@
39.5503 39.4102 mo
39.478 39.3701 39.4136 39.3354 39.3462 39.2925 cv
39.3892 39.353 39.4282 39.4248 39.4644 39.4966 cv
41.4644 43.4316 33.9961 52.8511 46.1216 58.0195 cv
49.8003 53.7573 53.8003 49.7593 58.0708 46.0659 cv
52.9019 33.9399 43.4839 41.418 39.5503 39.4102 cv
cp
f
39.5503 39.4102 mo
39.478 39.3701 39.4136 39.3354 39.3462 39.2925 cv
39.3892 39.353 39.4282 39.4248 39.4644 39.4966 cv
41.4644 43.4316 33.9961 52.8511 46.1216 58.0195 cv
49.8003 53.7573 53.8003 49.7593 58.0708 46.0659 cv
52.9019 33.9399 43.4839 41.418 39.5503 39.4102 cv
cp
@
24.6484 57.1509 mo
24.5767 57.125 24.502 57.0991 24.4272 57.0679 cv
24.4829 57.125 24.5293 57.1914 24.5781 57.2549 cv
27.2388 60.7808 21.5176 71.354 34.353 74.3369 cv
37.2466 69.4844 40.4878 64.8594 44.0483 60.4873 cv
36.8511 49.4458 28.8721 58.4424 24.6484 57.1509 cv
cp
f
24.6484 57.1509 mo
24.5767 57.125 24.502 57.0991 24.4272 57.0679 cv
24.4829 57.125 24.5293 57.1914 24.5781 57.2549 cv
27.2388 60.7808 21.5176 71.354 34.353 74.3369 cv
37.2466 69.4844 40.4878 64.8594 44.0483 60.4873 cv
36.8511 49.4458 28.8721 58.4424 24.6484 57.1509 cv
cp
@
12.8833 77.1152 mo
12.8042 77.1035 12.7295 77.0952 12.6504 77.0747 cv
12.7148 77.1235 12.7739 77.1758 12.8315 77.23 cv
16.0771 80.2588 12.2246 91.7695 25.6367 92.3677 cv
27.6284 87.1216 29.9941 82.0479 32.7051 77.1899 cv
23.6274 67.3071 17.2881 77.6558 12.8833 77.1152 cv
cp
f
12.8833 77.1152 mo
12.8042 77.1035 12.7295 77.0952 12.6504 77.0747 cv
12.7148 77.1235 12.7739 77.1758 12.8315 77.23 cv
16.0771 80.2588 12.2246 91.7695 25.6367 92.3677 cv
27.6284 87.1216 29.9941 82.0479 32.7051 77.1899 cv
23.6274 67.3071 17.2881 77.6558 12.8833 77.1152 cv
cp
@
4.76367 98.7646 mo
4.68604 98.7676 4.60547 98.7676 4.53076 98.7676 cv
4.59668 98.8047 4.66699 98.8394 4.7334 98.8853 cv
8.47803 101.319 6.63867 113.457 20.2192 111.535 cv
21.2588 106.064 22.6929 100.723 24.4858 95.5376 cv
13.6914 87.1045 9.22314 98.5317 4.76367 98.7646 cv
cp
f
4.76367 98.7646 mo
4.68604 98.7676 4.60547 98.7676 4.53076 98.7676 cv
4.59668 98.8047 4.66699 98.8394 4.7334 98.8853 cv
8.47803 101.319 6.63867 113.457 20.2192 111.535 cv
21.2588 106.064 22.6929 100.723 24.4858 95.5376 cv
13.6914 87.1045 9.22314 98.5317 4.76367 98.7646 cv
cp
@
.546875 121.49 mo
.469238 121.504 .394531 121.521 .316895 121.533 cv
.390137 121.559 .463379 121.588 .537109 121.616 cv
4.67285 123.374 4.94629 135.782 18.2144 131.307 cv
18.2949 125.781 18.7739 120.336 19.6138 115.004 cv
7.34375 108.325 4.92188 120.483 .546875 121.49 cv
cp
f
.546875 121.49 mo
.469238 121.504 .394531 121.521 .316895 121.533 cv
.390137 121.559 .463379 121.588 .537109 121.616 cv
4.67285 123.374 4.94629 135.782 18.2144 131.307 cv
18.2949 125.781 18.7739 120.336 19.6138 115.004 cv
7.34375 108.325 4.92188 120.483 .546875 121.49 cv
cp
@
18.2285 134.962 mo
4.76367 130.306 4.51172 142.829 .351563 144.595 cv
.283691 144.624 .208984 144.652 .137207 144.673 cv
.216309 144.681 .291016 144.698 .368652 144.716 cv
4.76514 145.731 7.19385 158.021 19.6382 151.089 cv
19.2212 148.443 18.8872 145.766 18.6514 143.054 cv
18.4141 140.344 18.2749 137.644 18.2285 134.962 cv
cp
f
18.2285 134.962 mo
4.76367 130.306 4.51172 142.829 .351563 144.595 cv
.283691 144.624 .208984 144.652 .137207 144.673 cv
.216309 144.681 .291016 144.698 .368652 144.716 cv
4.76514 145.731 7.19385 158.021 19.6382 151.089 cv
19.2212 148.443 18.8872 145.766 18.6514 143.054 cv
18.4141 140.344 18.2749 137.644 18.2285 134.962 cv
cp
@
4.53369 167.312 mo
4.46875 167.349 4.3999 167.392 4.33203 167.429 cv
4.41113 167.427 4.49023 167.427 4.56934 167.429 cv
9.05078 167.665 13.5493 179.214 24.4702 170.504 cv
22.71 165.398 21.3022 160.124 20.2637 154.69 cv
6.41309 152.591 8.30127 164.86 4.53369 167.312 cv
cp
f
4.53369 167.312 mo
4.46875 167.349 4.3999 167.392 4.33203 167.429 cv
4.41113 167.427 4.49023 167.427 4.56934 167.429 cv
9.05078 167.665 13.5493 179.214 24.4702 170.504 cv
22.71 165.398 21.3022 160.124 20.2637 154.69 cv
6.41309 152.591 8.30127 164.86 4.53369 167.312 cv
cp
@
12.6113 188.972 mo
12.5566 189.021 12.4966 189.073 12.4346 189.119 cv
12.5107 189.102 12.5913 189.091 12.6689 189.079 cv
17.0972 188.538 23.4863 199.011 32.6475 188.837 cv
29.9795 184.04 27.6411 179.029 25.6665 173.817 cv
11.96 174.289 15.8833 185.921 12.6113 188.972 cv
cp
f
12.6113 188.972 mo
12.5566 189.021 12.4966 189.073 12.4346 189.119 cv
12.5107 189.102 12.5913 189.091 12.6689 189.079 cv
17.0972 188.538 23.4863 199.011 32.6475 188.837 cv
29.9795 184.04 27.6411 179.029 25.6665 173.817 cv
11.96 174.289 15.8833 185.921 12.6113 188.972 cv
cp
@
24.3481 208.888 mo
24.3018 208.948 24.2515 209.011 24.1997 209.069 cv
24.2729 209.04 24.3452 209.015 24.4199 208.991 cv
28.665 207.688 36.7041 216.786 43.9312 205.479 cv
40.4116 201.159 37.2007 196.577 34.3286 191.757 cv
21.2217 194.673 27.0229 205.341 24.3481 208.888 cv
cp
f
24.3481 208.888 mo
24.3018 208.948 24.2515 209.011 24.1997 209.069 cv
24.2729 209.04 24.3452 209.015 24.4199 208.991 cv
28.665 207.688 36.7041 216.786 43.9312 205.479 cv
40.4116 201.159 37.2007 196.577 34.3286 191.757 cv
21.2217 194.673 27.0229 205.341 24.3481 208.888 cv
cp
@
39.3862 226.522 mo
39.3521 226.591 39.3149 226.659 39.271 226.724 cv
39.3374 226.683 39.4097 226.646 39.4771 226.608 cv
43.4087 224.604 52.8315 232.079 57.9956 219.952 cv
53.7349 216.271 49.7349 212.276 46.0474 207.999 cv
33.9214 213.171 41.3911 222.593 39.3862 226.522 cv
cp
f
39.3862 226.522 mo
39.3521 226.591 39.3149 226.659 39.271 226.724 cv
39.3374 226.683 39.4097 226.646 39.4771 226.608 cv
43.4087 224.604 52.8315 232.079 57.9956 219.952 cv
53.7349 216.271 49.7349 212.276 46.0474 207.999 cv
33.9214 213.171 41.3911 222.593 39.3862 226.522 cv
cp
@
57.1255 241.421 mo
57.1011 241.495 57.0767 241.57 57.0493 241.646 cv
57.106 241.591 57.1675 241.542 57.229 241.492 cv
60.7573 238.838 71.3345 244.556 74.3159 231.722 cv
69.4673 228.828 64.8354 225.584 60.4712 222.026 cv
49.4272 229.223 58.4224 237.201 57.1255 241.421 cv
cp
f
57.1255 241.421 mo
57.1011 241.495 57.0767 241.57 57.0493 241.646 cv
57.106 241.591 57.1675 241.542 57.229 241.492 cv
60.7573 238.838 71.3345 244.556 74.3159 231.722 cv
69.4673 228.828 64.8354 225.584 60.4712 222.026 cv
49.4272 229.223 58.4224 237.201 57.1255 241.421 cv
cp
@
77.0972 253.19 mo
77.0835 253.265 77.0728 253.343 77.0562 253.421 cv
77.106 253.357 77.1548 253.3 77.2104 253.242 cv
80.2349 249.995 91.7466 253.846 92.3481 240.438 cv
87.1001 238.443 82.0269 236.082 77.1655 233.367 cv
67.2847 242.45 77.6372 248.787 77.0972 253.19 cv
cp
f
77.0972 253.19 mo
77.0835 253.265 77.0728 253.343 77.0562 253.421 cv
77.106 253.357 77.1548 253.3 77.2104 253.242 cv
80.2349 249.995 91.7466 253.846 92.3481 240.438 cv
87.1001 238.443 82.0269 236.082 77.1655 233.367 cv
67.2847 242.45 77.6372 248.787 77.0972 253.19 cv
cp
@
98.7446 261.31 mo
98.7495 261.382 98.7495 261.462 98.7446 261.543 cv
98.7808 261.471 98.8169 261.405 98.8628 261.339 cv
101.299 257.594 113.434 259.435 111.514 245.855 cv
106.046 244.814 100.701 243.382 95.5161 241.591 cv
87.0864 252.379 98.5132 256.846 98.7446 261.31 cv
cp
f
98.7446 261.31 mo
98.7495 261.382 98.7495 261.462 98.7446 261.543 cv
98.7808 261.471 98.8169 261.405 98.8628 261.339 cv
101.299 257.594 113.434 259.435 111.514 245.855 cv
106.046 244.814 100.701 243.382 95.5161 241.591 cv
87.0864 252.379 98.5132 256.846 98.7446 261.31 cv
cp
@
121.47 265.529 mo
121.491 265.602 121.503 265.679 121.51 265.757 cv
121.541 265.682 121.565 265.604 121.598 265.535 cv
123.353 261.399 135.757 261.126 131.289 247.854 cv
125.761 247.783 120.318 247.306 114.986 246.454 cv
108.305 258.725 120.466 261.151 121.47 265.529 cv
cp
f
121.47 265.529 mo
121.491 265.602 121.503 265.679 121.51 265.757 cv
121.541 265.682 121.565 265.604 121.598 265.535 cv
123.353 261.399 135.757 261.126 131.289 247.854 cv
125.761 247.783 120.318 247.306 114.986 246.454 cv
108.305 258.725 120.466 261.151 121.47 265.529 cv
cp
@
134.941 247.847 mo
130.288 261.31 142.804 261.561 144.57 265.72 cv
144.599 265.785 144.628 265.863 144.65 265.938 cv
144.66 265.857 144.677 265.782 144.695 265.702 cv
145.708 261.307 157.996 258.88 151.07 246.439 cv
148.425 246.854 145.744 247.185 143.035 247.424 cv
140.32 247.656 137.621 247.798 134.941 247.847 cv
cp
f
134.941 247.847 mo
130.288 261.31 142.804 261.561 144.57 265.72 cv
144.599 265.785 144.628 265.863 144.65 265.938 cv
144.66 265.857 144.677 265.782 144.695 265.702 cv
145.708 261.307 157.996 258.88 151.07 246.439 cv
148.425 246.854 145.744 247.185 143.035 247.424 cv
140.32 247.656 137.621 247.798 134.941 247.847 cv
cp
@
167.285 261.54 mo
167.328 261.606 167.371 261.673 167.408 261.744 cv
167.402 261.667 167.402 261.583 167.408 261.503 cv
167.646 257.021 179.189 252.523 170.482 241.602 cv
165.382 243.359 160.101 244.777 154.675 245.81 cv
152.572 259.656 164.841 257.77 167.285 261.54 cv
cp
f
167.285 261.54 mo
167.328 261.606 167.371 261.673 167.408 261.744 cv
167.402 261.667 167.402 261.583 167.408 261.503 cv
167.646 257.021 179.189 252.523 170.482 241.602 cv
165.382 243.359 160.101 244.777 154.675 245.81 cv
152.572 259.656 164.841 257.77 167.285 261.54 cv
cp
@
188.949 253.458 mo
188.998 253.516 189.048 253.579 189.095 253.639 cv
189.078 253.562 189.066 253.483 189.06 253.409 cv
188.513 248.974 198.99 242.586 188.812 233.428 cv
184.015 236.094 179.005 238.43 173.798 240.408 cv
174.265 254.116 185.906 250.188 188.949 253.458 cv
cp
f
188.949 253.458 mo
188.998 253.516 189.048 253.579 189.095 253.639 cv
189.078 253.562 189.066 253.483 189.06 253.409 cv
188.513 248.974 198.99 242.586 188.812 233.428 cv
184.015 236.094 179.005 238.43 173.798 240.408 cv
174.265 254.116 185.906 250.188 188.949 253.458 cv
cp
@
208.867 241.726 mo
208.929 241.771 208.986 241.82 209.044 241.872 cv
209.015 241.801 208.986 241.726 208.966 241.647 cv
207.669 237.405 216.757 229.366 205.455 222.144 cv
201.134 225.661 196.552 228.869 191.736 231.745 cv
194.654 244.847 205.322 239.051 208.867 241.726 cv
cp
f
208.867 241.726 mo
208.929 241.771 208.986 241.82 209.044 241.872 cv
209.015 241.801 208.986 241.726 208.966 241.647 cv
207.669 237.405 216.757 229.366 205.455 222.144 cv
201.134 225.661 196.552 228.869 191.736 231.745 cv
194.654 244.847 205.322 239.051 208.867 241.726 cv
cp
@
226.498 226.686 mo
226.57 226.72 226.64 226.758 226.701 226.798 cv
226.658 226.731 226.625 226.665 226.585 226.597 cv
224.582 222.659 232.054 213.239 219.933 208.076 cv
216.246 212.336 212.253 216.334 207.98 220.027 cv
213.148 232.153 222.562 224.679 226.498 226.686 cv
cp
f
226.498 226.686 mo
226.57 226.72 226.64 226.758 226.701 226.798 cv
226.658 226.731 226.625 226.665 226.585 226.597 cv
224.582 222.659 232.054 213.239 219.933 208.076 cv
216.246 212.336 212.253 216.334 207.98 220.027 cv
213.148 232.153 222.562 224.679 226.498 226.686 cv
cp
@
241.402 208.944 mo
241.47 208.966 241.546 208.994 241.621 209.022 cv
241.568 208.966 241.517 208.905 241.468 208.841 cv
238.814 205.315 244.531 194.742 231.701 191.757 cv
228.81 196.608 225.568 201.237 222.005 205.605 cv
229.199 216.645 237.179 207.653 241.402 208.944 cv
cp
f
241.402 208.944 mo
241.47 208.966 241.546 208.994 241.621 209.022 cv
241.568 208.966 241.517 208.905 241.468 208.841 cv
238.814 205.315 244.531 194.742 231.701 191.757 cv
228.81 196.608 225.568 201.237 222.005 205.605 cv
229.199 216.645 237.179 207.653 241.402 208.944 cv
cp
@
253.171 188.981 mo
253.246 188.987 253.324 188.998 253.398 189.016 cv
253.339 188.972 253.281 188.918 253.224 188.866 cv
249.974 185.837 253.83 174.323 240.417 173.723 cv
238.425 178.972 236.058 184.04 233.345 188.906 cv
242.425 198.789 248.763 188.435 253.171 188.981 cv
cp
f
253.171 188.981 mo
253.246 188.987 253.324 188.998 253.398 189.016 cv
253.339 188.972 253.281 188.918 253.224 188.866 cv
249.974 185.837 253.83 174.323 240.417 173.723 cv
238.425 178.972 236.058 184.04 233.345 188.906 cv
242.425 198.789 248.763 188.435 253.171 188.981 cv
cp
@
261.285 167.329 mo
261.363 167.323 261.443 167.323 261.519 167.323 cv
261.449 167.288 261.386 167.248 261.318 167.208 cv
257.572 164.777 259.414 152.637 245.833 154.558 cv
244.791 160.026 243.363 165.372 241.564 170.556 cv
252.355 178.985 256.83 167.559 261.285 167.329 cv
cp
f
261.285 167.329 mo
261.363 167.323 261.443 167.323 261.519 167.323 cv
261.449 167.288 261.386 167.248 261.318 167.208 cv
257.572 164.777 259.414 152.637 245.833 154.558 cv
244.791 160.026 243.363 165.372 241.564 170.556 cv
252.355 178.985 256.83 167.559 261.285 167.329 cv
cp
@
265.681 121.378 mo
261.283 120.359 258.861 108.072 246.412 115.001 cv
246.832 117.647 247.16 120.328 247.402 123.04 cv
247.638 125.755 247.773 128.453 247.822 131.128 cv
261.285 135.784 261.537 123.262 265.695 121.501 cv
265.769 121.47 265.839 121.444 265.914 121.418 cv
265.835 121.406 265.757 121.395 265.681 121.378 cv
cp
f
265.681 121.378 mo
261.283 120.359 258.861 108.072 246.412 115.001 cv
246.832 117.647 247.16 120.328 247.402 123.04 cv
247.638 125.755 247.773 128.453 247.822 131.128 cv
261.285 135.784 261.537 123.262 265.695 121.501 cv
265.769 121.47 265.839 121.444 265.914 121.418 cv
265.835 121.406 265.757 121.395 265.681 121.378 cv
cp
@
261.519 98.7817 mo
261.582 98.7388 261.656 98.7012 261.714 98.667 cv
261.64 98.667 261.564 98.667 261.484 98.667 cv
257 98.4253 252.503 86.8799 241.58 95.5894 cv
243.337 100.692 244.75 105.973 245.789 111.397 cv
259.632 113.502 257.746 101.227 261.519 98.7817 cv
cp
f
261.519 98.7817 mo
261.582 98.7388 261.656 98.7012 261.714 98.667 cv
261.64 98.667 261.564 98.667 261.484 98.667 cv
257 98.4253 252.503 86.8799 241.58 95.5894 cv
243.337 100.692 244.75 105.973 245.789 111.397 cv
259.632 113.502 257.746 101.227 261.519 98.7817 cv
cp
@
253.433 77.1235 mo
253.5 77.0718 253.554 77.02 253.615 76.9741 cv
253.541 76.9912 253.458 77.0059 253.384 77.0146 cv
248.955 77.5552 242.564 67.0801 233.4 77.2588 cv
236.076 82.0537 238.412 87.0698 240.38 92.2759 cv
254.091 91.8042 250.169 80.167 253.433 77.1235 cv
cp
f
253.433 77.1235 mo
253.5 77.0718 253.554 77.02 253.615 76.9741 cv
253.541 76.9912 253.458 77.0059 253.384 77.0146 cv
248.955 77.5552 242.564 67.0801 233.4 77.2588 cv
236.076 82.0537 238.412 87.0698 240.38 92.2759 cv
254.091 91.8042 250.169 80.167 253.433 77.1235 cv
cp
@
241.701 57.2031 mo
241.748 57.1396 241.802 57.0791 241.853 57.0215 cv
241.781 57.0562 241.701 57.0791 241.626 57.105 cv
237.384 58.3965 229.347 49.3047 222.117 60.6196 cv
225.634 64.9341 228.849 69.5161 231.72 74.3369 cv
244.83 71.4175 239.027 60.752 241.701 57.2031 cv
cp
f
241.701 57.2031 mo
241.748 57.1396 241.802 57.0791 241.853 57.0215 cv
241.781 57.0562 241.701 57.0791 241.626 57.105 cv
237.384 58.3965 229.347 49.3047 222.117 60.6196 cv
225.634 64.9341 228.849 69.5161 231.72 74.3369 cv
244.83 71.4175 239.027 60.752 241.701 57.2031 cv
cp
@
226.658 39.5684 mo
226.699 39.5024 226.74 39.4336 226.779 39.3643 cv
226.71 39.4102 226.646 39.4507 226.572 39.4824 cv
222.638 41.4873 213.22 34.0176 208.052 46.1377 cv
212.314 49.8223 216.316 53.8174 220.009 58.0972 cv
232.128 52.9229 224.656 43.5005 226.658 39.5684 cv
cp
f
226.658 39.5684 mo
226.699 39.5024 226.74 39.4336 226.779 39.3643 cv
226.71 39.4102 226.646 39.4507 226.572 39.4824 cv
222.638 41.4873 213.22 34.0176 208.052 46.1377 cv
212.314 49.8223 216.316 53.8174 220.009 58.0972 cv
232.128 52.9229 224.656 43.5005 226.658 39.5684 cv
cp
@
208.923 24.667 mo
208.947 24.5918 208.97 24.5259 209.003 24.4512 cv
208.941 24.5 208.882 24.5518 208.82 24.5977 cv
205.294 27.2554 194.72 21.5347 191.736 34.374 cv
196.587 37.2676 201.214 40.5093 205.578 44.0698 cv
216.626 36.8677 207.623 28.895 208.923 24.667 cv
cp
f
208.923 24.667 mo
208.947 24.5918 208.97 24.5259 209.003 24.4512 cv
208.941 24.5 208.882 24.5518 208.82 24.5977 cv
205.294 27.2554 194.72 21.5347 191.736 34.374 cv
196.587 37.2676 201.214 40.5093 205.578 44.0698 cv
216.626 36.8677 207.623 28.895 208.923 24.667 cv
cp
@
188.957 12.897 mo
188.962 12.8252 188.976 12.7476 188.998 12.6699 cv
188.949 12.7305 188.894 12.7964 188.841 12.8511 cv
185.812 16.0986 174.302 12.2412 173.705 25.6563 cv
178.947 27.6465 184.015 30.0137 188.882 32.729 cv
198.771 23.6484 188.41 17.3096 188.957 12.897 cv
cp
f
188.957 12.897 mo
188.962 12.8252 188.976 12.7476 188.998 12.6699 cv
188.949 12.7305 188.894 12.7964 188.841 12.8511 cv
185.812 16.0986 174.302 12.2412 173.705 25.6563 cv
178.947 27.6465 184.015 30.0137 188.882 32.729 cv
198.771 23.6484 188.41 17.3096 188.957 12.897 cv
cp
@
167.31 4.78613 mo
167.304 4.70557 167.298 4.63086 167.304 4.55029 cv
167.267 4.61914 167.23 4.68555 167.183 4.75732 cv
164.753 8.49658 152.615 6.65576 154.533 20.2373 cv
160.007 21.2783 165.349 22.7109 170.531 24.5029 cv
178.968 13.7139 167.541 9.24414 167.31 4.78613 cv
cp
f
167.31 4.78613 mo
167.304 4.70557 167.298 4.63086 167.304 4.55029 cv
167.267 4.61914 167.23 4.68555 167.183 4.75732 cv
164.753 8.49658 152.615 6.65576 154.533 20.2373 cv
160.007 21.2783 165.349 22.7109 170.531 24.5029 cv
178.968 13.7139 167.541 9.24414 167.31 4.78613 cv
cp
@
144.576 .569336 mo
144.562 .489258 144.546 .411133 144.533 .333984 cv
144.513 .411133 144.484 .486328 144.455 .561035 cv
142.701 4.69141 130.288 4.96436 134.767 18.2354 cv
140.287 18.3188 145.732 18.7935 151.068 19.6333 cv
157.746 7.36328 145.589 4.94141 144.576 .569336 cv
cp
f
144.576 .569336 mo
144.562 .489258 144.546 .411133 144.533 .333984 cv
144.513 .411133 144.484 .486328 144.455 .561035 cv
142.701 4.69141 130.288 4.96436 134.767 18.2354 cv
140.287 18.3188 145.732 18.7935 151.068 19.6333 cv
157.746 7.36328 145.589 4.94141 144.576 .569336 cv
cp
@
131.2 23.7188 mo
135.639 10.8936 123.708 10.6548 122.028 6.69141 cv
121.998 6.62793 121.973 6.55615 121.953 6.48438 cv
121.941 6.56445 121.928 6.63086 121.912 6.70557 cv
120.945 10.8965 109.239 13.2031 115.836 25.0645 cv
118.359 24.6621 120.912 24.3457 123.495 24.1211 cv
126.076 23.8911 128.643 23.7646 131.2 23.7188 cv
cp
f
131.2 23.7188 mo
135.639 10.8936 123.708 10.6548 122.028 6.69141 cv
121.998 6.62793 121.973 6.55615 121.953 6.48438 cv
121.941 6.56445 121.928 6.63086 121.912 6.70557 cv
120.945 10.8965 109.239 13.2031 115.836 25.0645 cv
118.359 24.6621 120.912 24.3457 123.495 24.1211 cv
126.076 23.8911 128.643 23.7646 131.2 23.7188 cv
cp
@
100.392 10.6719 mo
100.351 10.6113 100.313 10.5454 100.281 10.4849 cv
100.281 10.5542 100.281 10.6318 100.281 10.7095 cv
100.051 14.9746 89.0513 19.2573 97.3481 29.6611 cv
102.208 27.9927 107.238 26.6436 112.407 25.6572 cv
114.409 12.4668 102.716 14.2617 100.392 10.6719 cv
cp
f
100.392 10.6719 mo
100.351 10.6113 100.313 10.5454 100.281 10.4849 cv
100.281 10.5542 100.281 10.6318 100.281 10.7095 cv
100.051 14.9746 89.0513 19.2573 97.3481 29.6611 cv
102.208 27.9927 107.238 26.6436 112.407 25.6572 cv
114.409 12.4668 102.716 14.2617 100.392 10.6719 cv
cp
@
79.7651 18.3687 mo
79.7163 18.314 79.6675 18.2568 79.6216 18.1992 cv
79.6343 18.2739 79.646 18.3428 79.6587 18.415 cv
80.1753 22.6372 70.1987 28.7231 79.8921 37.4468 cv
84.4585 34.9072 89.2329 32.6865 94.1929 30.8027 cv
93.7456 17.7417 82.6646 21.481 79.7651 18.3687 cv
cp
f
79.7651 18.3687 mo
79.7163 18.314 79.6675 18.2568 79.6216 18.1992 cv
79.6343 18.2739 79.646 18.3428 79.6587 18.415 cv
80.1753 22.6372 70.1987 28.7231 79.8921 37.4468 cv
84.4585 34.9072 89.2329 32.6865 94.1929 30.8027 cv
93.7456 17.7417 82.6646 21.481 79.7651 18.3687 cv
cp
@
60.7935 29.543 mo
60.7358 29.4971 60.6792 29.4536 60.6196 29.4019 cv
60.647 29.4683 60.6733 29.543 60.6948 29.6118 cv
61.9341 33.6563 53.272 41.3154 64.0444 48.1924 cv
68.1567 44.8477 72.52 41.7871 77.1118 39.0547 cv
74.3296 26.5688 64.1694 32.0884 60.7935 29.543 cv
cp
f
60.7935 29.543 mo
60.7358 29.4971 60.6792 29.4536 60.6196 29.4019 cv
60.647 29.4683 60.6733 29.543 60.6948 29.6118 cv
61.9341 33.6563 53.272 41.3154 64.0444 48.1924 cv
68.1567 44.8477 72.52 41.7871 77.1118 39.0547 cv
74.3296 26.5688 64.1694 32.0884 60.7935 29.543 cv
cp
@
43.9966 43.8638 mo
43.9321 43.835 43.8716 43.7979 43.8052 43.7573 cv
43.8472 43.8179 43.8833 43.8838 43.9146 43.9561 cv
45.8276 47.7007 38.7124 56.6689 50.2583 61.5928 cv
53.7661 57.5317 57.5679 53.7266 61.6411 50.209 cv
56.7134 38.6636 47.7427 45.7793 43.9966 43.8638 cv
cp
f
43.9966 43.8638 mo
43.9321 43.835 43.8716 43.7979 43.8052 43.7573 cv
43.8472 43.8179 43.8833 43.8838 43.9146 43.9561 cv
45.8276 47.7007 38.7124 56.6689 50.2583 61.5928 cv
53.7661 57.5317 57.5679 53.7266 61.6411 50.209 cv
56.7134 38.6636 47.7427 45.7793 43.9966 43.8638 cv
cp
@
29.8081 60.7646 mo
29.7349 60.7417 29.6685 60.7158 29.5996 60.687 cv
29.6484 60.7417 29.6958 60.8022 29.7417 60.8594 cv
32.2729 64.2192 26.8237 74.2944 39.0503 77.1333 cv
41.8032 72.5142 44.8911 68.1079 48.2847 63.9429 cv
41.4292 53.4243 33.8306 61.9956 29.8081 60.7646 cv
cp
f
29.8081 60.7646 mo
29.7349 60.7417 29.6685 60.7158 29.5996 60.687 cv
29.6484 60.7417 29.6958 60.8022 29.7417 60.8594 cv
32.2729 64.2192 26.8237 74.2944 39.0503 77.1333 cv
41.8032 72.5142 44.8911 68.1079 48.2847 63.9429 cv
41.4292 53.4243 33.8306 61.9956 29.8081 60.7646 cv
cp
@
18.6006 79.7793 mo
18.5288 79.771 18.4556 79.7593 18.3809 79.7422 cv
18.4409 79.7881 18.4985 79.8369 18.5518 79.8887 cv
21.6421 82.7734 17.9707 93.7349 30.7471 94.3047 cv
32.6455 89.3086 34.8989 84.4795 37.4805 79.8486 cv
28.8359 70.4346 22.7998 80.2944 18.6006 79.7793 cv
cp
f
18.6006 79.7793 mo
18.5288 79.771 18.4556 79.7593 18.3809 79.7422 cv
18.4409 79.7881 18.4985 79.8369 18.5518 79.8887 cv
21.6421 82.7734 17.9707 93.7349 30.7471 94.3047 cv
32.6455 89.3086 34.8989 84.4795 37.4805 79.8486 cv
28.8359 70.4346 22.7998 80.2944 18.6006 79.7793 cv
cp
@
10.8691 100.396 mo
10.7959 100.399 10.7212 100.399 10.6465 100.396 cv
10.7124 100.434 10.7788 100.471 10.8394 100.512 cv
14.4072 102.83 12.6528 114.389 25.5898 112.56 cv
26.5811 107.351 27.9429 102.26 29.6528 97.3276 cv
19.3745 89.291 15.1191 100.181 10.8691 100.396 cv
cp
f
10.8691 100.396 mo
10.7959 100.399 10.7212 100.399 10.6465 100.396 cv
10.7124 100.434 10.7788 100.471 10.8394 100.512 cv
14.4072 102.83 12.6528 114.389 25.5898 112.56 cv
26.5811 107.351 27.9429 102.26 29.6528 97.3276 cv
19.3745 89.291 15.1191 100.181 10.8691 100.396 cv
cp
@
6.85254 122.046 mo
6.7793 122.061 6.70898 122.072 6.63428 122.086 cv
6.70459 122.106 6.77344 122.135 6.84424 122.158 cv
10.7817 123.838 11.0435 135.65 23.6816 131.388 cv
23.7578 126.13 24.2095 120.944 25.0132 115.862 cv
13.3257 109.505 11.0205 121.085 6.85254 122.046 cv
cp
f
6.85254 122.046 mo
6.7793 122.061 6.70898 122.072 6.63428 122.086 cv
6.70459 122.106 6.77344 122.135 6.84424 122.158 cv
10.7817 123.838 11.0435 135.65 23.6816 131.388 cv
23.7578 126.13 24.2095 120.944 25.0132 115.862 cv
13.3257 109.505 11.0205 121.085 6.85254 122.046 cv
cp
@
23.6919 134.874 mo
10.8691 130.433 10.6294 142.367 6.66992 144.043 cv
6.59961 144.072 6.5332 144.098 6.46289 144.124 cv
6.53613 144.13 6.60986 144.145 6.68311 144.158 cv
10.8706 145.128 13.1816 156.831 25.0347 150.233 cv
24.6362 147.713 24.3203 145.16 24.0957 142.582 cv
23.8701 139.994 23.7393 137.422 23.6919 134.874 cv
cp
f
23.6919 134.874 mo
10.8691 130.433 10.6294 142.367 6.66992 144.043 cv
6.59961 144.072 6.5332 144.098 6.46289 144.124 cv
6.53613 144.13 6.60986 144.145 6.68311 144.158 cv
10.8706 145.128 13.1816 156.831 25.0347 150.233 cv
24.6362 147.713 24.3203 145.16 24.0957 142.582 cv
23.8701 139.994 23.7393 137.422 23.6919 134.874 cv
cp
@
10.6479 165.679 mo
10.5845 165.719 10.5229 165.76 10.4565 165.791 cv
10.5313 165.788 10.606 165.788 10.6836 165.793 cv
14.9521 166.016 19.2349 177.017 29.6382 168.725 cv
27.9644 163.861 26.6182 158.833 25.6348 153.664 cv
12.4414 151.66 14.2402 163.349 10.6479 165.679 cv
cp
f
10.6479 165.679 mo
10.5845 165.719 10.5229 165.76 10.4565 165.791 cv
10.5313 165.788 10.606 165.788 10.6836 165.793 cv
14.9521 166.016 19.2349 177.017 29.6382 168.725 cv
27.9644 163.861 26.6182 158.833 25.6348 153.664 cv
12.4414 151.66 14.2402 163.349 10.6479 165.679 cv
cp
@
18.3447 186.307 mo
18.2915 186.354 18.2339 186.404 18.1733 186.451 cv
18.2485 186.434 18.3232 186.422 18.3979 186.41 cv
22.6143 185.896 28.6978 195.867 37.4258 186.178 cv
34.8848 181.607 32.6567 176.838 30.7773 171.88 cv
17.7207 172.328 21.458 183.404 18.3447 186.307 cv
cp
f
18.3447 186.307 mo
18.2915 186.354 18.2339 186.404 18.1733 186.451 cv
18.2485 186.434 18.3232 186.422 18.3979 186.41 cv
22.6143 185.896 28.6978 195.867 37.4258 186.178 cv
34.8848 181.607 32.6567 176.838 30.7773 171.88 cv
17.7207 172.328 21.458 183.404 18.3447 186.307 cv
cp
@
29.5205 205.279 mo
29.4785 205.336 29.4282 205.395 29.3794 205.451 cv
29.4482 205.422 29.5205 205.395 29.5908 205.373 cv
33.6333 204.137 41.2896 212.797 48.1694 202.029 cv
44.8218 197.918 41.7612 193.555 39.0259 188.959 cv
26.5449 191.743 32.0688 201.902 29.5205 205.279 cv
cp
f
29.5205 205.279 mo
29.4785 205.336 29.4282 205.395 29.3794 205.451 cv
29.4482 205.422 29.5205 205.395 29.5908 205.373 cv
33.6333 204.137 41.2896 212.797 48.1694 202.029 cv
44.8218 197.918 41.7612 193.555 39.0259 188.959 cv
26.5449 191.743 32.0688 201.902 29.5205 205.279 cv
cp
@
43.8423 222.073 mo
43.8091 222.139 43.772 222.203 43.7349 222.26 cv
43.7964 222.226 43.8628 222.188 43.9292 222.156 cv
47.6763 220.246 56.645 227.359 61.5718 215.812 cv
57.5063 212.311 53.6997 208.503 50.1831 204.428 cv
38.6382 209.352 45.7563 218.325 43.8423 222.073 cv
cp
f
43.8423 222.073 mo
43.8091 222.139 43.772 222.203 43.7349 222.26 cv
43.7964 222.226 43.8628 222.188 43.9292 222.156 cv
47.6763 220.246 56.645 227.359 61.5718 215.812 cv
57.5063 212.311 53.6997 208.503 50.1831 204.428 cv
38.6382 209.352 45.7563 218.325 43.8423 222.073 cv
cp
@
60.7388 236.262 mo
60.7192 236.337 60.6899 236.405 60.6646 236.472 cv
60.7192 236.423 60.7769 236.374 60.8374 236.331 cv
64.1978 233.803 74.269 239.25 77.106 227.021 cv
72.4868 224.268 68.0825 221.179 63.9185 217.791 cv
53.4048 224.642 61.9683 232.24 60.7388 236.262 cv
cp
f
60.7388 236.262 mo
60.7192 236.337 60.6899 236.405 60.6646 236.472 cv
60.7192 236.423 60.7769 236.374 60.8374 236.331 cv
64.1978 233.803 74.269 239.25 77.106 227.021 cv
72.4868 224.268 68.0825 221.179 63.9185 217.791 cv
53.4048 224.642 61.9683 232.24 60.7388 236.262 cv
cp
@
79.7583 247.471 mo
79.7485 247.542 79.7368 247.617 79.7163 247.691 cv
79.7651 247.629 79.814 247.571 79.8647 247.514 cv
82.7485 244.431 93.7085 248.098 94.2837 235.33 cv
89.2876 233.432 84.4536 231.177 79.8257 228.591 cv
70.4116 237.239 80.27 243.274 79.7583 247.471 cv
cp
f
79.7583 247.471 mo
79.7485 247.542 79.7368 247.617 79.7163 247.691 cv
79.7651 247.629 79.814 247.571 79.8647 247.514 cv
82.7485 244.431 93.7085 248.098 94.2837 235.33 cv
89.2876 233.432 84.4536 231.177 79.8257 228.591 cv
70.4116 237.239 80.27 243.274 79.7583 247.471 cv
cp
@
100.375 255.199 mo
100.378 255.273 100.378 255.354 100.375 255.423 cv
100.413 255.36 100.449 255.294 100.489 255.233 cv
102.806 251.664 114.364 253.419 112.533 240.487 cv
107.33 239.494 102.236 238.128 97.2993 236.423 cv
89.27 246.699 100.154 250.959 100.375 255.199 cv
cp
f
100.375 255.199 mo
100.378 255.273 100.378 255.354 100.375 255.423 cv
100.413 255.36 100.449 255.294 100.489 255.233 cv
102.806 251.664 114.364 253.419 112.533 240.487 cv
107.33 239.494 102.236 238.128 97.2993 236.423 cv
89.27 246.699 100.154 250.959 100.375 255.199 cv
cp
@
122.017 259.22 mo
122.035 259.292 122.052 259.363 122.059 259.441 cv
122.08 259.366 122.11 259.298 122.137 259.226 cv
123.812 255.291 135.624 255.026 131.369 242.388 cv
126.103 242.319 120.918 241.864 115.841 241.06 cv
109.482 252.748 121.058 255.052 122.017 259.22 cv
cp
f
122.017 259.22 mo
122.035 259.292 122.052 259.363 122.059 259.441 cv
122.08 259.366 122.11 259.298 122.137 259.226 cv
123.812 255.291 135.624 255.026 131.369 242.388 cv
126.103 242.319 120.918 241.864 115.841 241.06 cv
109.482 252.748 121.058 255.052 122.017 259.22 cv
cp
@
134.848 242.383 mo
130.411 255.199 142.34 255.44 144.02 259.401 cv
144.045 259.467 144.071 259.539 144.098 259.608 cv
144.11 259.533 144.118 259.462 144.137 259.387 cv
145.102 255.199 156.805 252.893 150.213 241.039 cv
147.688 241.437 145.139 241.75 142.555 241.977 cv
139.969 242.204 137.401 242.336 134.848 242.383 cv
cp
f
134.848 242.383 mo
130.411 255.199 142.34 255.44 144.02 259.401 cv
144.045 259.467 144.071 259.539 144.098 259.608 cv
144.11 259.533 144.118 259.462 144.137 259.387 cv
145.102 255.199 156.805 252.893 150.213 241.039 cv
147.688 241.437 145.139 241.75 142.555 241.977 cv
139.969 242.204 137.401 242.336 134.848 242.383 cv
cp
@
165.653 255.423 mo
165.696 255.486 165.733 255.553 165.768 255.613 cv
165.764 255.538 165.764 255.464 165.768 255.389 cv
165.997 251.12 176.993 246.835 168.704 236.435 cv
163.834 238.108 158.807 239.454 153.641 240.438 cv
151.639 253.629 163.323 251.831 165.653 255.423 cv
cp
f
165.653 255.423 mo
165.696 255.486 165.733 255.553 165.768 255.613 cv
165.764 255.538 165.764 255.464 165.768 255.389 cv
165.997 251.12 176.993 246.835 168.704 236.435 cv
163.834 238.108 158.807 239.454 153.641 240.438 cv
151.639 253.629 163.323 251.831 165.653 255.423 cv
cp
@
186.28 247.729 mo
186.333 247.784 186.377 247.839 186.424 247.896 cv
186.407 247.824 186.395 247.749 186.387 247.681 cv
185.87 243.452 195.84 237.372 186.157 228.648 cv
181.586 231.188 176.811 233.411 171.86 235.295 cv
172.299 248.348 183.381 244.614 186.28 247.729 cv
cp
f
186.28 247.729 mo
186.333 247.784 186.377 247.839 186.424 247.896 cv
186.407 247.824 186.395 247.749 186.387 247.681 cv
185.87 243.452 195.84 237.372 186.157 228.648 cv
181.586 231.188 176.811 233.411 171.86 235.295 cv
172.299 248.348 183.381 244.614 186.28 247.729 cv
cp
@
205.252 236.549 mo
205.315 236.596 205.368 236.642 205.43 236.693 cv
205.397 236.624 205.374 236.549 205.348 236.48 cv
204.114 232.439 212.77 224.779 202.008 217.905 cv
197.895 221.248 193.528 224.309 188.932 227.047 cv
191.717 239.523 201.875 234.004 205.252 236.549 cv
cp
f
205.252 236.549 mo
205.315 236.596 205.368 236.642 205.43 236.693 cv
205.397 236.624 205.374 236.549 205.348 236.48 cv
204.114 232.439 212.77 224.779 202.008 217.905 cv
197.895 221.248 193.528 224.309 188.932 227.047 cv
191.717 239.523 201.875 234.004 205.252 236.549 cv
cp
@
222.049 222.229 mo
222.114 222.26 222.182 222.297 222.245 222.335 cv
222.2 222.271 222.165 222.209 222.133 222.145 cv
220.221 218.395 227.336 209.426 215.792 204.502 cv
212.288 208.563 208.479 212.371 204.407 215.881 cv
209.331 227.432 218.301 220.316 222.049 222.229 cv
cp
f
222.049 222.229 mo
222.114 222.26 222.182 222.297 222.245 222.335 cv
222.2 222.271 222.165 222.209 222.133 222.145 cv
220.221 218.395 227.336 209.426 215.792 204.502 cv
212.288 208.563 208.479 212.371 204.407 215.881 cv
209.331 227.432 218.301 220.316 222.049 222.229 cv
cp
@
236.235 205.33 mo
236.307 205.354 236.375 205.377 236.448 205.405 cv
236.397 205.354 236.35 205.296 236.307 205.232 cv
233.774 201.873 239.221 191.804 227.002 188.959 cv
224.247 193.584 221.159 197.99 217.764 202.149 cv
224.622 212.665 232.219 204.1 236.235 205.33 cv
cp
f
236.235 205.33 mo
236.307 205.354 236.375 205.377 236.448 205.405 cv
236.397 205.354 236.35 205.296 236.307 205.232 cv
233.774 201.873 239.221 191.804 227.002 188.959 cv
224.247 193.584 221.159 197.99 217.764 202.149 cv
224.622 212.665 232.219 204.1 236.235 205.33 cv
cp
@
247.448 186.313 mo
247.518 186.321 247.59 186.336 247.665 186.354 cv
247.602 186.307 247.545 186.256 247.493 186.207 cv
244.399 183.321 248.075 172.357 235.303 171.787 cv
233.405 176.787 231.151 181.619 228.567 186.244 cv
237.213 195.66 243.252 185.798 247.448 186.313 cv
cp
f
247.448 186.313 mo
247.518 186.321 247.59 186.336 247.665 186.354 cv
247.602 186.307 247.545 186.256 247.493 186.207 cv
244.399 183.321 248.075 172.357 235.303 171.787 cv
233.405 176.787 231.151 181.619 228.567 186.244 cv
237.213 195.66 243.252 185.798 247.448 186.313 cv
cp
@
255.18 165.695 mo
255.252 165.693 255.325 165.693 255.403 165.695 cv
255.338 165.658 255.264 165.621 255.208 165.581 cv
251.641 163.266 253.391 151.709 240.458 153.535 cv
239.467 158.741 238.104 163.835 236.397 168.768 cv
246.672 176.801 250.932 165.918 255.18 165.695 cv
cp
f
255.18 165.695 mo
255.252 165.693 255.325 165.693 255.403 165.695 cv
255.338 165.658 255.264 165.621 255.208 165.581 cv
251.641 163.266 253.391 151.709 240.458 153.535 cv
239.467 158.741 238.104 163.835 236.397 168.768 cv
246.672 176.801 250.932 165.918 255.18 165.695 cv
cp
@
259.194 144.053 mo
259.268 144.035 259.336 144.021 259.415 144.009 cv
259.342 143.986 259.272 143.963 259.202 143.934 cv
255.264 142.26 255 130.439 242.362 134.701 cv
242.288 139.968 241.838 145.148 241.04 150.23 cv
252.725 156.59 255.028 145.01 259.194 144.053 cv
cp
f
259.194 144.053 mo
259.268 144.035 259.336 144.021 259.415 144.009 cv
259.342 143.986 259.272 143.963 259.202 143.934 cv
255.264 142.26 255 130.439 242.362 134.701 cv
242.288 139.968 241.838 145.148 241.04 150.23 cv
252.725 156.59 255.028 145.01 259.194 144.053 cv
cp
@
259.366 121.934 mo
255.172 120.964 252.868 109.264 241.012 115.856 cv
241.413 118.382 241.725 120.936 241.954 123.519 cv
242.178 126.102 242.309 128.667 242.356 131.221 cv
255.178 135.662 255.415 123.731 259.372 122.052 cv
259.446 122.02 259.512 121.994 259.588 121.974 cv
259.51 121.965 259.434 121.948 259.366 121.934 cv
cp
f
259.366 121.934 mo
255.172 120.964 252.868 109.264 241.012 115.856 cv
241.413 118.382 241.725 120.936 241.954 123.519 cv
242.178 126.102 242.309 128.667 242.356 131.221 cv
255.178 135.662 255.415 123.731 259.372 122.052 cv
259.446 122.02 259.512 121.994 259.588 121.974 cv
259.51 121.965 259.434 121.948 259.366 121.934 cv
cp
@
255.399 100.417 mo
255.459 100.376 255.524 100.339 255.592 100.302 cv
255.518 100.307 255.44 100.307 255.368 100.302 cv
251.096 100.077 246.815 89.0786 236.411 97.3677 cv
238.083 102.234 239.428 107.259 240.417 112.428 cv
253.608 114.43 251.805 102.741 255.399 100.417 cv
cp
f
255.399 100.417 mo
255.459 100.376 255.524 100.339 255.592 100.302 cv
255.518 100.307 255.44 100.307 255.368 100.302 cv
251.096 100.077 246.815 89.0786 236.411 97.3677 cv
238.083 102.234 239.428 107.259 240.417 112.428 cv
253.608 114.43 251.805 102.741 255.399 100.417 cv
cp
@
247.704 79.7881 mo
247.764 79.7363 247.815 79.6875 247.872 79.6445 cv
247.803 79.6616 247.723 79.6729 247.649 79.6787 cv
243.432 80.2021 237.352 70.2246 228.62 79.9175 cv
231.161 84.4824 233.393 89.2568 235.268 94.2153 cv
248.327 93.7666 244.588 82.6875 247.704 79.7881 cv
cp
f
247.704 79.7881 mo
247.764 79.7363 247.815 79.6875 247.872 79.6445 cv
247.803 79.6616 247.723 79.6729 247.649 79.6787 cv
243.432 80.2021 237.352 70.2246 228.62 79.9175 cv
231.161 84.4824 233.393 89.2568 235.268 94.2153 cv
248.327 93.7666 244.588 82.6875 247.704 79.7881 cv
cp
@
236.528 60.8193 mo
236.569 60.7617 236.618 60.6982 236.667 60.6465 cv
236.598 60.6753 236.528 60.6982 236.459 60.7188 cv
232.417 61.9556 224.752 53.2949 217.874 64.0664 cv
221.227 68.1768 224.282 72.54 227.014 77.1362 cv
239.502 74.3521 233.981 64.1904 236.528 60.8193 cv
cp
f
236.528 60.8193 mo
236.569 60.7617 236.618 60.6982 236.667 60.6465 cv
236.598 60.6753 236.528 60.6982 236.459 60.7188 cv
232.417 61.9556 224.752 53.2949 217.874 64.0664 cv
221.227 68.1768 224.282 72.54 227.014 77.1362 cv
239.502 74.3521 233.981 64.1904 236.528 60.8193 cv
cp
@
222.206 44.019 mo
222.237 43.959 222.274 43.8926 222.315 43.8291 cv
222.249 43.8696 222.182 43.9043 222.114 43.9385 cv
218.368 45.8486 209.399 38.7324 204.479 50.2837 cv
208.538 53.7871 212.344 57.5952 215.86 61.6621 cv
227.411 56.7407 220.292 47.7671 222.206 44.019 cv
cp
f
222.206 44.019 mo
222.237 43.959 222.274 43.8926 222.315 43.8291 cv
222.249 43.8696 222.182 43.9043 222.114 43.9385 cv
218.368 45.8486 209.399 38.7324 204.479 50.2837 cv
208.538 53.7871 212.344 57.5952 215.86 61.6621 cv
227.411 56.7407 220.292 47.7671 222.206 44.019 cv
cp
@
205.303 29.8276 mo
205.327 29.7588 205.35 29.6895 205.385 29.6265 cv
205.327 29.6694 205.27 29.7183 205.209 29.7646 cv
201.846 32.2954 191.78 26.8452 188.938 39.0723 cv
193.557 41.8301 197.963 44.9106 202.124 48.3047 cv
212.641 41.4507 204.077 33.8486 205.303 29.8276 cv
cp
f
205.303 29.8276 mo
205.327 29.7588 205.35 29.6895 205.385 29.6265 cv
205.327 29.6694 205.27 29.7183 205.209 29.7646 cv
201.846 32.2954 191.78 26.8452 188.938 39.0723 cv
193.557 41.8301 197.963 44.9106 202.124 48.3047 cv
212.641 41.4507 204.077 33.8486 205.303 29.8276 cv
cp
@
186.286 18.6221 mo
186.301 18.5498 186.313 18.478 186.329 18.4063 cv
186.28 18.4639 186.229 18.5239 186.182 18.5732 cv
183.297 21.665 172.331 17.9951 171.766 30.7681 cv
176.76 32.6694 181.592 34.9189 186.217 37.5044 cv
195.633 28.8555 185.772 22.8184 186.286 18.6221 cv
cp
f
186.286 18.6221 mo
186.301 18.5498 186.313 18.478 186.329 18.4063 cv
186.28 18.4639 186.229 18.5239 186.182 18.5732 cv
183.297 21.665 172.331 17.9951 171.766 30.7681 cv
176.76 32.6694 181.592 34.9189 186.217 37.5044 cv
195.633 28.8555 185.772 22.8184 186.286 18.6221 cv
cp
@
165.674 10.8936 mo
165.668 10.8159 165.668 10.7412 165.668 10.6689 cv
165.637 10.7354 165.594 10.7983 165.555 10.8618 cv
163.243 14.4282 151.682 12.6738 153.512 25.6113 cv
158.721 26.6035 163.805 27.9668 168.745 29.6753 cv
176.778 19.3984 165.897 15.1387 165.674 10.8936 cv
cp
f
165.674 10.8936 mo
165.668 10.8159 165.668 10.7412 165.668 10.6689 cv
165.637 10.7354 165.594 10.7983 165.555 10.8618 cv
163.243 14.4282 151.682 12.6738 153.512 25.6113 cv
158.721 26.6035 163.805 27.9668 168.745 29.6753 cv
176.778 19.3984 165.897 15.1387 165.674 10.8936 cv
cp
@
144.028 6.87793 mo
144.006 6.80322 144 6.73145 143.985 6.65674 cv
143.959 6.72559 143.936 6.80029 143.909 6.8667 cv
142.233 10.8042 130.419 11.063 134.674 23.707 cv
139.942 23.7788 145.127 24.2363 150.209 25.0386 cv
156.569 13.3496 144.987 11.04 144.028 6.87793 cv
cp
f
144.028 6.87793 mo
144.006 6.80322 144 6.73145 143.985 6.65674 cv
143.959 6.72559 143.936 6.80029 143.909 6.8667 cv
142.233 10.8042 130.419 11.063 134.674 23.707 cv
139.942 23.7788 145.127 24.2363 150.209 25.0386 cv
156.569 13.3496 144.987 11.04 144.028 6.87793 cv
cp
@
12 lw
247.084 134.443 mo
247.084 197.938 195.606 249.418 132.109 249.418 cv
68.6118 249.418 17.1411 197.938 17.1411 134.443 cv
17.1411 70.9463 68.6118 19.4731 132.109 19.4731 cv
195.606 19.4731 247.084 70.9463 247.084 134.443 cv
cp
@
88.0454 208.671 mo
93.5142 196.565 li
93.5679 196.458 93.6587 196.368 93.8188 196.368 cv
93.9995 196.368 li
94.1606 196.368 94.2505 196.458 94.3052 196.565 cv
99.7368 208.671 li
99.8462 208.905 99.7017 209.14 99.4321 209.14 cv
98.7124 209.14 li
98.5513 209.14 98.4429 209.03 98.4067 208.94 cv
97.0747 205.974 li
90.689 205.974 li
89.3765 208.94 li
89.3403 209.03 89.2329 209.14 89.0708 209.14 cv
88.3501 209.14 li
88.0815 209.14 87.938 208.905 88.0454 208.671 cv
88.0454 208.671 li
cp
96.5903 204.858 mo
95.7075 202.897 94.8442 200.917 93.9634 198.958 cv
93.8188 198.958 li
91.1919 204.858 li
96.5903 204.858 li
96.5903 204.858 li
cp
f
107.924 202.286 mo
107.924 202.106 108.086 201.944 108.265 201.944 cv
108.84 201.944 li
109.022 201.944 109.182 202.106 109.182 202.286 cv
109.182 206.083 li
109.182 207.448 109.795 208.114 110.801 208.114 cv
112.168 208.114 112.942 207.087 112.942 207.087 cv
112.942 206.694 112.942 206.28 112.942 202.286 cv
112.942 202.106 113.104 201.944 113.285 201.944 cv
113.842 201.944 li
114.021 201.944 114.184 202.106 114.184 202.286 cv
114.184 208.798 li
114.184 208.978 114.021 209.14 113.842 209.14 cv
113.5 209.14 li
113.302 209.14 113.231 209.015 113.176 208.833 cv
113.05 208.366 li
113.05 208.366 112.205 209.319 110.711 209.319 cv
108.625 209.319 107.924 207.97 107.924 206.063 cv
107.924 202.286 li
107.924 202.286 li
cp
f
123.022 208.132 mo
123.094 208.026 123.221 207.772 123.275 207.683 cv
123.365 207.54 123.563 207.503 123.759 207.63 cv
123.759 207.63 124.534 208.257 125.45 208.257 cv
126.188 208.257 126.62 207.88 126.62 207.396 cv
126.62 206.765 126.081 206.478 125.037 205.956 cv
124.083 205.487 122.987 204.858 122.987 203.634 cv
122.987 202.88 123.598 201.765 125.272 201.765 cv
126.207 201.765 126.926 202.089 127.267 202.321 cv
127.429 202.431 127.485 202.681 127.376 202.88 cv
127.233 203.167 li
127.124 203.364 126.872 203.419 126.711 203.329 cv
126.711 203.329 125.936 202.897 125.272 202.897 cv
124.46 202.897 124.245 203.312 124.245 203.618 cv
124.245 204.212 124.838 204.481 125.577 204.841 cv
126.818 205.435 127.934 205.991 127.934 207.286 cv
127.934 208.329 126.926 209.319 125.45 209.319 cv
124.245 209.319 123.508 208.815 123.113 208.511 cv
123.022 208.438 122.969 208.257 123.022 208.132 cv
123.022 208.132 li
cp
f
137.054 203.024 mo
136.137 203.024 li
135.939 203.024 135.794 202.862 135.794 202.681 cv
135.794 202.286 li
135.794 202.089 135.939 201.944 136.137 201.944 cv
137.054 201.944 li
137.054 199.948 li
137.054 199.767 137.216 199.604 137.396 199.604 cv
137.971 199.569 li
138.151 199.569 138.295 199.731 138.295 199.911 cv
138.295 201.944 li
140.382 201.944 li
140.58 201.944 140.724 202.089 140.724 202.286 cv
140.724 202.681 li
140.724 202.862 140.58 203.024 140.382 203.024 cv
138.295 203.024 li
138.295 207.233 li
138.295 207.952 138.475 208.097 138.889 208.097 cv
139.338 208.097 139.968 207.827 140.202 207.7 cv
140.472 207.556 140.543 207.663 140.633 207.808 cv
140.904 208.257 li
141.029 208.476 140.976 208.581 140.778 208.708 cv
140.527 208.87 139.555 209.319 138.709 209.319 cv
137.27 209.319 137.054 208.456 137.054 207.341 cv
137.054 203.024 li
137.054 203.024 li
cp
f
149.14 197.771 mo
149.14 197.286 149.517 196.909 149.986 196.909 cv
150.471 196.909 150.849 197.286 150.849 197.771 cv
150.849 198.239 150.471 198.616 149.986 198.616 cv
149.517 198.616 149.14 198.239 149.14 197.771 cv
149.14 197.771 li
cp
149.392 202.286 mo
149.392 202.106 149.553 201.944 149.734 201.944 cv
150.291 201.944 li
150.471 201.944 150.633 202.106 150.633 202.286 cv
150.633 208.798 li
150.633 208.978 150.471 209.14 150.291 209.14 cv
149.734 209.14 li
149.553 209.14 149.392 208.978 149.392 208.798 cv
149.392 202.286 li
149.392 202.286 li
cp
f
gsave
49.0259 56.7729 mo
49.0259 209.319 li
217.025 209.319 li
217.025 56.7729 li
49.0259 56.7729 li
cp
clp
159.879 202.286 mo
159.879 202.106 160.042 201.944 160.222 201.944 cv
160.564 201.944 li
160.725 201.944 160.815 202.015 160.851 202.159 cv
161.012 202.718 li
161.012 202.718 162.039 201.765 163.532 201.765 cv
165.619 201.765 166.32 203.132 166.32 205.001 cv
166.32 208.798 li
166.32 208.978 166.158 209.14 165.978 209.14 cv
165.402 209.14 li
165.222 209.14 165.061 208.978 165.061 208.798 cv
165.061 205.001 li
165.061 203.634 164.449 202.97 163.442 202.97 cv
162.092 202.97 161.121 203.995 161.121 203.995 cv
161.121 208.798 li
161.121 208.978 160.958 209.14 160.78 209.14 cv
160.222 209.14 li
160.042 209.14 159.879 208.978 159.879 208.798 cv
159.879 202.286 li
159.879 202.286 li
cp
f
121.901 68.9512 mo
124.151 68.5859 126.377 67.8813 128.602 67.0093 cv
128.62 67.0029 128.641 66.9951 128.659 66.9854 cv
128.942 66.8726 129.223 66.7612 129.503 66.646 cv
131.086 65.9985 132.671 65.2754 134.259 64.5474 cv
136.85 63.3608 139.462 62.1636 142.124 61.2256 cv
146.731 59.6011 151.499 58.7705 156.586 60.1606 cv
158.884 60.793 161.243 61.873 163.683 63.5435 cv
163.991 63.7549 164.299 63.9702 164.609 64.1973 cv
164.605 64.1973 164.604 64.1895 164.599 64.1875 cv
159.52 58.2881 154.386 56.5371 149.103 56.7974 cv
144.623 57.0142 140.032 58.6724 135.273 60.4883 cv
133.09 61.3184 130.866 62.1758 128.606 62.9414 cv
124.647 64.2856 120.567 65.3242 116.327 65.4058 cv
112.657 65.4727 108.87 64.8237 104.944 63.0078 cv
107.44 65.3813 109.866 66.9585 112.234 67.9292 cv
115.54 69.2827 118.742 69.458 121.901 68.9512 cv
121.901 68.9512 li
cp
f
grestore
161.775 66.6152 mo
157.952 64.6055 154.44 64.2354 151.088 64.7881 cv
146.936 65.4688 143.014 67.5649 139.01 69.7476 cv
145.841 79.1377 140.379 85.3604 135.387 91.8828 cv
133.752 94.0161 132.17 96.1821 131.083 98.5005 cv
130.286 100.203 129.754 101.989 129.674 103.909 cv
129.617 104.315 129.563 104.727 129.527 105.144 cv
128.722 113.944 132.737 121.1 138.494 121.075 cv
139.087 121.073 139.58 120.995 140.138 120.882 cv
151.794 118.661 161.495 109.759 164.633 92.4458 cv
166.346 83.0054 165.397 73.4854 161.775 66.6152 cv
161.775 66.6152 li
cp
f
131.841 73.3818 mo
127.34 75.3237 122.526 76.4697 117.008 75.207 cv
114.227 74.563 111.266 73.3071 108.075 71.2295 cv
102.313 76.4229 98.019 83.1333 96.2788 90.5771 cv
92.8872 105.091 100.276 117.778 113.358 122.111 cv
113.241 122.041 113.12 121.972 112.995 121.899 cv
107.35 112.482 107.79 106.231 110.829 101.43 cv
117.418 91.0269 136.233 87.4648 131.841 73.3818 cv
131.841 73.3818 li
cp
f
60.8618 145.56 mo
56.2964 145.56 li
56.0093 145.56 55.7993 145.323 55.7993 145.063 cv
55.7993 144.3 li
55.7993 144.036 56.0093 143.804 56.2964 143.804 cv
67.4194 143.804 li
67.7046 143.804 67.9116 144.036 67.9116 144.3 cv
67.9116 145.063 li
67.9116 145.323 67.7046 145.56 67.4194 145.56 cv
62.854 145.56 li
62.854 161.661 li
62.854 161.921 62.6187 162.159 62.3599 162.159 cv
61.3599 162.159 li
61.0923 162.159 60.8618 161.921 60.8618 161.661 cv
60.8618 145.56 li
60.8618 145.56 li
cp
f
73.5688 144.3 mo
73.5688 144.036 73.7778 143.804 74.0649 143.804 cv
80.8579 143.804 li
84.0063 143.804 86.5728 146.265 86.5728 149.386 cv
86.5728 151.802 84.9751 153.821 82.6919 154.737 cv
86.2876 161.399 li
86.4731 161.739 86.2876 162.159 85.8413 162.159 cv
84.5054 162.159 li
84.27 162.159 84.1382 162.028 84.0864 161.923 cv
80.5942 154.976 li
75.5884 154.976 li
75.5884 161.661 li
75.5884 161.923 75.3481 162.159 75.0894 162.159 cv
74.0649 162.159 li
73.7778 162.159 73.5688 161.923 73.5688 161.661 cv
73.5688 144.3 li
73.5688 144.3 li
cp
80.7241 153.241 mo
82.7466 153.241 84.5054 151.563 84.5054 149.417 cv
84.5054 147.425 82.7466 145.716 80.7251 145.716 cv
75.6392 145.716 li
75.6392 153.241 li
80.7241 153.241 li
80.7241 153.241 li
cp
f
90.8452 161.478 mo
98.8169 143.829 li
98.895 143.671 99.0259 143.544 99.2603 143.544 cv
99.5239 143.544 li
99.7583 143.544 99.8921 143.671 99.9673 143.829 cv
107.888 161.478 li
108.043 161.821 107.836 162.159 107.443 162.159 cv
106.395 162.159 li
106.158 162.159 105.999 162.005 105.948 161.868 cv
104.005 157.544 li
94.6958 157.544 li
92.7847 161.868 li
92.729 162.005 92.5708 162.159 92.3384 162.159 cv
91.2896 162.159 li
90.894 162.159 90.6841 161.821 90.8452 161.478 cv
103.298 155.919 mo
102.016 153.058 100.756 150.171 99.4751 147.313 cv
99.2603 147.313 li
95.4302 155.919 li
103.298 155.919 li
103.298 155.919 li
cp
f
145.813 161.478 mo
153.786 143.829 li
153.865 143.671 153.994 143.544 154.23 143.544 cv
154.496 143.544 li
154.729 143.544 154.856 143.671 154.94 143.829 cv
162.861 161.478 li
163.016 161.821 162.801 162.159 162.414 162.159 cv
161.365 162.159 li
161.125 162.159 160.97 162.005 160.92 161.868 cv
158.977 157.544 li
149.668 157.544 li
147.753 161.868 li
147.696 162.005 147.542 162.159 147.307 162.159 cv
146.26 162.159 li
145.862 162.159 145.655 161.821 145.813 161.478 cv
158.269 155.919 mo
156.987 153.058 155.723 150.171 154.44 147.313 cv
154.23 147.313 li
150.405 155.919 li
158.269 155.919 li
158.269 155.919 li
cp
f
167.251 159.144 mo
167.382 158.983 167.517 158.804 167.649 158.649 cv
167.91 158.306 168.195 158.097 168.565 158.407 cv
168.75 158.565 170.664 160.401 172.993 160.401 cv
175.119 160.401 176.508 159.065 176.508 157.517 cv
176.508 155.71 174.937 154.632 171.921 153.374 cv
169.037 152.112 167.306 150.935 167.306 147.944 cv
167.306 146.163 168.724 143.278 172.892 143.278 cv
175.461 143.278 177.376 144.612 177.376 144.612 cv
177.533 144.692 177.85 145.007 177.533 145.505 cv
177.427 145.661 177.324 145.847 177.216 146.007 cv
176.979 146.372 176.719 146.478 176.3 146.241 cv
176.117 146.134 174.464 145.036 172.866 145.036 cv
170.085 145.036 169.245 146.817 169.245 147.921 cv
169.245 149.675 170.583 150.694 172.786 151.618 cv
176.333 153.058 178.608 154.397 178.608 157.44 cv
178.608 160.167 176.012 162.159 172.941 162.159 cv
169.851 162.159 167.748 160.351 167.409 160.034 cv
167.202 159.853 166.938 159.638 167.251 159.144 cv
f
182.856 161.478 mo
190.83 143.829 li
190.909 143.671 191.039 143.544 191.276 143.544 cv
191.539 143.544 li
191.774 143.544 191.901 143.671 191.984 143.829 cv
199.905 161.478 li
200.059 161.821 199.849 162.159 199.457 162.159 cv
198.412 162.159 li
198.171 162.159 198.015 162.005 197.96 161.868 cv
196.025 157.544 li
186.709 157.544 li
184.799 161.868 li
184.742 162.005 184.589 162.159 184.351 162.159 cv
183.3 162.159 li
182.907 162.159 182.697 161.821 182.856 161.478 cv
195.313 155.919 mo
194.032 153.058 192.771 150.171 191.487 147.313 cv
191.276 147.313 li
187.445 155.919 li
195.313 155.919 li
195.313 155.919 li
cp
f
120.862 168.667 mo
132.071 143.829 li
132.15 143.671 132.279 143.544 132.518 143.544 cv
132.782 143.544 li
133.014 143.544 133.142 143.671 133.226 143.829 cv
141.144 161.478 li
141.302 161.821 141.088 162.159 140.699 162.159 cv
139.651 162.159 li
139.41 162.159 139.254 162.005 139.204 161.868 cv
137.261 157.544 li
127.955 157.544 li
122.801 169.056 li
122.747 169.19 122.591 169.349 122.355 169.349 cv
121.307 169.349 li
120.911 169.349 120.702 169.009 120.862 168.667 cv
136.555 155.919 mo
135.272 153.058 134.007 150.171 132.724 147.313 cv
132.518 147.313 li
128.687 155.919 li
136.555 155.919 li
136.555 155.919 li
cp
f
128.066 136.766 mo
116.736 161.868 li
116.657 162.024 116.528 162.153 116.292 162.153 cv
116.025 162.153 li
115.792 162.153 115.665 162.024 115.581 161.868 cv
107.661 144.222 li
107.504 143.876 107.719 143.538 108.107 143.538 cv
109.157 143.538 li
109.397 143.538 109.551 143.692 109.602 143.829 cv
116.083 158.384 li
116.292 158.384 li
126.126 136.373 li
126.18 136.237 126.338 136.081 126.572 136.081 cv
127.621 136.081 li
128.018 136.081 128.226 136.419 128.066 136.766 cv
f
49.0259 173.784 mo
49.0259 173.671 49.1147 173.573 49.2368 173.573 cv
53.6802 173.573 li
53.8013 173.573 53.8911 173.671 53.8911 173.784 cv
53.8911 174.405 li
53.8911 174.517 53.8013 174.616 53.6802 174.616 cv
50.1694 174.616 li
50.1694 176.882 li
53.1362 176.882 li
53.2476 176.882 53.3462 176.983 53.3462 177.095 cv
53.3462 177.716 li
53.3462 177.839 53.2476 177.927 53.1362 177.927 cv
50.1694 177.927 li
50.1694 180.315 li
53.6802 180.315 li
53.8013 180.315 53.8911 180.415 53.8911 180.524 cv
53.8911 181.136 li
53.8911 181.249 53.8013 181.349 53.6802 181.349 cv
49.2368 181.349 li
49.1147 181.349 49.0259 181.249 49.0259 181.136 cv
49.0259 173.784 li
49.0259 173.784 li
cp
f
59.3804 177.358 mo
57.1821 173.884 li
57.0923 173.739 57.1821 173.573 57.3696 173.573 cv
58.314 173.573 li
58.3931 173.573 58.4712 173.616 58.5044 173.671 cv
60.0698 176.327 li
60.0806 176.327 li
61.6704 173.671 li
61.6909 173.626 61.7583 173.573 61.8481 173.573 cv
62.7915 173.573 li
62.979 173.573 63.0688 173.739 62.979 173.884 cv
60.7817 177.358 li
63.0591 181.038 li
63.147 181.192 63.0591 181.349 62.8696 181.349 cv
62.0142 181.349 li
61.9243 181.349 61.8481 181.292 61.8237 181.249 cv
60.0806 178.405 li
60.0591 178.405 li
58.3364 181.249 li
58.3032 181.292 58.2368 181.349 58.147 181.349 cv
57.2915 181.349 li
57.0923 181.349 57.0044 181.181 57.0923 181.038 cv
59.3804 177.358 li
59.3804 177.358 li
cp
f
66.5337 173.784 mo
66.5337 173.671 66.6235 173.573 66.7446 173.573 cv
69.2788 173.573 li
70.645 173.573 71.7671 174.683 71.7671 176.026 cv
71.7671 177.403 70.645 178.526 69.2886 178.526 cv
67.6782 178.526 li
67.6782 181.136 li
67.6782 181.249 67.5776 181.349 67.4673 181.349 cv
66.7446 181.349 li
66.6235 181.349 66.5337 181.249 66.5337 181.136 cv
66.5337 173.784 li
66.5337 173.784 li
cp
69.2104 177.438 mo
69.9771 177.438 70.6216 176.817 70.6216 176.017 cv
70.6216 175.261 69.9771 174.683 69.2104 174.683 cv
67.6782 174.683 li
67.6782 177.438 li
69.2104 177.438 li
69.2104 177.438 li
cp
f
75.1733 173.784 mo
75.1733 173.671 75.2622 173.573 75.3843 173.573 cv
79.8286 173.573 li
79.9517 173.573 80.0396 173.671 80.0396 173.784 cv
80.0396 174.405 li
80.0396 174.517 79.9517 174.616 79.8286 174.616 cv
76.3169 174.616 li
76.3169 176.882 li
79.2837 176.882 li
79.396 176.882 79.4946 176.983 79.4946 177.095 cv
79.4946 177.716 li
79.4946 177.839 79.396 177.927 79.2837 177.927 cv
76.3169 177.927 li
76.3169 180.315 li
79.8286 180.315 li
79.9517 180.315 80.0396 180.415 80.0396 180.524 cv
80.0396 181.136 li
80.0396 181.249 79.9517 181.349 79.8286 181.349 cv
75.3843 181.349 li
75.2622 181.349 75.1733 181.249 75.1733 181.136 cv
75.1733 173.784 li
75.1733 173.784 li
cp
f
83.7378 173.784 mo
83.7378 173.671 83.8267 173.573 83.9487 173.573 cv
86.9712 173.573 li
88.3032 173.573 89.3931 174.628 89.3931 175.948 cv
89.3931 176.972 88.7153 177.815 87.7485 178.204 cv
89.27 181.026 li
89.3491 181.171 89.27 181.349 89.0825 181.349 cv
88.2153 181.349 li
88.1265 181.349 88.061 181.292 88.0376 181.249 cv
86.5591 178.304 li
84.8823 178.304 li
84.8823 181.136 li
84.8823 181.249 84.7817 181.349 84.6714 181.349 cv
83.9487 181.349 li
83.8267 181.349 83.7378 181.249 83.7378 181.136 cv
83.7378 173.784 li
83.7378 173.784 li
cp
86.8833 177.349 mo
87.604 177.349 88.2388 176.737 88.2388 175.972 cv
88.2388 175.249 87.604 174.649 86.8833 174.649 cv
84.9048 174.649 li
84.9048 177.349 li
86.8833 177.349 li
86.8833 177.349 li
cp
f
93.2192 173.784 mo
93.2192 173.671 93.3198 173.573 93.4312 173.573 cv
94.1636 173.573 li
94.2739 173.573 94.3745 173.671 94.3745 173.784 cv
94.3745 181.136 li
94.3745 181.249 94.2739 181.349 94.1636 181.349 cv
93.4312 181.349 li
93.3198 181.349 93.2192 181.249 93.2192 181.136 cv
93.2192 173.784 li
93.2192 173.784 li
cp
f
98.5952 173.784 mo
98.5952 173.671 98.6841 173.573 98.8062 173.573 cv
103.25 173.573 li
103.372 173.573 103.461 173.671 103.461 173.784 cv
103.461 174.405 li
103.461 174.517 103.372 174.616 103.25 174.616 cv
99.7397 174.616 li
99.7397 176.882 li
102.706 176.882 li
102.817 176.882 102.917 176.983 102.917 177.095 cv
102.917 177.716 li
102.917 177.839 102.817 177.927 102.706 177.927 cv
99.7397 177.927 li
99.7397 180.315 li
103.25 180.315 li
103.372 180.315 103.461 180.415 103.461 180.524 cv
103.461 181.136 li
103.461 181.249 103.372 181.349 103.25 181.349 cv
98.8062 181.349 li
98.6841 181.349 98.5952 181.249 98.5952 181.136 cv
98.5952 173.784 li
98.5952 173.784 li
cp
f
107.16 173.661 mo
107.16 173.55 107.26 173.46 107.372 173.46 cv
107.649 173.46 li
112.469 179.038 li
112.481 179.038 li
112.481 173.784 li
112.481 173.671 112.57 173.573 112.692 173.573 cv
113.403 173.573 li
113.514 173.573 113.614 173.671 113.614 173.784 cv
113.614 181.259 li
113.614 181.37 113.514 181.46 113.403 181.46 cv
113.114 181.46 li
108.293 175.728 li
108.282 175.728 li
108.282 181.136 li
108.282 181.249 108.192 181.349 108.071 181.349 cv
107.372 181.349 li
107.26 181.349 107.16 181.249 107.16 181.136 cv
107.16 173.661 li
107.16 173.661 li
cp
f
118.93 174.616 mo
117.119 174.616 li
116.997 174.616 116.908 174.517 116.908 174.405 cv
116.908 173.784 li
116.908 173.671 116.997 173.573 117.119 173.573 cv
121.896 173.573 li
122.018 173.573 122.107 173.671 122.107 173.784 cv
122.107 174.405 li
122.107 174.517 122.018 174.616 121.896 174.616 cv
120.086 174.616 li
120.086 181.136 li
120.086 181.249 119.985 181.349 119.874 181.349 cv
119.141 181.349 li
119.03 181.349 118.93 181.249 118.93 181.136 cv
118.93 174.616 li
118.93 174.616 li
cp
f
125.394 173.784 mo
125.394 173.671 125.495 173.573 125.606 173.573 cv
126.338 173.573 li
126.45 173.573 126.551 173.671 126.551 173.784 cv
126.551 181.136 li
126.551 181.249 126.45 181.349 126.338 181.349 cv
125.606 181.349 li
125.495 181.349 125.394 181.249 125.394 181.136 cv
125.394 173.784 li
125.394 173.784 li
cp
f
129.793 181.06 mo
133.204 173.583 li
133.238 173.517 133.338 173.46 133.393 173.46 cv
133.504 173.46 li
133.559 173.46 133.66 173.517 133.693 173.583 cv
137.082 181.06 li
137.149 181.204 137.059 181.349 136.892 181.349 cv
136.192 181.349 li
136.06 181.349 135.981 181.282 135.938 181.181 cv
135.249 179.661 li
131.616 179.661 li
131.393 180.169 131.16 180.671 130.938 181.181 cv
130.905 181.259 130.815 181.349 130.682 181.349 cv
129.983 181.349 li
129.816 181.349 129.727 181.204 129.793 181.06 cv
129.793 181.06 li
cp
134.826 178.704 mo
133.46 175.659 li
133.405 175.659 li
132.049 178.704 li
134.826 178.704 li
134.826 178.704 li
cp
f
140.342 173.784 mo
140.342 173.671 140.431 173.573 140.553 173.573 cv
141.288 173.573 li
141.397 173.573 141.499 173.671 141.499 173.784 cv
141.499 180.315 li
144.508 180.315 li
144.631 180.315 144.719 180.415 144.719 180.524 cv
144.719 181.136 li
144.719 181.249 144.631 181.349 144.508 181.349 cv
140.553 181.349 li
140.431 181.349 140.342 181.249 140.342 181.136 cv
140.342 173.784 li
140.342 173.784 li
cp
f
152.776 173.784 mo
152.776 173.671 152.865 173.573 152.987 173.573 cv
156.009 173.573 li
157.341 173.573 158.431 174.628 158.431 175.948 cv
158.431 176.972 157.752 177.815 156.787 178.204 cv
158.309 181.026 li
158.386 181.171 158.309 181.349 158.12 181.349 cv
157.253 181.349 li
157.165 181.349 157.097 181.292 157.075 181.249 cv
155.598 178.304 li
153.92 178.304 li
153.92 181.136 li
153.92 181.249 153.82 181.349 153.708 181.349 cv
152.987 181.349 li
152.865 181.349 152.776 181.249 152.776 181.136 cv
152.776 173.784 li
152.776 173.784 li
cp
155.919 177.349 mo
156.642 177.349 157.275 176.737 157.275 175.972 cv
157.275 175.249 156.642 174.649 155.919 174.649 cv
153.942 174.649 li
153.942 177.349 li
155.919 177.349 li
155.919 177.349 li
cp
f
162.257 173.784 mo
162.257 173.671 162.346 173.573 162.468 173.573 cv
166.913 173.573 li
167.035 173.573 167.124 173.671 167.124 173.784 cv
167.124 174.405 li
167.124 174.517 167.035 174.616 166.913 174.616 cv
163.402 174.616 li
163.402 176.882 li
166.368 176.882 li
166.479 176.882 166.579 176.983 166.579 177.095 cv
166.579 177.716 li
166.579 177.839 166.479 177.927 166.368 177.927 cv
163.402 177.927 li
163.402 180.315 li
166.913 180.315 li
167.035 180.315 167.124 180.415 167.124 180.524 cv
167.124 181.136 li
167.124 181.249 167.035 181.349 166.913 181.349 cv
162.468 181.349 li
162.346 181.349 162.257 181.249 162.257 181.136 cv
162.257 173.784 li
162.257 173.784 li
cp
f
170.429 180.226 mo
170.529 180.081 170.618 179.915 170.717 179.771 cv
170.817 179.626 170.973 179.581 171.096 179.681 cv
171.162 179.737 172.017 180.448 172.872 180.448 cv
173.639 180.448 174.127 179.981 174.127 179.415 cv
174.127 178.749 173.55 178.327 172.451 177.872 cv
171.317 177.394 170.429 176.806 170.429 175.517 cv
170.429 174.649 171.096 173.46 172.862 173.46 cv
173.973 173.46 174.805 174.038 174.917 174.116 cv
175.005 174.171 175.094 174.327 174.983 174.495 cv
174.894 174.628 174.795 174.782 174.706 174.915 cv
174.617 175.062 174.473 175.128 174.317 175.028 cv
174.239 174.983 173.461 174.472 172.817 174.472 cv
171.884 174.472 171.561 175.062 171.561 175.472 cv
171.561 176.104 172.05 176.493 172.973 176.87 cv
174.262 177.394 175.362 178.005 175.362 179.358 cv
175.362 180.515 174.327 181.46 172.884 181.46 cv
171.528 181.46 170.672 180.749 170.495 180.583 cv
170.395 180.493 170.318 180.415 170.429 180.226 cv
170.429 180.226 li
cp
f
182.409 173.46 mo
184.631 173.46 186.409 175.249 186.409 177.472 cv
186.409 179.694 184.631 181.46 182.409 181.46 cv
180.188 181.46 178.421 179.694 178.421 177.472 cv
178.421 175.249 180.188 173.46 182.409 173.46 cv
182.409 173.46 li
cp
182.409 180.349 mo
183.999 180.349 185.298 179.06 185.298 177.472 cv
185.298 175.894 183.999 174.571 182.409 174.571 cv
180.831 174.571 179.532 175.894 179.532 177.472 cv
179.532 179.06 180.831 180.349 182.409 180.349 cv
182.409 180.349 li
cp
f
190.124 173.784 mo
190.124 173.671 190.213 173.573 190.335 173.573 cv
193.357 173.573 li
194.691 173.573 195.779 174.628 195.779 175.948 cv
195.779 176.972 195.101 177.815 194.135 178.204 cv
195.658 181.026 li
195.735 181.171 195.658 181.349 195.467 181.349 cv
194.602 181.349 li
194.512 181.349 194.446 181.292 194.423 181.249 cv
192.946 178.304 li
191.269 178.304 li
191.269 181.136 li
191.269 181.249 191.168 181.349 191.057 181.349 cv
190.335 181.349 li
190.213 181.349 190.124 181.249 190.124 181.136 cv
190.124 173.784 li
190.124 173.784 li
cp
193.268 177.349 mo
193.991 177.349 194.624 176.737 194.624 175.972 cv
194.624 175.249 193.991 174.649 193.268 174.649 cv
191.291 174.649 li
191.291 177.349 li
193.268 177.349 li
193.268 177.349 li
cp
f
200.702 174.616 mo
198.89 174.616 li
198.768 174.616 198.679 174.517 198.679 174.405 cv
198.679 173.784 li
198.679 173.671 198.768 173.573 198.89 173.573 cv
203.667 173.573 li
203.79 173.573 203.877 173.671 203.877 173.784 cv
203.877 174.405 li
203.877 174.517 203.79 174.616 203.667 174.616 cv
201.856 174.616 li
201.856 181.136 li
201.856 181.249 201.756 181.349 201.646 181.349 cv
200.912 181.349 li
200.801 181.349 200.702 181.249 200.702 181.136 cv
200.702 174.616 li
200.702 174.616 li
cp
f
206.812 180.226 mo
206.914 180.081 207.001 179.915 207.101 179.771 cv
207.202 179.626 207.357 179.581 207.48 179.681 cv
207.546 179.737 208.402 180.448 209.257 180.448 cv
210.023 180.448 210.512 179.981 210.512 179.415 cv
210.512 178.749 209.934 178.327 208.834 177.872 cv
207.702 177.394 206.812 176.806 206.812 175.517 cv
206.812 174.649 207.48 173.46 209.246 173.46 cv
210.357 173.46 211.189 174.038 211.301 174.116 cv
211.39 174.171 211.478 174.327 211.368 174.495 cv
211.278 174.628 211.179 174.782 211.09 174.915 cv
211.001 175.062 210.857 175.128 210.701 175.028 cv
210.624 174.983 209.845 174.472 209.201 174.472 cv
208.267 174.472 207.945 175.062 207.945 175.472 cv
207.945 176.104 208.434 176.493 209.357 176.87 cv
210.646 177.394 211.746 178.005 211.746 179.358 cv
211.746 180.515 210.711 181.46 209.268 181.46 cv
207.913 181.46 207.056 180.749 206.879 180.583 cv
206.78 180.493 206.702 180.415 206.812 180.226 cv
206.812 180.226 li
cp
f
215.212 173.091 mo
216.208 173.091 217.025 173.905 217.025 174.901 cv
217.025 175.897 216.208 176.708 215.212 176.708 cv
214.216 176.708 213.407 175.897 213.407 174.901 cv
213.407 173.905 214.216 173.091 215.212 173.091 cv
215.212 173.091 li
cp
215.212 176.407 mo
216.047 176.407 216.716 175.731 216.716 174.901 cv
216.716 174.065 216.047 173.397 215.212 173.397 cv
214.382 173.397 213.706 174.065 213.706 174.901 cv
213.706 175.731 214.382 176.407 215.212 176.407 cv
215.212 176.407 li
cp
214.583 174.069 mo
214.583 174.021 214.624 173.976 214.679 173.976 cv
215.394 173.976 li
215.706 173.976 216.012 174.161 216.012 174.538 cv
216.012 174.915 215.747 175.052 215.605 175.089 cv
215.706 175.284 215.806 175.485 215.906 175.683 cv
215.942 175.741 215.891 175.817 215.82 175.817 cv
215.65 175.817 li
215.61 175.817 215.575 175.776 215.559 175.747 cv
215.278 175.118 li
214.905 175.118 li
214.905 175.722 li
214.905 175.772 214.866 175.817 214.809 175.817 cv
214.679 175.817 li
214.624 175.817 214.583 175.772 214.583 175.722 cv
214.583 174.069 li
214.583 174.069 li
cp
215.394 174.825 mo
215.58 174.825 215.695 174.696 215.695 174.538 cv
215.695 174.368 215.58 174.253 215.394 174.253 cv
214.901 174.253 li
214.901 174.825 li
215.394 174.825 li
215.394 174.825 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 16.0.0%%For: (kati) ()%%Title: (TRV_Burst_logo_EMBOSS_AUS_Rev.eps)%%CreationDate: 7/11/14 4:24 PM%%Canvassize: 16383%AI9_DataStream%Gb"+`LI)q?e,KgN*D@(Y#[k(W;X'9.+@(5r`a6HsfT&VmnicrTOYkeO/R$m0Rko7CAl_"AW(b[!1cr>#lntfN`l2-Qhj'q9(0.K8%fadi@(1q3'C.DSX;PN53[RQ.>FN[ZU3P4?U-G89$%)^T:>8tgZn(MQ!&)5?dfBK@qlcjTcV(fNmCS#FolJ>RJI9l7B$3bs[G.Q8*%eZ3V7f4SE:V._k-JFuk;ik%t]_HSJ;mf9dlGHV>6f^!]PRlW&gJn&tPs3p<,?DlPjVWA)fW0GN#8q,*'?Cs):SU"+JJc&))--IJS%Wa;2W>^^[6n7K#*\pA@eQRJ7OI9U^MALsN*-7]*S"mI3o_Z-,&Eo^NU3o+ti>AH.2c#XfWc.7$JIFY$..VatGs4FXkn%)LPG<ON^%L&ikaFS[H#o9,p$BW3<KW48Xc5r*PaBPP2Xr#YT]f=ZT6ME>.TlEsc]YI;'`[JtNZ$:SBqm)`,.m^:q0C0fDMX1L"MoDN:OX033p%nbuS&I).8)?&5,S^e)(biH<79C"@Vrqb#8P)T\<6Q2c)>pkpW&i1T0h:7CWc/!j46.I%,*ECJF+m%Rul7Fe*1aTGPp7?+>IaUeOm%5_@X*1,anu?6$=f(U_6iDju0dh6'cV\O%XG_`l]q4+Vl6raY=@,^6k,K=@>odImIRS5W&Wa/jlV9/:?'jVmA:<HI@g1;'r/A1f\s%b2"i;7RaT'JG`VVqpY4!Kis--kW4)p(4<\GI'0Xt<7g*<Y/=1DLSq`/So/D]g[$N8Jl7m<Ip!POZ7ID8=^,*ddrh@ClTuJUr4q'i%$`.)E9#3I]KMq.%:hkD!hHXEC-gU(pAnqdGDJ`Ml]Y1]VcaU@8406E&]rXAu7eRPQ`902?$h+J!J0t&E;Etmnb+8W&n-NZV,5;;P%Yp\295SJO^?U,3N![cJo$o:]_T0P@5"t7h$FgBk7og:1$$U19.eeZ&?I%]T&O'+-A?@kuH-DR*=T!b,sNR\Lja"bFDlj$,`IIIQ1%fEa74feYNqn/Ft#I5o*F=4k,M++1q45TLenpgbr]#^erfTFX6>.'d!mqN]SA2<#U+QK.nZ0k9T\]agl@^L=l2b$"&(jfDah?A9?<%Mj;("-j.uXbQR4hD+6C0$M;.^P[a5'k[T%XhM"`R"4S&tEG"7b@6MYG@'^g80[:E'D:!;];qP?jFb+&FqOP$SofB.?oc(7X7g*O9%D22"k42]A#B@#6ACH5UeCc8USB77ZOCsa=_J,RpChC6\.C@tXDp6.`8g$H_(n'=4CgRgjCdf!%_?M;D?>(f$FDu75!D8l3X]aQQ@%;cOS/"2>^T<;DTPYp]Nhp&gHcIf/*iV_DnT%-%;!5ISi9p4'Cja'jHZ%bC%:T@Hs8`;e)2f%/L2rbqL/R,-D&&H=]dg"^+fqnLgF%,(:@nLTuJ-2QlCbr/:M#oP)=V@;]pu6%A%p,U5+lHdfGMb&6/Dc#,G>+Re!mp#\-q@ia&%Lrrh<?Ee)%4+0G[MI)5*2"^7c2bd2]%ec8F>n:j,H:(QYRnn>Ykm'V!UkKUm!C:/?L(#OA'DR3&Z]5$lolmMU=^,SWjj5NYB>TjBohkEfD>\hT^U*D-`gFKRbjA#Iurm#t>%_`K5l^&L-GDDlrjok#_)<^=feC@O[%h9&38=>)VUm375lb^6bTj@Pd3P`ORS8K]=*@uGF=I>&Gn<01!#n49:JEqclL<qdN_Nkip=%$oa]mZLJr:5Vm6nf@mp`AauSLX:)Do7fkaW;^dkPO#dd8$]TcCl_+6GG_'O&`#]f.>"Io=)T]g9`kGc^f4u2iEpL#3M5qc]\Yt?J%b;6F&&9GKjlWj>Y.0)@Z\%B%?h)kVbl$Ct0K3R-4ed.I4=N7=ONrLPP/!kUjZZ`lbo28X3%)@.j61!mrENdsdr!mIJ\%kL34MEAU%4A&*;Ef65G('r/`_YSo/I;(-gldI5gD`J8\\Ta$&q3nO74q-Ojd?lR8`DuKtj$/6(!NgG6k9'98/+VdL!W>qRMYk@GhiqRb8fe_5%*6#-SN^HKVo$8_pVPt?7$VNDR;GmqX%=n0s@&7DeV?>`fOp&!SdNCCh'M'\)e5[OE0Xg9!-@F4_="q=)h9d4MGf<Mk"]Y^?>"Q%p%".D`q2M:4Jl4dAU_bgjIUklq=PELr9(Y>ol3hl^P.OHfagR?67WhWb:fZMeRkHl20P"Nf+%h(f_Gc04@NMpLjek;H@W'p\I,n'4I%Z:#M,5e#h,$HMM5Xp[t1>tZUY2;[;";cBs&DXbeB74YZqWo7oC/VQ$O]s!`XhX@ZQW2,2_=n5S#1fi2$*CbQKaWq%oD[_CG0Luid%hH5ci"Dl]sR'bESp'q+d\Y(sqHVI_n3D`dWCohAU*%uhblnFu0b^`*hk?&2463N`e@@t0?lQ\*#0u0[+bM"SW^ec!R\uLB7E")`[%<DmoBMn0fW8q;@<^nbF)eM=?0`9Im>F:ETEY[![l%*T[6jZTcV#";se$r,\:bg9&7isoc(&n[U[&k9Z%3ZCXl7g,u',1&#;"M35>%T.m2(MOEqe)Pt8N8t'MbH/uK:<Ap6b)GUd]d+S:!Wc8*]qZc@R!:&2b)^[auT2.)f.*E4klbpZW.BDJ*QHS,4<G@oDJM)%,"57:>%1B_5XBo'QJCc^`r(aM!p3a(OT_h!hVft=L/bn:<'N5Ql9?-]HdW'oh!)&c!GbJMhm>1VF2BIG3GXfaX>="fu-_cO2(-pCt\;0XT"%Q`WaZFEO*FNb(#>;,U+'&_Ikk8H:XW:7Fik0?7i>64MdXc#atd_LO@L-qrIZ5[q([.bAcnedC$Kd#qDoQq!at(f2#"O>:DXe81C/%J8mXT-6/X:=&Bur2o/L5J5qfZ)Nt`pO/.@!>(euq5S2efb*$IWQnD-':9@1!\;hi%((Q!jeprHQ9XASBei"90EFA2Skh*DbX8i<'%7n2P&ZiQ1RW-*>^#?E_b)CG"bf>Y-.?rc0$hf[SQ+[FIqH632]6T4&)MCB+`-F0K.0_S"eY,\N^%iDWs<5s"WhI[$m(e#Du/jo\Q%i6lai"VK[;P:dst8KcB&+`Jt6AjFPHD<t@*F:B2@Y35og<A^t"fROVXktULs'cZ6O.!-IEB9AsoWQq`ZC_f$7J59(/aFKTB?tY*G%63O0D@\8H_3k68u4$qY7N),S!2A'6-?\qZXA0k7@P\3t[fIan1O=2G.!G#q)=_n-1H++>W"K]3NY%4*.(]ngXotl!H6Pd0!\:HOm%"9bg[\2[Jga0HVd(W@S>kS#Ub':FoEL>sRQ:,BhAFZ>=6A6a&gBinY/=;(%XBZ9iqF@Jgt3'djc>H07d\;H;^Sh(pdQDd?C-57>p%ndqI3gUo#1qsjE;W78'QRa(.B.[-o%]?hmWl0&.Ka:R!?ZdEFX$tq/#D(CpkJVFf#?\lMG*)<UB9P9E=9qo7>21Td*7fb5We?Do'%f+o9_.M`9*X5]@4H1*^Z<VFrf!`[;>61mcjX[Djn.[mg6@Tcni"Fo?8l]NF1.B!!bRqMi6K9OTd$slu@:miR!b<Z7LC19T[k0em4%D*piO=PnHF9_]BT/JD!SXpiOHl"pRe$9:J\?ru84_LaF1h,J&H\jXfNE7u6\j*WIq`i9Nk<K6`)J0!AQ1lMHP"1uQ`"%H[Yih6'E%D+D67(,>NAD;kB+BNGWP>=I[%8focGXpSDFf+%!B+pSb6NX-=%C5slrQ73C?;d=<ZXuR-!@B6i?N\QorWHt3N):6fNa:/^3Lt5O)%1H[Kjeje2?%(!d$"qa(u9W=%;@&_3p9WhS2TW>+5BYiOU!'q2d8S+m"a:PSU.L%))4<8s@C14H99Hc[?6'[5jnVFt7>i#X_k.2\Y%:n=qT"@A*!rU#-LaUg]jYs'iIY@[%>KjI5LDsE9U!)V:O.NR-#$Oo$TQnW2CJe=(ZW)=;%Bcp3X1^-C#-tkLG)q/48(s6kT:)DV,%!**81Nf*Zp!E2F@Om?1'02%ZJYKS8?`.<Rn@g`Qp'aS(#`-K/k;:cLS25mRQaaomr(tc0nS.Mpmi526pc[e-[&;r&`JCVUR@Mu+p%'/97-&Pup:BEab\[9FKp=*]UTi62GA>e(t/@/?Ee"G=N+',_9c!-ML5TS>U;#6^n+r-OKW%37G6'k7Yc)eao7N$SPL_Y7nATQPq0%B^j"TTnQap@;M";X11-?CnWHnYj.ko5j&1NR]ah<Y?61`K<2t%C^[r`D%\s31nM'F[1E@?`<f?s;3RlK&SsTZ^_*6i%gYk)hVcNc%73EqH:lPb5;K5OO*-B9m[;Z<mHZ4XeXu#G\&NC[aA/j%d4Tt(eE=a<.VY%DAf'Hct0VH9aN8\QH!!Q]hY9O6.M+,<0#.H;mODl"P%J75DYJKY_46b'Q1R#6.n[eVItfq=(T_$t?t#FG_TV>\V>4ms=$TOMYW(BXYS6Vo:$Q-3ud8d&_89<^WPeq$%GM25b/>]G-<;9p!Y%UJ1lT)d!+A'(KJAa<R[\7=g1qEOO+k1^`qn8=)A:.+#4>""PV?)h8h_=aV:4&.l'tI#$E\%&aGSc=IJIJ>kLA*K:rAm!T[=M?UYI%!B%.O*3da,:j6p!3"BH^$uDW$_bgl,QaKONaL`=OHJ#a#dLZG(#[EUOYd?De2/j7PR'R4"@nC-P(]o8+$*e7/]I:?2aiIX4UB"D`%MD>X:"FHb_ZB"B0KpEpe9p@&JL_u5nh!ph4nNLC0_BYnF]IlQ=TO[Lm&LkV'D1L-_"Tlj^P7+nE*X<>d'W$T.0G')8lSrBsk"8W=%8t^*Q^;A6K$P4Tk[B1=nf57HEb((ftG"Ddl?HWp_KVKDc\,h9])B,7'e7ZUJBWh5aP(?n)/pMpack\[$7?'_C,Z5'6QKm`:JZ7nd%0(<^uX;5gibI298!n:!d<AO_/:rT6^2."j5Ct(AA&^GnV[abP",9j?,S?pH(6%P%>(aA''N!(*-<n"?o&;U=*:q>!`hHD*Q'Et<_%pu!#$4W,ps2,,3t'O<7O'+p<TKe:[IqJqt"bbp#PI6cGobG?]K'mgp:E4s_.?4@+g*-@%jgf"_KTh\P6M0KJ<BUG*:AM"]'`rrH7%!Gt?S"*9JH:r2lYoP"d/0GITE.t?ZCZG'ttUdbLkC-&@\(:Whob3gETb\$-9AjG0@p;su&'PJu+X'gNrLNn6l'*SKF_*XoKb$88<%E&^aXN!M6\43%M!M75ak/!l]:]EMb1)ZKVgKanEd\Pf)qTUsD-?OHF28e*dF#ZrBX'cdXij0H6%:cF&@@q-!67n:P=6to$)-j*^h%G>k/C)H`;D"f^GW2XKX<,[_fcKBnb3FjV5rg5H%7:hU)uJI2O[ieD(o7GnFXi/2,\aK3cB8&;'\5&D8m<@HqDbB8F>D+3Z;@+F34%Q4P7Cm9g#I+bcn3j>H2#OP?p6!4qLg'&W.d:nd#K4sRkWbS?+[KUs:L6JlWFV]f)1Ri#V-&4/#10K&57&3YXMF7h3ii(5X_QXFtu%"o?LE(M4op3j)rNjE=7K^p3h%mCJfAhiAVAM;Y4NKiMT&R%_&qcVu_7f:j;tYB7o0>23X5@&>f[H;I,,FqFnPP6-sMCb0s8O>+[h%<VV<#JMK_r:t(**+k/dZ`oY>?:DAKM3](\&&5<_=4QGb1E);@>22-tF?k.8_KWrb#-3R_ZT9.@8((d-nlWXO2)uqRadi3+QOWbh_%QR[;#'EJ3f9PLCiK0!iu&9kt+<3VM&&:',W;L)>2U&mACD!XEVFTuLL%e]l7N4L3$(t3j5BV>lNcj_W8e5Z'Npl!=(]>3C1p58uL%9H@0MeeIh9NQNXM)k+\-46^QNX"2]a&C<A&I@Z4FWU7nkehXM3VK&9Ka44`_?Yj!C*Z-CWA>SVE=I3a&6?'Gje96Nr`b3[Oe*]Y1%HQ3rk)'J;q=<f$BoQ:8&p,</LeSMHi5[^$t,?>1R2h2o"MN!`!F[^7JQ-!b@)JW*k+9L#4&MKKM"Gj.ti*45)W!5;KD@A<(Yg"AN%>=7LoWGJ;`(4la\)qV`7YfQnl\^)IO(3OQJ;e51*VMWu?E.9tRU<f1lB++h-%\S,Zn8ZqdYm4nqB/B\pW.gMR&.gP)C7o!g"@edc%^,?rcLG<^FeeL<aZl+qO?uo.5]XGd,(a-'0\C>Yu6tfsX(s%eH2/i]0Kc6\[M>+!5OfK6kU"*NU`4u[sReXT+QBtAJ,!\#N46SX*%maX%Z3QQ_MX5f-DD.Wch9fp^[QIrAc/RZ!oJb]H<rHemJc>)4n0"t(N3D=rLgo]?VL'[^B9*Nlf#NPNR^IWoXi@D4DV@RNDdIiQl%HWH\qS$=d]"7[!M(\c-5:BS8>#=Nd"g$9FA[5d+>?Vc-AZrKURb[@\7[%JV%>Jk@oh9TLD0PuH*.ejl?+plV=;:j/o*T+>[9Jr3h%SJJWOe.gAk<29iV&p@NbITJKD/Y!]eLrMa$*X1gi[aZ+NZiRThDAi>,ZAO[CMd'2M*T.*U:gl17:/Sd&S;dPh$F63H<_cY7C$I)Y%P$TO$$!*nU=?l4<)8Qn-k,*l,)O51LjHlVGg<+r7MTqlu;hi("S"9iA\6rDZ_+7O;q#H"3(TKY#eTOe>l?m^d)q7mk,Jj,2Z@WPT%kC=eA+JK@nbo6lZ=#[UC#gh'ul.1Mm-X^/g4]LiFdTj%'"Q"J.3B5\K@;0K+fng\9i<CHV@[h<CJ>J0UT'`(GTH8%b\cO1t=;X0k%Mum9KX/Xdn5mB([e`(X:=+#,^:Z5J5R)>Ns2$7In*AsqNF]%V#;(:I]dFk?"o`3ks'7*s9YpR=!q+./K"kod2Cpq;R!8'P3&+!\b%6[^QBi_g(,'D[rM+UiW7Y)%5ZV@3R-(q=7#^D6eYlk[lm#RiZRJZ%8*Gi)BF:2troe;;U]i7K2KL9_<3)M:+g8P([)&I:9.ie7dk%'J$+@OjZ)5JG16$(JpNed&?[=?6S]8#C-XW'5!.q;IM1'*B#;L]p<=K%BniWTn5VH2@nn*QsI[]QKei?PJba3@#3VGL/o,kV@arp%[nI3JMUT0/LmFrkBk[mHMs\poC)W!jTKq>L5rY3qRhjNL5[)"u2%/ZS\P&NK0VW5Hb6j=<(U&B*%)`X38S<"?-Ojl[-'@Vc0VBk^%6=>C4r#\ZOoM<mH*`Sb781=T1]m-]l>(-h\2S8'iDPKRdJ1tlWT<X0J7>MtaDE8:J@knSLb9OA6k".u2!bH6@P\]&'"=6Hh*p$]:%B]pZ"^n9TtCPT%tf?t4]US9fGEfNlm.&Q#8,CA;Z5,#cJ)$(J-H<V6urG&#Tj1EGCVM6k!AKjLG9Z>pTg^F8m)U3FdW&S>;-cmkp%EL".@keU=(X]F=R64jJuV(c>N'D9tsi>$.`?onLO0J!cdUT5ee<'d\KH[-W+1s6Gj#JQtVb$%9Q9gI65oJ<9B*8.2"A-gD01Y(V3%RK3<UBUd\G!)q8sk5)E7J/+ckkplD9X'<H3_CTW(a[F;i=:i2bW8`6WE-Y;FOqG1DFO9<,hB6tl#T1I/GW6HD)CWO;fEm<VS&N''%L/p`/9:bX#*,Jg"W?DCNJ2&n3?lgq\K'skh3G=8_2',K<C9g60/r1gl8B_DE"UNg^JC-eIPc6&l=@K1aBfp!k^5dVn&fdq'gjmtm%lZQ,&;4j[uP(q[5L?M!_\Dtb?Z%sC!.h!H=okDj-1I86^W6?#P)GB6Y\p_\$!09(:@!(TL4?f#3*=_+m=92H1X^GfL!S`S&YZ/&b%H_*lW#./45<(hJ^!3H$[L[@e"i&_R"kTEdD_XZ*.QE8!DPS<0KG$sp[i#XJCPqNNn"chmS"H&*iDi;5V86M\M$O<[B'H7J[L'[F1%WJCuf`t[?`q`e?1#+4HAJcRJlg?",5E#N*%>32DQ'292C6n-CP-BJ:.">TP,+n.i9\GHee#)4f7\<+s]Ne)<Va30MWA'lcJ@!iE@%"skr+A@tU@Hgbp>jfhQU/e/U9):oRGTdo[Y@Y(I12U(+uT>S=(iJC8#H4rBkQY(,#9N)=T!<YN4S')F'+E`&B-ir@'UqqZ/(f4.b%LiZN`i4Hp$i=Z4q%aIGsP(Ku%7a&8B!U'kl%^73Hi:#f+!Q&(,\5?;p#/&lYBo<aokds_EHlp%]IRjG=<SZ`7>J9ZW6XdUZ:=/7!%]-;&j(E<WOMM7^[W!EJfLo-Pp9^iq6je/A"0N8XV_tOMkqr#uA8YGYq%RX`A25F1hOBR6u'##IAciX*l=O>Q;'r_,d[Xms$$Aq^`%r%'$5R6)DHI1)Abg>E/G/SFGb]"&F&+=VqPa^'3XVp\Sbi!_Yj76E>0h?L&QYnrCk4"+ju(oGR,2HXB"$)BP:eIPs*%;GlH8/LqT%+Bh!K9&Vndi1#1s=^38*Op4C*4"fe^#3[3Ij(n/o$3O7Bbe9]9kmWAPc9-KE+YZ<e'6!7Z#Q'Wr]&>CY-4=$gAXQ7a@"oh(BYb,Y%XCE:hodB-HYWiYtj$\Dd8@$-5D?=ng&OUIk=![m1d7)Il0khd2&A(X!6$3mCR[BLREmH'5RN`E(F&ZhUMFe`s:G?9l7I68UGKpXB%i)EWSdCVf-7g+_7,=#!5U#!-uksin9?qo`[#o^uf5m/#H""=D4,=2e5Xq4!JoBq3d(JM-0<\]Uf#$bp,Wdt@n!MhI51'_!_.-S8A%q]_M_DI2hc@G8?p)T8X1+RZjW!WS8_D@qhFV^a3hN%0RD;sst::s;ipKm%"RN>/_&1-]E1V5(96T\sbo=ocDJ/&Sk(!lY!lNMT9e%T#-7JeblmV`A.KnMZLp*nhsXNMq+:Hk$h`:.P!#i"K>,=JJPCm)TBgd']2uEP,dsA6qt_\jq8O+S0?;\%%gCcQoCrMNu@&oL)(W[%4V$%f0X'X1`#qn#DO(#m),TNj"H5ZLo/W?c@e2rP.O#a,W&t'gE@FdaHOj[1O(D=>o+M6Wk&-h6PlOh#39\p5.PcR(0JoK7EqNdN%%$gog(]0Lf0qpR>\sP+(!Bsn>VuhP9gY0*t?s@UU$LB/Sq4D9`4=5WJWjirN?LG42_h6+<+2P(a=Du.DY<:TE6Nr-OFjU%c\J/(I%-4DpdcqU["D)f[rR0<bf&7!-$K[-8H]hQ"]GU*i[Zuh!PL*e9H0Fo?.f9a`!Jr0RGi6pYZJ\2N@US`mj0JEWWJdSBQdHqeO.RXA+%5)Et]%WdWpLf\`G?V4?\T19ApFpe!\OY.7@">4'LohgG/$Ja5q%unrQ>nc-Df1bN_6Yor[6Ldm?S[l]4AIR&):3=I0+*W5+^fI^#%aE:RLC$NpkDMX)^Q#33IYoQ^`2PdVb]L;L"?+tl_;JQLr;\cIGW6Df']=_g7WZoG\UFk*&'/W*MQnG*J^,+D?2R+@gf'<t)IJ,#t%C3m*[Xl'gHr/D:W6nX$TPmLn"EYkO/>EQ-?Dcs`fI'ue&#W*%B>om>4$9_0r#4`B;9[Gc$1^4!@'elg\Ac%d?*)&reo^YNg!'2)Q%g'*#Y`>85q:(T4tPrb1U%@:bTL;.UW^2P6YK.!XtrWWUYC,Sg@Zm8XE\8`6JN.Iou4:,&"nZ!GK6<>L$bBFX+d+5E%.X-sfTZ%Qb%M)AZk\j2o<L]FmiC#FuOj7M=36A@0&<#,VQ&/`8B+^f3["Tj1j#S]YM0'%(1`X$3?h#p9e$Gg"-MDXUX+j`VT\g"XISDG[tMjPLr%'o2*M'B-:#fXb(:I\8Yo"lasO6>F?/JEoI6%>pc'U9`F14UsApk-ZB7!#/B,McFp_!Ws?q`=WB`)T%Y[jAIJb^f(**%;7dSLXFLW%p%op(L(MW[41p+F$&:cX!]q5l1gHMD;DErgcN;b<`M$`@YqEoi<$pE]d'ddr[A%%,3-:F>7P3$OG4a_hEta/nGut0pg1L[VmbsV.%4+@Z0oFh_Q/R_'UX<UYs^B%XSn_,Jafdj)D@H)9u$u"lRn3mb=!i^!rJF`JDc2dVrjpb/+eh(]@+l?-2O`7>s\LK4)G@96<n-gR(%fIE#>lWSjNDhtbC9LK(rc*]9YahgV[MF.ec"quS?.TdQbduXX&<uOV\;MC<dJh?Cr"i>LFTI!J=+b`6?3RAiM5IVBuXnZL]l=VJI%,4\h.drccC"W8uLl!EOU>Su"fQ?[^0A9O@hJQ]?="l^[OC.[L="-i7"E-5TmJ6?fNKef0pl+=O2J5i];;]l:mX8](&OJusSlC_SL%4Qi&LN%7SI>GCr@\-&Z419htlSEE0MYfimJ*&PH@#SiJkC\t*T$;9qlkN<qsr(I)jUf7Cl_*6@*"&Dq4jBe*_=<dlA&M/qacs_g%%.odjfdXi6TBWa?O[+oAsYW,U*fRo)\MjX\Va<ShAOa+^fZ*9Y#=8:W'4Z!896PON`J?=\[.RaJt;_VsrMF_Ob+F![V'#bDAJse*_%"_?i-.BbF<`#aL>AhY]Nrr^*+K&\!!kTE$'@XDr^`AZZBJKbeCH6`h,EMHp=`mA4(*6gaZbR^4oUN(PFQ6Oa.#ZqbP@Oa06Qg!*`%ka58X/!cdE6h`!Sh\s/J9LlSu<0?iig7WibcEZn]+TF\Qc6Lp93D6klMACNnWC-.53$NZDOVVmWOH.!9@&g62nqr,r$.ls$FNT)X%8KA=nn,m5%CoM+1>N2G(c-a%PW:M!nrYDTAVWeX!+sNe5M-_FZ'H&,X6Cmt&7;t##)?<J?N)BLI<gR6)@.'<jpi$*r/c]&l9W7_0%)LfE3+WO??%7e75E>Pb<#R*bf,KpF,)4>Hq#e"_7"rfjYIXHgg"3b0q5f8rk>nK0lI<bL2KiXisW+Y[iK5D4GCR_g[A"+;r6o13r%pdUBX+V:J/J44Q0k$ZS"*SeBG34JkkXG`C<;9%WoY[scPLaYg`",Lo&h<$&_"Vr_F8VgV6[P<Kj%(M..M)/HHRe7G#5;iqu>VVn<%NkdN(<G\&)@#TYKi/Xehgs\\+,Mb(CMr3F6'JUIfe\bh#4U-Wh7&n:N"iF>6hC-`+Cto.oKZ3C0!m$X=OKbT(Oc15"^fEk-MMVp;%.SHdLNCB&gcglhk.C&7^DAAde1j9Kob`p.RF0Ond<!lG]0MTnY>(Lu*p>V5$Z(ofR9cWMr1EGa!cPCIg`hb/F#4Q-LnAk`,\1RYY%=GGDDNFf]]aH9YTqOHLY@iN2oH#q1p?6*%iY7^,YZQgSo@1U0aHLC"+]m(efpH*Q(he&W%3nJ;3o)VjF4Z\&,]iD*H1kfN2[CB+:%rj]`;VHNTMlUIuXkOOtoJ'oB#.F.m=?#Pfp9;G_Xg0(WFFlnU?L#pj.],W7s\ZF>^D6Eud[GpapU[(-sO7")L$$!4(V^fjUHu\sf%UK/Pr@tM10&MEpl>jnr'QX9(=ZC>/=c9I!!Ub,\rEL^b>VcN1k8s@1dh`+'qo_^46bJ.O]`uf"VrnIPq9mW=Ni8tbWZHh_2Vg!GX%',Z&Y`^sIl4^G2!0$C/m/<.%e.@EI8PZa5an[PgFDQeK>X*]h`-ef$q<QQE(H>\$h'&--HT!NIXgM2)MHDD58(MDg2)lF7e9pWZ)%fBLiI`>]T-ELJ^eJf;>gK1`WNgQUeX_,kNEYX\5o>O,<F`3E*FLR*\<QfJG]]d(FG&dV?5#`7_n!?pBl"PH@mMc3+(L5-"/'UKc+%B$4tV]?ReVW;&%$pnTuhp=^7"S"60(/`JOs+t2[oA'Xd_N=:OS,"B2`<C7:;n'Iic1De<nBE6T#1@&9'nBQqfVUjT`dPSB*`flF^%[5W!ST(-0rp<ME(U'0**1i&XDB(&;1nPaK^6JAQ0HdXEaC@4g@]rAP$2>=!1hUL?@VNGj'c+P)R9np3fUtlc<0+TAhD=S9#B[-GA%eW2B,e`K*rmCb/"19"E$<s5D-:>P/82n\%U1,LD7dM[Gs`ecdXpG,^Q&K!gCU_@R2H_!p6gfS&C:5UYU4l<:1%).$,*'V^()L!OT%4?r:Zh6i_S/RplujJ?hgcRgdH"$0Bp[,@bq#.USD="h&7RuL1PglS.5r@d$Ec:_In2ud_P)r:QoqCbTHh@R%ZG96B3\ps;GSTGEA%Vq4*c=1mQc\M!?P&&35H`7;]NL4J;VZefN%r,]tB,*M6WT0.e4dZ\42/=DA>c%X0mGZL(L[#DKi]VOY_jaY^cr9kDDOMb\4dG<hX%ZJ4k=HH08-mW"7@62Jsage>d<:<-X%(s(*gHT,BGa(Wm@,'c(<`e>:pgU6J2[F^]$J=@g]E$oiHF*"p4B++B9pTRoGZ:$(d'U!W%%>j9\T5gc'^<K\[SKB+-ul<'+'r0k1-N?of6+rUC#+<eb#bKe57Q1OmbF%`?6)T[?1IGmIf:66*Q<rh'qZ1rYTR"c"Y.]r,JaH1`2%6AA0JK#ZU1R:Egf\'+BXPpEZlCt@4lT(bJ6XbaS+)-*fhbOV,WPNTlo;__Y-KM7?(?]mSZTO"_OHLgD+Mi[<D;/RR<fd*!.hbck4%mFGjThRrV>6)Mc[ASZLERGGD)[l_[TjAU)rb\S7g@GI3^Zm0iof)3tRMc1YNZ'gia5&h1DG;j/A=ti]`c@1e]1[Z5d?A4dY%P8]'%4$@q`T>8P$"(OD1-Uf:Tj=(G:dbaBabAsB:eW7DT=34rIpV1t5F6uME1La0)qd5l9WLI9)@ira6Q4_+nGqrHiTME3PQ<QsgOWU5f%O[C(q:9.^(Gh68s]3fGMO>+6u'3*C!PETApjd9?6cBP/r+d9daPTp*.m/*f;^<0>K^WA"a=F?(JE`./=3oh@M,Q!iBI[=Oa`gf-3%kEA^$JL/`^L.Pg%neD$+"u%[1mlX[!d!;a"cP-=X+6QXKhJQZC'13/b63^-$.nbYL'C2?thlOsNK`2A>la?(;jn7BjD.l``\k^'6%%p+b4]DPgrRh*94s&8nA9bZLBh/YRn[qFf@S?B:j%7447b117/>Pg"eQM_P:_,9'NVlN_[?2(X7LOt`o?Fb>F+[$R@=ZJ:S%HuZN%UnUNJI=^q*lJKt>b77\MX]mPPb)P+tq::R\S^_`EmS#<.jmE;i3-QYc7Xf/#`VVA!L)CYKn(ka_0ZW/jG8>ViU1*-/4.M&C`&S]R%1E8l52GT-+RYJ_uNla*tAh'bY)J^2eE1"e=$\sj&M^BYg7Xfk771N&0@:D^eQL(@dZYS?ao%ah3;?&0*0_/^6.6MN(_dRSE_jGM#%3unf0\T?^`ne=e*!uTSfcf@Lcj;>eIbi>#/E"YqUbRmr8*JM6d$@hL]OU2kX^Xn!?WdO@JD-Ym[h4SESSEBDqgp)CY]6eGCSNKhW%hGlT"JNpW_:%Om=1Z`<7*6jpmZmeM7&<8)#=/R&*^W=e\gB@$'<ma%nJgipR&:QOfd&-^lPFqfO'soDSRj<G@e^(,j/;9]"2g%me%m9/=$[O+`H8G6+4@h3LhCh/ikrEikhd_nqJc$t,oQqGbjNq6`P*p!\#$G:B=9%JLX,,E-1^L$lC?N,#70C/.gEPAl*h97q,@)C38%.B60#V5TjD;^mlZ:WRbNq[%OE]PA+JSJI_",>6Q4SHUf46=kIr$8cFBKZ`32P4IpSr6J3%e?_VnJBA=b=_h!Mo3.n9^TgHJVcW;(%j;>\J)e4@_bdck5GOWnsRl-"?3YjZp:$RoTWLnsCs&uN'NO.l]\?D-4JrMd7)fUjSluU7;f<&Y?W!<R@%$!1HrcUps@3''P+GN^1%f=I=#?<;TY9bLqQACaHZK?1%>9bMf_F/SM!'6KKO)\jJ"MVc#'9:CqNP(SFd@m)%,$g6e5erBT`AF.#8#r*c4L/-#0a$>#jRK/_Q%!RpGsl#q*3[/]E7Ek_,PVq]='^7@r!-u:;Ib*-)2F],Z0n*Y<Bdk0YF(@lPTH+J\lh*R]N+m1_$-c+b$hEKHR(@m-h:o@O=A&AfE%dUm:&G(/;3^Wg:e<m)Sg?>off93&ZKES2YaQRZqSWAJbFf>cF!cUW8ofcX<`6[nt0hA]f7fi1&YF]s(SSX]@Z8;lD4qj^brq.L/N%2"#bQ%c>lbpRH,[\N[Q;HX>_=&Vf-U@^so?RSSCaRWYh2V!V0S1u%-3Kf%=YDqrh]2tb0b]lA8J)g@W$`Qb/1:L.urggo]5b<%>B%oM2#[-\(4J?3T2qGt-a`'3>*>mCLoo\6L_tPd((fq0P#7e;W/brc)-S0cS=jg#G22Ju63Y4dhk,=!<a0S_N#iJ+4:"AR6iFs(r@m%@/qeU(WY:"46A.`m*;*ACUeA$42W^k#CM=dl\:l)D/R[<_n@nNDo8,*e9s.GgGGgWS*&4=1\KKrrAIThc.$Yfp"N1=2Il!\\IF:5%f7K%&_$P8.:$)cS6J]oX1C!>WN4W<V:1hW*Up'$Kps\jDNH&G<GOj1:]E)2GcPl)VmU<Yl[1+g85%s`o%`\G5%/D+q`r,03q%9$d%SM?D#s)$GWQRe-/fGqt/Qk[q.4a1XGA`r^@WN#6S"PGdqg\\O,hXo$k4:Sfsas[55WW1Pc9ZNL]C@e(tp*DqIn8n]q;mrR$$]LGD%GsX=XV(^E$B!B`lN5iVB5.AP&#rKuS4'i_8;VS87@W.H>?HQ'U5P!:kcRgdL"$0um%0L#-l$4'sJT2QmS(VSHJ,u(,An,JBWOai8%4!cPnm+A;Q[)Cr_muK9cC&4`.bn7D(9A_]t9<'F8Oh<Ss)p2P09&p_G5I[<nrYM+Ds66;Un"<UsRQ<=':5p24&ngLZ(dB?dpRN5n%dr+I#(d"uaF_Zj[-_EFWVG<+jF_^ip9XAUs8"esL1sF8"j\!!eJ((L@#QM,s--$j<]'4I@P4V$eBB>/_eb4Ib]LG=rLP`ZdiriE^%?DQ"D;^1THR1u2prb/H(n+qR9^Y_%H9aSOSj-2Eia5'q.P2Z*DqECSE8ZeS:^sG/Q4<(2R<):kL7lfYHH+S>R:C\t($R,@jp&q.R%oNa<0VS!\m]EM31LDR45Ql]QZ.(daAMsf$H76,J`l-VpT]OZ&C0)@(nUQ]$]XB-d5Bp/CMGOt0d*")J.)n%\HjN9(MH1U*P9jOmk%?@k6U5F-r!abV%&Ve<Z;a5lKP`f?&)#)07IS7\RmhsG9<DGWR06^ne4*T*]DEP$#CIHcQTWH5hH^kd(3QB^"#\^qf;F"\&ZQl:?N%K5YMo`D)>k_)F7HV?UBIa-^+a:YIY8M[&(pND#I!-"(KX77\BtK,pg)hpgYT>'s8,Deef:/O!niR<R$;b<aTf=F<d,?*X4r:boHT%`lIBActl`9g1>PTIhthn4*e#e[-98--"8uQ]j.HK9ZS5u'7/ZWoGGn/A8$2e`/DBSN9@;OeQlZs_k5h+dfI^=Y#h3Z7?WS-gf*O9%2]M$Ms(9kjYFO.dQ)c9$#&:ThQ!3q.8e/%QVu*AE^C.kNhqDPn!\u-:/_s-^BYMH-B,-*i^DZA*.mG&#=QTBdjmEf?c5mdNGF'k9%S6*p0b)6#X1.Q(kS_rqN,f0$R`'n%FH)JEa9uI6]^"MUkb?=R%"q@BlHfIaCRq]p.EXk5coZiG[-65\-l*\j\'e^YGiKqQTXk_l6%>:f#KLV,\D,F>;gnA`_V9O2rGQiC.!mcE)A']j8'.*BtVo;nY#U18&i./Vl]>M6It2*fk\)8[G]R1lC`8W+_(FuZsum=4XA,0'4P%\bU0Eg$f3=dXQ9%nfPjub^[b-<-]Q1jo&fA^T"q(eX-9$^,/iV7c/r1cJ9jE?b2`=!<\/4ERu=N-;8a`a(`u)b*bYaH+@5H?=%t=%c?5a)k&;]#,kJV:`h#';CYcmK/^%Uo4EF(t@D9lDXXHFC'HLOns&DP1+<g#PO,3_&\[mbH,>Uj"-r,j8@k'R<Z?'EV4RQ["+@BQe%3cF7XOLl\tjVd`YMba'[R>T8r'V1HJLS!AN30(Ss?e6&??nD:`""%\*gsr0Umel%MGOX&VPMG=D:Q0`b]eaSQaO4q0pZjS#-%3GE%,V\ri9Ocf1hDTYeP9#oDJR#CWnGhL^$&C.coU@tp^uDh:kgc0iI9_;d_D1JO??)m(.CmiR]j"Z3'7.U;d[`DYj$qf_2b_]:SPOH8%Ou@l4+80\IN*tY*a1.U)I(;,c]?:T%J'S`#)h>5XRlJ$+P4qp&?sL^"*NATGd8-L>*?6j!m)DV$9,"=Ah`7)-PO7D@fA<O8s1W,Z%EqY^/jYQ]eScjhG<g;G\TX;J[k6;=-F*gDsobs*j$0!:UDO-RSU/Lo-bd6^$4M/RXVZ'ZLg"L:sQr%8t1B1/(j[SE<iYIC@RI>@K%+#8YP2X]knJ@SdGi!j+jNJUt)onW%!TojDsp%fMaagcH7@$>^OX-ojd[o@XUl^qcjG?*aHZV_Ih5QSq/aQ]1+j,fq,B<WpAn="Pu%CBP^nhR"[@K0;9pF+)W@(Zrg&2ZK0u.)f3Wn)HWd*rSk`*Yaj%A#kK&'U=i\l%\WQ8<'[%+2@@9&,G6#q=9`"r[Ac)rSj/^9!J_j%NXAEkaYn7k.]OfD0jLc(m=XbgAXSEQgad&AaWZ^:-&Q.l\j\lYe<41_LESPW_ft-K!Dp-DH\M(.lm\@Sh9b_`4e5f/<kqL=:tF2u%/!\ua;6qc8NjGWo3)0kM$>sj$^A.4ckZ]TMV7=1hCt=McA,u6hZG=+rA$Z2NluoR5AIEAKeDufB;!<^o<N"TK<M/c+21)@r(PJ!F%g0MH!D'?@1T0$l=#FRO]HZE6WOj=,UGnHH-e`N9$>\j'pQc8oDUO;%.M[/W!RFUQJMX9;J\R)IF0_L$a4<`Of>VqA@DQ1-G06`b.%;:;?I%79A,.5tU=.a7^Bf.Y>79!_c0ShHC39*o=+G)hsHKOtn/r-$CRk`\U;K8&=5s7q.'e]M9\"e(7\2%O#kjl3lVE1/706])\>%jWa[/97=?A50/4"/J,GrJ'h,$i4hRGbFT7pNo:9>:1<s@U\R]<r^#,bgbCt4R4QiHV#=7fOVRWF_ro3BrTQ2>ilXBV][eL:!aD2h%6G&S0&^&AUf/bdp/-00DL?!0^Eg6aE>.IS4"CH(+Y<;XT2>Wtpd,lu6L(t1bHF%tZ<LRGq<T,)O`d=AGaJW#abc#6<C4XKp@\Gat%^k3he<(gauEVZiom`&)3hJ?/<[B9p85qKp7;5>5Z>rgb:lV54$hfZTVhd5?9at@R^.f:n_.,aGf&WHZ/Y(f#Ci0<SG[_OiUbuPFC%JXT9p*#)rF9''67//blU8SO5=T",E8jc`k,]7X)LTN8VS%dHBG::ijCg(G"/b=>m,Pkj^SWSXbAC_L5rpB89*"X2E:q[+HHa`%g2%c5Bk4P!+?`ZJ#4ar+M<Odr:.%TfJE6IQ9geK5L^>%5U>A8j,T&=hR[,(p*M9d32bqH]@<HVWop*Q@%HbeG8P\dSs?*r7A"ATFLMo%^QULuPJ7ZBR93SK!c7\BG29/+[N&R-7g0;-IP%[(WdJc!nlh\@<+lglj,8ji\T:lUHUN:VNAs%qR,Pfj01!;;)iW"]:*Brr***-J%b^H-3/c%^IJ89,W$3EjIV/U=9-t/YV@/[QbJ']AcPP.75EM;%DlC3ui2k*6A0oPA1F;W$e_?@>!ntG@J9<,&e]u4=Jdc$YY)si/=%_K_.66?';c2!u:b>&k`I71%ZsJEHlbYnBoHfu)lCGiL`O7#gpZh2QHa$sG^k9bm<^Lr(2eo(sLUg<*ChB@cY27kk)C#tD%8@)SJ@%`(kX2ka_W)[l[@uN)sHJP-P)VA/MkO-(WCi'A>O-Ag>Em&F>d1ZZ>/=>tm^kJL)+NQ`dYu"0SY(-"nNej4N\3TgWG?(G%_Di?,?Q%dbHmiVc*0=^q,l#pmIm<8IKt.\+ERRU:37[J\4UYdqrFK/gpOCo5LO)#5&@7*a)sXe+'WFMrW"]m[J%8?!*qoo7+b^)W1*@kgXC5%8a"(0geK'aXP"nYCsP33*jf]!F9<q4Pl'@K?&l!h<_9PJ%IO'==t`$q"/T]^YiIdjj]GZ-rDTcFZcY)GiWX7e.TJ&\Nh&14=dcIp%r`^a>/*WA#AeFW)L6t28+oEe@@p?uhi+9TEktbj>D)^G-l^"S>)&fq(mZ?hG?fg,LRHYD6]GN#[6?DDDX7):b)pJ_(T@_rUkg65I%ZVHb?CKAT#0Y`3NK*>"8;1`!),Ghn\.bn`bfW6sA5k<^(f7rl8@2!7b?)sP<H1`rj!B9MVhj5:ic6XWtQ=jm0Dq<=`X.+\I=SQ=<%h!in.H@>DBY364H%n#n,e:h),f=HHl]B([6;b&,Ah0'6-^?1Vk/(er/i#$_NXAMh6`*q=%L[*%@M!I=\2<?k1"FRr_ld`[,;[IUd%<U\gTYL75do=_J1CNhP6Ti31]R$(bhj:!uW!mQ7*/)K_6>2**>L)*V(NN=%S(Jp"PFkG_mGjSt@m<-)8Dm.gkmBp0Vjm8eX:oW&M%`C^e[^jh8Zmt.bQre;GL2@.%E/p@TY=Sb`qfk_JNb(RP;Eih"l?FA@r/fo;/B"c65j3]P*Jkms*k:/3iH7c]QcHmX7"l5pAlr!`K%T@I5V\F4PmMat,`[Js)oH_<:jL9?3d39YKh]l(hO@af&'hBXouH*(Dd,G*m_>AlH)X)5&a[Z^M^S-\.t'Z2QOO2s![Q9r*5NEW5[%0E9_gqcopi=52Q;B";2!`WT!?3XM:*\9c)Y)$f/@r-A[Y4_YtB3n[JbfK[edqGb@E^h^5/WKF0fgVLmMa8_WXBo+,;Jn.V691gWM%;KK7W]@Et6EK7[ZMh9GMT(;F%Cs,R`m+ZC'CIe_]2'Hlie'uXLU.=ESok.cN\V!qn6J)_tCRD)4\&oG([;f(<Z:Y38L_b.Hg[W#?%rBn/Yh5jQFE\ab,(<.'J2;'YAeQ9j5:8TYaB-oR.G"Y[2Um-R.#o5Bla#;B,875Jobog3@T,F%c-"[?5(Rc51V5[%G"i:=X2'(:G%;i6;WECrNRL/LB'fZjngpdkjP9d^YZSRS/B(L?+IBa'Q5s$Mu0\X>NR_T/.*SUft-,nTJL]EL[hXFND`2nHD+\R$e!8BPPJ>H]os%@YY0&FS_->(%-DJiq*r5e4"'V]^BX?%-gE(chm+[j4/?ZGQh:4C,JoXFh)Q.Bm6K*lpaU03`)hd7o`d$Oq<$m/>H?d$e9]K\%(/X%2MKY>ksVq8Ak2BkdB$RbRYr!LB!7J'Zps+/;8nE*&5l>WbI/UKh.!G?,$ij#?2*W8O@h+OJR(f]BpIFlX<spQ<[FUBkDMZ(Y)L4r%>WbQueI9\o/5t%hbA]aY(;0u)e#]il>^etA'2qd<1a',<TE1Hl70?L^GB?[pV<iN=n[mR:%eaC?r!lT/4<ZMl\65qVb=o/NF8\)S%DQhj*k`mg6iaK0IPN)sCBb?sMRIehqQ&#pKC.0m>\(g"Z%4WecWa$uH;Zk]GHa"iR$:8*oPXJjcf;'0@&!(d5`SQcV.kk.h5&1b2%U#*78Nm#2NIA0fnLpi>$<%!E7oQMF<ca*"P>-9`clCDglij7bp]_T1!X!.[@'Rc0o!;qB4E+A5+Ug:S:KpK2imc9O),r.UiGJ*R*%<Mh5]M'.A*N)&o89<V4ZP^`dZ/2rHuom2[Re;u\<?E98+3rik)D?RZ2/>_@<%RirQ_oVg6HUXZ/2i:#l-h[j/TiEmj(D'DF$WXQ9%,aF3f)]g/cYX3r9iY?67-sSA;/KG[7\^d_3.a4dRoI?3S]\US^f;W%4Ho.q5#+6Prd^nSO?[]%Tlntpg8?11Cha_ukKAIlP/+$N@%Ihp"G4iC-ZKaW5&I-*D*&Q\qJ3s5.1].cCWE37phjWL&lEFmbeU^*:sSDE6.1gFT(K?bZFp;g;PdYKt1ghO<<hTTjhCB7R0fgq1:%Mngg`DX0m#Q!-DC%7FE=<!a@3X^5M<OA&Z=!-;M!b:4'fQSJSu(o_kH#DC=HoGOr#-8sUeIU.m.LLPTO7c%oJ7tie/7'an&Vsg,e%@>)dVVO8l5^_n8DZZ`Oo=Ke;RIg<XrP4(m9\WQIFIZp^$QgNqCLMN'ck4a^p=tRCWdU]=lj$k56p]><oMCRoR<n=<j'(^+8;AS#d%TJ7+FnDpm!IF]gul?nHP)2sP/h4P+<fqR,Z:O<I=48,LMC;MXckVdZAghWnERb86"!DQ[.p.&.pF=p^1Cl+R,>@]W(H1Fb;IH@fl%J-$F6;ptU[:qNIj9/uh^`^A%tRD.Z*r=uFp?[iBJT's([k_/a([$OYCq@Klj<@*XAj5(YQf5,PiTQ^WT?pLec$q6=&/c2,X;l<4,%_fc\-XPH@"#Wh7t,'qt8m.H9kc>'334=bXMb(%'I-bDFb@2cnKY>V)QeE2QJausYA.s'.M+MR6dABB&KZ@ok1lHn@h&f&!$?Lumg%@*/'o&!m5O@+/Q]ZI.dO/>nYa`OF1>jn:9(\1haEd!Z;4G2O>J-t/Uh/m0j:QsF"8KqYCshDk<Pj\^2Q4HS@J8XmF#,8$Hg`24e+%=mrF"'f,.(fd!o"4hJ<<EBj*kRN(@eLT.JuAb2Ob=uC_0.^0p^I01p&:gqs!\Al<s\-bDeTl^Lp,o#5t8=XfTEK3?u-X-.mF11*S%f4(].M;Wm"/NR'gM94lRC`(d`L/D?:C_14Q&p%hZG7t\9kU2*^Y+o+Pbao.XMsi,r7]rpS^?"*L\(GBj]<1!1W;,OjaLJZfQIjIF%=c&k'fB_P&T>r%9^)%oC]%jed=ggW/l(pFB[FQ5[OVGDCMR>U/G@$JFD5W[&lV[#aBCL0pO(8JDH6QUVd*]%cB4.GEkG!Qsc>)2$%18sL^VAW!+)hD#El./M_e^\+eY#JK<CV5$^<_Uqc>1IEZ\DE<b<3%L.S41AS2rZm,eS=\bagFJR?9;4L<@pu5KQ;W_7b^Wg'o_6R%SYT.@Y^&i`@Cp'8m%W'K\jh"f[U6^b-FT)&4UW\2F(DEcG#^,cr@)WkM%kk.cmjpL&S/NP'icHkQ<YijBdp!LJ\Ac3A<C>LK2,(e%m@/3H;5G>`R-gMJIWi`K(Xk(dJlG1$-s,gj[NNhu6Gq2HFhM(4opB'[6Ht9<m,+Yd![WQ53MYi6a^s5W;R6gZ(P//O.X4_L0]l+,%]7SF./KOqU2A9c+(T#W\a34AjR&KPOk]sjt/$n%"F;d6+<^"\[@q@-LBOG#N9K1mI9W!l0;SCl.mK[&NV<tCCl`61=%tmO7\koDZ%C"f!HQ54+<g0YUNmuRk5KbFI7>nXLm@ITqHKfN"X_p?-aSPb+YjfOIcTEj##o00E]4-6J5<@QSoBBaa`4p?TA#)%n&iGO1AXKhj5%'C2BdV6=<s+l!K__VJ2S<4Ha+h;NG3ka&7AFG@iY[+a]f7N/ag@\)?nY/`MoE2u>3r>jNCN@T!L"2-Cr8Ai%fqdFmZKdsfP2kq?)%2N;f`FgXQlfVpK&;Qb(D-MhkRV[NoX>qkF\?H9NP@^1V[`B"8'D3[F?J9W.=.FjHYc10(Y;Xu#818,\SJa#?^^DuhgVO+C9;HO,P%ctl][Qj#(g8Jt'&T\:@7P=/_Qf,]YVeB)>$[+'B);+VXQ<efAt2utf04aj6`BOFA.]_tDpAa0)Wl[TI%pTAUC.Xpm4LuhG!_J8W,%h!p/P_lr[Nh_B\b&N$V55`^h%$qV>@R;._G8OW)&5@!=H:RVpX(Mn7Jd;Y#OBL9ACfC:bf'tT_^00+VrJHR2-((]0?X8#:AR$Zbn%8k_J1jKS?]=$Q?2k?]I/p>cMBM432uE@^!h2#npaDZcLcpoH_DRR%4Hn>jUq]=X*6iPAb!X:*A!+83R0pLh[lo"tCS_McU?%c9,'%l.ZqY4ErBjd0EJ>(FS%HNH9=@C?PTDZgu,Ho'*]0W\$=pZ7]ePopo_O9?WBV$F;Mrc``qcbeNu?c7E;QaJ0j?V4!%ob43^8rl:"d%-"UF^QCiSoUXbhilgo%SNn2l2NSCru?6&lfY-0js@steg5<iHMZ.63GkXsBTWpH7%l\4#8qt[S)e]$+/="dpmS`e;Ddgr:Wk%E`Q%B)Cn,A`NC5Vj"5qX3W9\j&N_-CXF6:?!(H[Hpm8SZ]`C@"I8UBpAsN`^-[1;G5FkoKN,7eX"541N"!I4*G;GM?MiTlHDjdbWjLmj%+)UnEdWnH(42$@2gG9?hiH/<_Y"HkXBA7BS4o%\KgocjM5Ac'(rS%7Zs7L5VV;(]fF(P)m.CR[n&)QXfAg>k&Q!1TIgU$F85+S*W%GLY;hI&2V`=6#m\o%:.Q0^DfpH*k)rPYe?)3EL\%Bf!J$A,bf2;sbd#dX,3UNPb&\GHL^J*3IB7g?Y(3Q!3o(1tqQI&h<kP?.h8g%F6lt#BF.YM4nJ<>qWd\u[aOO`m3Jr`[Em/pIaC^/>WgaLO6Hm)PJ?g_mm4AQrM)FJ8cM[ik=ML>ZYq>\.;QTE_afb3Q($k.C!3^0%T?41ge+U8o`^rLn0?]Zpog"M=o_XOg7nK!6'P8HNF&0Nie,"1K>Nc!^G8+EKg\(C*^E-YK`DsM=UqZETYEXu=GUbk*nbM94I&4i\%:Wf!(]SWc_hU[DZi94?+Lo[m:X)*4][Zs+YFas+bZ+ll0Bj'+qr:)tbdVWRgOZ-p&U6QL+UE/.'^\EC^qIsXrd_RTn(sdI$DLT:Q%$<?ruWNp.iWDMj>8>V$ncFk7%BcWJ*1fCI3MU(+m0;$DoQ!3qLX6S:1Ue3S1rQ!f#=t.\##d(_R<aPcA^H%1Ro_?NQ4gEGehQa6%%<=58Rpp-\8T?c>PUU>13ooAe/bNJ]3fLk$cC0W#bH@5P^`u2"d0\]ChQYkj_ldjP[9)%u2G?Z_m5)ZVOp$,jgV1^3`[I6o#mr]:)%pre6ZiPk,Bpe(:QDk;E-qs@U(V;DccG%mcq?i"L8q8o^U,uj`k;8.2<9C\:]q:W>CE#h)>.B/#%Hb-i=8F5:.m.%qd6D^=2.@[a2%=0\#ODjKh9]_o3+p_]uRj]?QOoM4dP?KmkA+'CGlTD-KhBr0OYkAr^n9)"PlO&oAUdRCoK;@?Gsd/Nrs9`J6W>%so1n/8F:qdL^8%l-.cMQ[)Wrg*_#%bQo$>STiCm81gXk;En7:?)"]h9%U\'XDm?o`@?;0^0Z[N_Sqi2L.N<^_92Ui=t.t<X*r?4Qd6RHW=l2;h-TcC%3.G;[6n7Sk5?G@jH*QqK'^=J$:%-+oJa3hQq:#a1C?OEjn'.-9Vk;hGfC+op?7J$$ApaO+50cr+n&E7u\&fIL>Zf$irUfHt;p/$6%:\`DaQ.*2lXiBJ9O)`J`;`ri@q3q*.d2jD.8:Gkfrr,I\=T@tmmG[5#imYSp`X=Bol.NoK'E;dBa/o.CpF9f;$#_me%sOVZl`d;M%O++X%GMb"%:cU[?n#c6TfXnIka,RUlN6?&h>dY6;I[E9&Sk4D-F^sMNp/oQ1+1'kl#Dl6+Fq7e=M,1>3CMRkeVgU^OIC8bGHd^ZE%8T15gM,.Jm`q,854Z6MYS/q&E^&;p4iU5=<M,-'3pWpLjVm!HDpXJ7F>Fj._bc`9S20Y;0B9/2;Q+89)V[Fkj4"pBXp!V=QWn]W1%Z2JptIr9@e`M9X@[]WROI9Gb2kJqBZT!l-h\ohaCf!Ero]OB\aHq`ii!"3jrB'GTXM---0:Z.uNYcX>4NMCXkpd"4*@D+B:_<WTn%XWckChpWW04'^eCSCfhFII-cXr=O>FeMUVO@-Iep`:CXkGXUoNO$1?`ml_rhSNdk^h-[<J4.@VQl/$$apS5)0@^k`OKiu/oC?[!C%C>B+Vk=^3!`i%.>PnG82;iU!N6!C7aP?98i]Ll(ueR55n0sQiCeN.X"NWYPI+$R@+=%]lM;5kW$?I8ZTV;(Z>V=U=XobsnieA9J<%`(I$&T26uA#Dr0Sh63'i&u,&'@\olQ4%=7eT`$6=>*oKls"^1sV_b0V9(sAQ<_@KA^J\22TkZlk3!kSEk@4,V)]sn3p!;0(R<%23%f8\_B:FKr5s7Lg3j$@9;o9.E]c7RTQc!OO4\*R>15N],BGE)_7Rcdng2J4WQO'b@Wr,V3(b+eq+]JWbRiPmqJ,\HL0Dp:L`$&ip>%`H-7d_,&dBkO/&1%DoWtRo$HZZR0#Wo?CG;Z+/]P'i5V^.hK9<Bb)BT=c4#PGb58r>?ei62J0qK;,Ccb5-k>gGQV^6%[-_LeI1eD%,#*N18,s/dU$Y"_hI1^lB?(#[%NgEe:jCbdK9]O#ln&*c$2G`\-,hb,b2&%6.bLQGhBOdupD:5-09gu//`I89>u%ok\),j)XA4N]%hKWYVa3aQo-BZ$ZXA:#<8/so8^Z0[oj*+kWpR':33!qrsI@&Abo&J>to93;mP+@ki9RXSIF"7i&6"[]<B0BD?27*4+'p?XSAo3%r%Q+uKlqjf,oTD;/%]'$K/cgIk+IP2sj<g`R(pTpI[RpjmC-aK=1f$rOR]%[^<TP/AE"!9;L'An#k2aN5X*LtKJ`Q^jF_>?uE`:r)c%V3s`[S[9lG5;&8/:\XFD(6i9m3;phnPPqSchL>Ebmj>t2A7HcL<D\PVW:CEk&,GG`Z-c9DbPPm(K&S`uR6/?Wq\\O$Ymc9Vr5\_&%d^Y>W$,a.&;TfRlmEdaF5Q?6SUEiLsbN?YtS2l.g9V"67aAc;QEN!Qc#BkA6pTM4"QL)1U?Zeb;QLB7gV2jYcFn)$6#TmCh!h0mP%dt2PY\]r`G_b#/*32#b,#1RibpWj:8TAY>"F5u2\BMtL/Pa:`\Cs/DgT66<QI&VAHGKYD<=T=KX(>o*Xs,^3hZa;DheoTqp$F>S@%8O@(^$PRC>9/f^!'k[&rml'g[:4DRZDXCN7_gFMBZhBm&i([o`pVj1$=a=u)gEWKAOX;A)F?"Ar=h,+i<dq&XOeqZ)7^+V:W`\=!%^[8pS*u19e6QeI.8@4;V8h":ZJWdKJ\AQLPI7cG-ndl\glA"`3e+O&o/BlL^[]:/:_u-anI>2P3H"TD034/]Pg9VH*$mmF1Yl\*5%qfk,b_8cTaG5SB,^:6,-<Oqhnf7SI*1>@lW)p',Q1>29r"t]<B^%:LF6WrG:ka'WQH/9-B3R`s!Y8H[qQpU.caW@>BSTGMudL\U+%qjWbb"f*%Ld4GUhPDj&pBF(r,(D9-c`=BD\^Z;W@fqr:>a@O8CB\tj`V1:q&I+s?8^R:jK"K)IO"D:VSQrs'EYX!B\eW.L_SjqNX%O9($F,qQTFh:ZnT/B\$:I0Lg0mjHTY8>=98Eh+9"'sdcU;,,pAp&3["9t_(4QrG#1Fn8gMgZK!==L_JN-c%,WF8o.)SY(;M.]p&<%Q[#7X6`hW^=ZMgnW3aDTVf1c0goKQ+!e1B\KU6qbeXc)5,.%!7S;/B7QgcKiP)Zmsbp=>!OBfO-C[_X"EOJN+O;:qhI.VKl8R=\f%_S3*u6Wcq-VS)2J`UX#s%5JHCBp9_YWR<_/nm`DsW<n$G_JG[-meRZ7mX?(smfVC/mH]\7JcpQ4oSt4TP661gjCr:]<9]a_W%(O(%6*`;/o4//=)LD4%<0bbXG>'*Rm?p[eO0!gsJ+:g5'U]O6>:c*`Hl^Uf#?ri3Ds,S@bF[n#IGlR7b5gD_f'B9i9-U;gRkiI7g^+A%%5o@CqGI(m)A'F$qjtstI?\jNL,[H`.:.3H?ae>@[b@h3<3nUN['TCoLWX):11*j$6^eA&^m4%/gH2#ecnMj:tKm,t^[ic!_,_'U"%\!:)38cDaUQ=KI(gIl))'P<-WUnFKK0(K@tGf#2G^=Md:EJA,Y(!*TbCXU7T4?3qDr,PTcq_?/Y4,!E_BR#$r&_/KLkJA/#3Xo".%aUZ3L%6cAfAhQLXE<F:h;XQ]^"=4+Y3?Ln:AO-3!q%]'%;3'5<Rd]9MSZCrYSchQAooQ8=Nd:G9=H<+#k@ePBk0`+^aKdg06#m2:%O:BL_`2_UAh])Ye,GQ$pd;lF=JgWcQlgnC94Mu4s^bYiE/&d^X)mm+5-['Kq$aXj,5Y)0oDl-[a_6(V"*Q;,C$HH?`S#=Rk%^9A#%?r=Y.5PgYhL*SX_FgB:'\oEXrH/S;!=b?#=9J.YrQq_+t"%GM.(\;ug98>(g5nk"gC6>0d,S$#t7o$Hf`'XDV"OHQ\&/7ch5onX(%cc-XTFI.)&a6Y-LA>AWo1Kd94>6+%7/.Do-Bc-e40M0I^N]KO3HlkSoHF![eMaV:S+d[YMmXk[R_s@&(J&TOH]M]/-/\arZ?]"lU%@J'Es(*O%jQXUY)N.)k(79H`"G\!XZ\h'Wsk3K4EV-un1SjrI2Be9HKP&M])5I#31>ZQT2Vu/6-6s\`XSMDJ,Y$@4DIJ`eZ(ghF(%cVKW3]=J+3MHS]uZ.:?e-Dg.i84"n"((hG-P12Ngff`UgrV:n&`H*=;:)@VBif'P84djJD.[\d[97:8`]sK>%=%W`FD=(gj0g%*L%E\5,a-S<g.\l*!WSTRC<D+fs:mbJ.eO).'E6)Hkknp53g*YQn2G!6Wc+U/NJo!B\(K4W+:(Ak#Zi*/)a$L#6kC6[e<kZ_:s,."-3%bHpBoIO!FLi+#$YjZ42699$EY1Q1_:DpBo9lJEb'DDNntNh+r\Hk'FYMY1W/75BT%cCmnWTVFVp"?CR\Q-p)P`,*8[3HXL'FMVe0%@<1S[1[%//h[heiko"T:Cr%98kgD9N;R-IIjj9i:d*Z[G&`h<8QfGX,6g)hh/_j/,SZjZ"bb7\UTVM?cFq.e++?:acm-rD'S@4t.%".u(i'FArFBMtq0G9]1gqlsD?e5jLW*]P![,HC^^3!WtW]jE\7dQZR8"nq^LU&c28pX>>HU$3K@'brKQ:*pk&qrtf?Eh\6]psP8#%a'm*;7t#egR<-gK76FZMlUAP:Qh*-b+nIG+F-Y=P\<K"H-!/Nb'X-2KKS'!(4o#_h]"(-n=Su9;0M$Z%EK\e<Sd[Na^Zs:rrH-Hp%P0%V#8BAH(5rt4OQk/L;B$"p^gGWIj.4a('ffi-fE!UF+c.$-_OD1.pL29>b)+'b.Elc*@=DIkrc'e8U/+ZVuB9frH)81,l-CMP[%H?':&XqXg'qmJ/GFdR%#PKo'?b80qV^[!GoEHpTP,&S%am^q,Ef`?8t[M.2o`%8-CVA.8Wb>c*LoD!W71%73ops-29?g`]><lq=T%a[n2NWcW_!r1dnkpQHNg1+l!OH2KF-i2*1SWnUqmB'f<7k4(J!XIPZbaUjJ-#@o(&&8h;++%_kLH&uU`GkiBg4'7:)Z-5%%Gp7Zs%2GfHg*P^=^a%o@e5c:/D@!t]qQ^f\_kO\("Zc#a+MYC>PkK?:j,TsV.(RE,s."5je<VZ?O]"3)2N'1V>AJfb144;,T&qXeUiW(C4%N^b2P/5F`W99gH0KMIeKq1:(jr3Che[qmEZ+k7kJ=_S13>i2nabE4;cUcD(aGuB7BO$"l`R9(h`j@Z='P^dSG/(*I0SWT_9r,Xfh%HRHg4@[^1aJm9DL8^<.W`_,h'oW_]T(%8@#7"+FbDEdeiEgg8jJnX(k]$0Y#'I'DBneB10OU3loP`JKVV<)]HUbjO5R'WVk8j=3!%9hLIAcVB?jCJsfkN`*gqb>OKmiK8CS4YfAoW=_l"JV6OJn*stbk<)iq4WMHd'<q4<%I]E&#j,$Z4*%-j%H<N7b8))S,6MXn&W]U`%7VYtQSrq2@'C4h2-'=cDQ^e.,H=Xj'cXaTU4h.LZ#qO3&I:YE!DHoY6emH'o\1]QSdW6%*Y=B8J!9:BUp<dQD3eXl*\Vun^R5D8O%"5&7s"VSn>]h:B6a8/+=@^?6Eo'16#c1XZ+d_%W_GeMV>\j5Oo8u?R9'D-G4+]X*D)pg086hLrdcQWO[UnGVqpS>U#dH&22/Ye-$%9@&C:J,\(Cq/C=Nd"g5JcA*>_cQYkC>ZugGkjm]JCH^_cPfSW<3>")&M/2U.\55!r^@Q$fq/F`&7p/=:W:St':C.k05$VdA8g;c*%Y^EsZ/XEcG".<uCB@_]c)d,i[5o#E:9[YM(@Ns\gV.(XTepcdS+'&hQVZ@FJB;8BfMclf.M+8nR,S:F5a!dMkA9.?318Mk(B6,n#%Y"NqoouB-!m]oE?G^f;NEF6ZUUL+l@&QsdDhO]esLKT@\nkm3'0^LP?aAS(aM;r*&bOAG'Fr@/jj3Z]Zm)@V62O`*F.@tq1-QsS"%i#,*1jMnKq'[+FYHmE[JBj+):f)8)?B:ahnp.@hMCRebupL-AY=o,s0R0L(?86,*f)B]Zc3U'r1JML-HpJ*#t80p&ibP0:m>Qu(F%INus*rVC:d)6&.!'H*m30/e2I.UX,_7Om>Y3sI`T'$%uad05\\BPQrXU\Q3"qVc#\ETgsN8VN)cA"ueQU[e8]&Num[Ko6t<Of-&*%m^EW!=M!mk_lat''eX_8&P\#W/#dJB?A6.U$5`.QPI/Y"V(%-b<Y.AX3A'dc1,2g0k!]!K5.4e?0T0HD]`=<Hj\_7]+9Sq1PO3DU%0R\]bkM9AKA>=X;gqlWESX6SO30ECUP+CAJc)^`1GT9IX31tIP7QgJ3(N,4:N2r##!PRL`q8)09rI+K`j*nDF\`H#"q0hSiq;LJZ%jmFA1q6s+*fUqB8i>\CJgFlWPXHQ`OCSf2MqV(LU\:ieML#QdS*c<b-3/)FYij-kF9&_j'?]t$+S@:#(_<D\0G'd+IfFL$8"-o=A%O(Y*11m9]]N)(PEP23.]M3TPp-YmE6G-_F]rGkf45>iue??-.57WYh8(-2IL>Vt-Ypis=sDC1=<JDH\f96O6,O\3OcnNFEXb-85?%hu@9\^*Y/<I7_UC]2$\VCS%%A<r-d]]<!>ZlD<CYp\&*;V42D;CaXDpK80Bd1o\p4i=%e/WarqdWp)H+cW;C84c(]0]F(?q`n*@&%N5kc=/&t*ASe\#V^-O:6q,X[?'rYi\@u6<%YQh_d@'kU\L^kLb8!DYj*MFDERO$d#oh2#NJUOef7V)b$B#T$LlZJFNai.OI&p'q-%KQem4-FmAf\1\fL+d*_rORu5f*-$C0QcQ#CouYOXN(`4El&31J/aK\S=o,Gm)NaCZXF!D\B;l>[J"6F_g%LR^,"`8fQ+_]#h:"GV%2VhbiR(V*oEHV?=`AtMG3m$u%L<QNQo*In<bOF2,EOg1DAj.PSe&D.Bj!3rHaefGg$X^6FkDp(;9c&R7j+NKpZKVRXa>pTkiq@)>%X;kA$?!K!fd,#j=2I0Q?SRcP4Nbl9d?T[,[5.YRA\C%.EhN;F!`@3a^f[8)We&CFs-(HkX6oJ>#P:l;OCJ'4ke&<c6L"T=9e&@;R%9Jk7\flU(jR<JuKPYIL?>E1V2:;4c'aejuhMXH=^.%>+I*m:*KQ^VDAZ>@,Ih!.aLe&<IQ[>[)7/oJ-D&d(@MCq;V"&@Pn8O\M1I%1GY\@\nq0tMJTl6cLA73;.\3fATEbWRk?=[0(D->i=3RKhZ+)@0:(qfVW:soqCeh,hT[43q"-(HZ%kBtBI;PH1\cB@I80"D0$gKb%X%V"rjSGjfn0h@&q7RK"KS5l>9Z9>=$A9$+'!e*m)AQtL/1Zgl>qWcE2,KL0a%2tG?+ZWXV"d346k5F/:FXmJ-a6:+@UY2YL&.e_%Z&&#WDCaaVo5r<K\1K5uU:[,&\I4pK-)m%<Em7nLm;fD,Eg7oR\P(*+P"VU7$BRf>:\HHQ)fDac5IG$>R7['L8R6D(ku!+o)>]d`%Y/@&BF>rhLG:`J?j.\WGc(ikU&Y*p=^NcZR&#+HC`TrY?.(*CY.eg`h4G:(So<RsDEL-n_W6:,_baP/c7L-qSWWui[O\R6t\WE@j%QlO$fSR4p&8I7K&&OZi:PN_iNcXaR*[Re[;+%>dXi6]tARcD\J9%rae5.hpjYq$Lt74)#(4LfJi'LA!%5:.B[7?GV[FJf@%;r0Hr%bfA\O6Jt>LPiKRTkY'ot]%](P9-CP+GSDZi@d2'HO3JBac=NopU_7I,mXU*?efHdH'5NXJUH92%OH&<F@lhY$CLrl9:j+..j[i]Y%B&<9N(.8&1InLS5nbOK/;_@O8(i$6q23Q/tEUn*u9qi`[?>ie%(m5,Za]l^3C]@\CMlMtahr*M%U"'I(,qZ,Q#G)Nt'#<uFHWrAF%Jr;>NKYr2BWp_2G)05-6c7d*e_tOe#$rS/ATl7HYr5tfsmKQdJ0u4TWhHQQ>L:ah:a!$`l:,IF;h+2G+bKM>s].%[NHm3Q/hXJ]B%jbCBd?BS!2a<3FsV;:kQGMM;piD0)GF3&eK5-ahI042sqZ<j@@CC.:_25_Rlkch\`#"u%WAj2[$qMuc6E'H6$3o;r!'[Hc,ZgWhY%^b_.$c@&.,(<aX[S-p9-@Obn/1I84fbELg)Qc'Tn'a4fHfXD8jjt[--_QS[f^.G1VaWrT(HM0L:M$BcC9H$isa:-t*O%P@(@N*_<%S5b5hWnB"*jiX+;Wg$(aHM"9N<PA^G.mN/g@S2M#K"D[p,],`an0?9<*TC&tLgh3B=Q7@sljehKjLD@ZP"uepq^(]jFLeQ$Ug9Ci%O*qr&d8Zb%mb<P<>X'MU9pK(@3U>b;mP3b!]]B08>Qa:jKOID^4_NrfOsWb54f@DOEXr]i`1@uV+0'dOn[A&UAE-9f?X&!P@H5)r%lF8O[nRCJPjB;)pJjmCj+4BMiXcHhuWnO62pGSDsTs!4%n!JS4-/lO_E>5K2PRgi_mG*3kkqM>$$K&b0ZMrra69a1PEY;]jpL?W$%oAiF\T(4iipWpGN^cn4eQB['s26g%GbIt$DSk,ofIK/oN`(D-=Ss:pkmU;UZ.i"IWIKps`>+j;_C0Ke_rQr;L:lf-IcHj3!;NIlc%0FJm@]lPfjL0'DtrWTq.p!^g39!.us`g_r0^(3,j&U0[Al1P30\^KlSpHQ\u9(.1LG!`0nd7TJJmLajF5.T+dc$*Bca=^BX"*hO.%^@<JmhW&7liR(FLVlqV-jb!;nb)aRnWtH6c<gqi=?VD*$58d=p;f($(DbjJ[Y,D&OKqOV<Rj=P>cI:UBcn/k_JWg_PRG`N09l.uE%O<g_LonQQo2@3u9Ehh2s;Oas*Rl[=UR>!\D1N$feod"CMLK5]2?/NmXUk7Vh+_YRmGEJ(:LWE*2LsT\G<03SFO\N$loEh]YjPAq3%AMKlMI8O1qoci5V\Y?G<ZY>Ckp(QV)'&f.uEE^"<IBg$hG.%/=q;^u,ok+5p.>+$$"S](;dFT7"f^G<)3kY"3dYurfLD&92WU=?N%?(UMS_jj-\k9TaA))kBt>Pse0Y&g_[D[tu6%\KI%=b+C265t,L>[kELQIXE5<a:L_'^m+O#E?Z<Z'Mk>h04t)@CAX;,F>m6*+mQ'%DjG@/[#XC2<VH*.TpA.Gr7N\aH66Lg=2jsb(I2s$[.ET.$$STsHM0(=F"grF=l4WC6X7g#T#m3Ia3)YLc9\*pOo1R2G+.kZ;]?6)%.1iN*GH1hH2J4MteH:Y-cJU]a.B.i#<uP_1T>0u(h9JdFOe)uDH];NRRE:"2lP?$]dHoR$A.bdr>`WIYo#MI^hROW3a"m,4ajjmJ%`n(?(IHeUgg*,pi!ODc;Er`&_+\>9;PKEo"M,'DY!gLq1m.VmjaT@^O!=YQ=Qp1sT2@#=iXU!,Q$r*!$$Sr\+RkG.G2?se>D"&u@%^H^3C7QAF<D\f!^%\U%g#Kd*ABMr1I?uWlD[ATXsi@j;V^QEB#9DJXrr5D>)qRd/bj\igo)qd]%.3H_N8QS`C^QboU)l"..r)19.%qiUouV0pDZ,EMCn5,nE0LUiX&kZ*.&=c&-t?'LTmS:%Bpn7P,%)TCB+P5"fESIIIK]m^"17W:7bd_1,*ifjY\f.[)'^Oa[bMRh=l%h('1XM<DY*07NJgSddQm]meWjGng#LV+67Gcde-OqIO5YNQ@f_HE1C]2O?cinQrtPdNZD`Ja`7>25K\A^B&3PM7qLoSY3IueNrWr%MbQ]844RTMA#(nlA']`Ji*O1jPJ>&-plP7HV$aeV.`FkrY@"kF37eI9.JN\8S%>k%ci`(h(RHK50>6?4iu:;0H`h_od]n=pIh_YR%V/N:HV""kWp`@[N*V<[Q(f`A2X'b@>#%`U;r?BE]$/b"a3jU>\HAWp7oukR+*Qc!Dl*pMGR69QDId$mbJW/*Pme-2C\)QOZjIE9%%n+B?B5cVY\i*O0_[FVn:7s#j1j)cj#p[Mg"-RX<ahba(D#qW@)-Z:n5hn=IfGn6=j[U.g;rR*QK3:UAjp\H2XnFulCM1ao.8Z;6j%PF/`dZgRKZherup&Ia,l?b!S?f&E@sn`:/,8A:.'"Ns<jl8SWhHnn8e=f44Na(j\IMD(E\3o%Dt+iec`XaVg2B_ZrQ7&j5?]qRmO%l^+d:,g<OKp\L`Dl8S@7:&J>4+and%p\IJB]oM#W^[tb/Eo4nr:_mr%>P?t?2g@**i)[TX/OS@[fC)<AhWgGLb$!SJrR/Tq,#W78%Hi;@pSK^7oJa`8i)4/.@Id-%4akuDC\DK'sA,12;'(!aame-/h=59p,"%Nkkme'5D&V1ldL:c%j>qom@lgXZFV'j3%M*1FDIUOFq%\,,d^A'u`-L%"\-<e?\KPAubNjLp"?3m>tFq?9BpIfh&E]/F)G`o$*K/f[cq3(K8GbN/YCN-P,fVP>0EMi[XhSh"s*:/m1n8ch_1%mA:-F8(&/?ZO,f^^O,SM=Y#jEc[8[(Wk"4E/2dBd;3h_T9D%D:O<qKiJ_W2dF#cV+b,^qa05hm[b9*p(<XA8qAfg;'h^p9uNLAnN%Q^4>S04/QZYCCWN^3_uOF?TY;mFRf4F7El8rib1I2=n4\e]G9B05"#Baj.g&K3q.2YH(H+$F@0D1+LTKf#Q5);L?F=gGXM^*F6@*%;*EdF5$X\(Dp2SWkIgBk+'.QaNM#r?Na?(pe=V2+H8"D!^J=0'ZgF(glcmY/2_Q48d-%j>g%-l/]CW_Zqd5<E=)WerI@Apdr8#Kb%qjGmLpQm\i`NT"D:\@42Q*%IGCWb4Rjd!,g4ZmJgJ%0ReNq6\gF8rjpehPLb*/[G5PD*Ym9-6e&SpM!shL7)d4("IrfpmD]j];-I%OALDjPL"TRmV:j#$Ogci"XMkNg&%Jg5$iZJpF<>PBP.ls]+8=ToER1/[*joQ\ah!6nG`=2-dNkkg<3\22<1ET^L!J1671qI9FdWX%/[gTs&?iP"TK.ibX'6r!ZcWBR9'uSpAlrV_7@"H-m;P4M2!=a?"/HO;(=s)CXkEAR@<U]&QM6MJTXk&=qrjgJB"`NZj`:+[X-_##%lB<gormfuiLR7j]dVY!,g\(:_^TR!,1M6j:qd5/F?(X-T/mR(kb4t5ub9qWmD+`@DFVABXlK\s&:)>hGJ)#TnK]'ao$'KHJR9BRF%r7%U0PHru7K4oqe0&smnB'BnV;s1+JR.Q3j+Fi++C"=qG34gd5kHdV"@I??(;X@&G!7jg<in!\OVRGq)ZocFI`o:fQCMmd/='^2q%H&<&Z4Wf(0G0Am]6L_hJ6DZ@d*\@O;ICDB0?oe"T[=08?W.>3.CVM"(i6C:)m+pG7/PJ\7c!p1iKi(9$DbBYN6ZqS.9*I`#"*J6j%98<a%iC(p@Fm$^Ur:r7,qs7bmHM6_M.oLY#YD@T]_?s^tXf7S^B.=U!L:j?u[IRcC]'V(>>C$++U4oDoVtZmo(Eg2SMPUR3r/q*7%s%/kf[.tLkT<MLj^kVU2>.o%JGkJ:]^:3WYGNRPMOs1of4`%XJ=e0?^r6EmB#Z<FuL.D,an!QGQAp+\,Gh_+>3u=s<]a(sicdbC:%Nm!:EcXcEIn,(<$>'X7NQ9TfLEMB!@JPOjB@97F34tP*ae2H0dK.Qr)N!nQr6BnHfE(epj<UB:D+/i^`_DbbJ1Dl"o-eB.0o/"F3%>+nmQo.n&W=V9Nmo*th4C]5=NX9Tha>Wp`@>lA].jf>"#ddif5[&M86E"oF'4M//fcBBQW]RLK7gAI>uH`N)Jr!8fY`'&=jc#4oC%;Z5SPJH@Orn`dq2HrJ!C/Qcoj_>or8di)\RD>e_ZBmjL-RGZ`Pgjed3q:`M?(%5tXK"5(5+$=uJA*\79bNIgO<1G)o_LIR/G70mF%(%L`e#`+H5$iA>o_kq$^ITZL?T(("F)[if_4@Kb6H9iV=^Y7n:%hHa6B.p^K#=m>;Dm/Tt4TG*4H7sSt!UfKGYHBn[,4/r7]R91u%4C)teWpbE<5:f)R6YCi7^scjL28>;=m5F'qF;</uA=meg/=U.%iWd<`(E[nnjUt9KLVS#+R4Z/9N7g;"T/*hMr8#M^==<S5pQo7a%7ircQY?d/sZO8K-G)<J)b&A+LSh4lnHJ2>_jl]ho.SG<!Du'S1WkMNKf@Wuf*pd504Sd5aSK3ZWD=?:2BcB]P(6mqJQO>K^qc'%`%2o!(C'%kbJoY`jHkDk"R5PLHYoB\@(NAh2WUXn:u^eA[3"mFY6fqjKS)@e6A(u4k]e$*b[J\,$Y\($Qi"kpr%je"l'fMT;.k-D0p%;A^BZn5cO62E"+bp-MU-TsO=SMrOehh62a50ET[4cek9W#0$A9$X2])ctO,>*Is7UZfgtJWql.jp*u_R1YqB]JWJ`+5D%a?HDg94%\+\p3<YX5qT:incToCfC),j!M.`rl$MmFfkJ8bLd;kS[8^Ad;Ep:&Z-4,0h8pjBRJp@!0G<b4`imb"dSce4&_q:<efoo3<n>6M*[%0\Rlq26O7SkAHm1^CD0*Tjb5ZkJ$ir9#:sIfBLf$[tE!+<`d*+iTqYeT(S\Y.[Fa[O8e[gpVQgt`mG;eRg?n>`RFRT;4b!&87-`>%jW=0U$2j$/Pth.#p\)l[UELhZ-J([N^YN+>Hu\B=+0F\U()9p5:]'m`O+)fYbj[sV]a0[ZlRGejif9G9s(V.gmoPkTi8fR37(3V<%f3]C;4t60Bb=;ecLo,Y$co#`j[2en`)jMVbX:GN+Im%^6e.r*[5CRk%6EicTnI'>I).`E$>mReHX[@J#%e7j'(N"u?J$G1#;-4(u%Ja7@C&:_Y-nC@O<bX()sB8?dGrls&>o^W8:/&dMlk%f_Hq),3-ITIQ&s*^ftrADQS0]H^U?Gj!;7sr`3J+)-@?17+-1t^-GT6TaZ%IrFA]Gb[FeE-TmWO7-pdfs[78IG[$MhY6'+I^lr^8UP]kqYB6Ze^#VH<^4&@ekc,.ldb*hh0Zm4q<5f_kKg3F55X`neV#%B^@GN7%](bELe_d"##.sX$bLOqr<b($6[N>=bM:Kp:hcR)*[r8u@rr(6>hcE%7X=!N%kLDsArO/09UM$Wa4Sn)6V&50IS#95sM'B87*g/>&%Km_n8K?*)l\Y"AbIH(0iH]b</S:G3Gl!`(FdGT[Jda)&r\jUZQqo/4)lOTGtpt>8=*ImmsBIQ/O;LM55f\bOFi8(-(*599%F[<F:%-P%;hZ@DiL"Hr`GBmnje\,SE\XmbCT""p0s)KbS`rOa.f#gp=l<CQ<+e.j14nm<t,btIkSrr_/Oro$"cb4)<as1%o3rR9<gr=AnM%[s-]4J%0W0<4h#_l#Qa?Vlp!W^A.bH]Q[tlp[=0h^2`gN^O1G"NEZWaA']tarr$!Ma*r:/WsG47?TA#nn)$,K5<o&'9H2p+Uu18G%o_LRQF@Hbi-WbP96$Y%Yo84M>T8N.9m*c?hJ'Z4=rqM9H]Ye1(ki,kBm(75qj"Go"Z1QT"_5r(_eq*#dpMQTF./%/!b)`jto=*nd%?$Q/4>8Md8p@b'CmsZ+'*?9OnV7CU?o.a!]>^4TP?=]MNY&a48UVg-UJqKZoBDHp(2oJ>bi9_n!?+]e)]bAE\p[5V)Zhi'gh`c;6%)"$1tfLYLNA@+k!;Lq#E*goNB/oUo#>oqgmgnWW5:<UDdF(WNV]'h:(\%E!m7h7ucfAjpqCls5EJg6k"<(28m]jUU6p>&^JFl*Wj%p;k#Irp<?:TAL]F2UP%ore^+E`nj5ba,g6[=j>[<R4:\9;F5Zlao0[aYPpXks7FIB]NL9Db:OrJpb,A5l`0oa]A5*m(u)^75Iha$%K2_?ELT^XBZ1$;4amnZJBYO"V53^VLf?]u$oM5D^r#6_bs7,-5$Y<@`lbUb,rU\%^"=n^T47DV0-8hg2/+.8<?C/jiVI!?9o!@LK%a1K*cLm)[qs/!l>?f(SEXX:A\<\\[b2J\5]jlC&:Xk'<%;!HtB-\a@ohp$54P-3"&EmN>klYdgu<.J_D"1"o<EW6$Tl^J\sPGW;?%CAs[2"ttrQKdu-=\`qe.K,<s7R>P'A5&-J\\B`oM#O7A^PeXqXouGrB5@2I?gJbNTNdBjGQ2g)IotnfQmQIJW'!M<5AQsDABSrbk%&orrZ98N8AR\i$i?[(e"lXP.b>RN"Yc_\<1`OoPE8Ga4;piH>n`MYA<q<=5Yqrd\0ft25!Q?.8A4aqkY`KMZV4o%=GY!(\?H2-IR%X8RtR(G:2_p"$7.Y!(H#J,EjWS4\q!,fY,!Wq#a!rE'r3lL2=XFLgqrbr<C^n):[Pe%JDlG2QML3o#,O`;'dZJ$F21+c1D=S:'<[%_R]LhIU6)E8DPZ6]&+rmcFeGiabq[!IX(SHgYWuje^7DlgIE@bEUDNH$%-hN>t";)T>/#/j!XiLr6Yc<T9Gn:o@7Z1l['@[)?M2)%`)FT"IJ)0Je*h_unJYbEem\rVprBd_iP`:U+++(\T-qp5rl-<5c>F+U_&qMuEW1!'I,`r%GAj'4o>d>@RQUMC]N.mSXdZJ<nis'$%]N.`l*o_ZC;0]430PV1![\E7p25+arrt.]Y[;#b!3;uj6_J@\T]p#W]dGOq]'7EqPphL=)o;Vc`LrZJ"ImZ4-%H?8F&,q<(J@qn3%;a'mpb(74K^T/FR%HV!M0E58Li,:"KU-ZFm4o"@$Td?eq^A,:WTpekD>aNur]YAgQgt29b'VY<Hh%Q\Nq=^&pbs*k1#*F41AEitu%SN-Skp<nfhcT_@MZ?3qAn;ef#3a8i_m]!.K9lp+E2dDDmI/1B[o^Iq52+AEYob_*Flb0FOT1I/3-8"23)l0;Ni,AM%5</08QQ=NF%lG5J=.eQ%(q<k?m^YF6[TF/^mk:W?;?pNf*L]9K>4u'_Mod:h%=ag5,N]GprBN7(dK5H/aEg:s'LfDUb'RXf5WSXk:,u.`iOb`pb%V+SX`Vn5<cftkWV*H0^n<N*TE"HeSgNM#3]`=;(`rl58oXa]<Z8VQ=MZ#AFf>R://ZU4e=bBW=OC(]V,oMs*2BJ+3dhL"))R)/:N%rH,u3gqC8`Kg%`4O>l9r,@9RI-XN?ifnT9<`sWp6gc1*K0-=5-q=FHJO-R?Tr5[W!mS>G/_TH.J^Nni"Q%*&>6YtW5n[Dl90FZmB%hn@tc(/Y%L(#/H!ku?1dr,V&ILK"c!BU?g'(&RigMVWW!iKm?4SS^*^O2u>l2;c&uYP1cjQ!]Us$nl_@'23?3LYn`;Y"i+ndio!s%-I"ETHAiA]m0c*`$)@I#5H/LhJ!sCfU/T[;p3Zch+80X7pLEB7`.Q<X8;!D\4P8O5iA(3ZqYr`gnD:3q1LfkQ`QqlhIkAU$AUoKW%+tt%sU)Sj^i0uM5lOX<a?TWq+YPcoj(btfD=kEt(rgc&S4G=3(Iqo<:>Q-iYBm0"96eo4siRf;a%_iOeIr9OS4N/3X>-&Qal.Ng/%iZ37BmmN2]rI/nSj&rI.QVN%8<X>*SHdn%E=8J[WVa#q%`""tJnKOCNYO:c)f'/-@-?k?ZXbX22"lFa5q'06ns3+P5bdkp+YJ5;W%]b`Z0;E#LN8kYB%3*BbL2nkt0E,%(r5J2L9>s"T@IIbUh[Ca2EpCD.*5"GQ:SJaZ)r0bU)*d",7^7j_=eUnJ.AmH'5)4Eh?4;k">%;"mR(SCaAt]R3'#iU&7S&a8XC4l\BXRcq9s+-#MD8,O%<+7?Y)f^mM,pkPKuHTJ)+r=90Z%p;5sm>SgY7a#!3A;mMF\:;lR:HfY;%Q>ZVL&MBMJ>/gj-hFROS3T#Sdqo"t0M3)p#qt%.?dA,S>p>Y8uRk4MnYeV^[D>O1GdYHtc)!CJs?)Cr<c-9&[dp"`X\"`i%7<%_l%ftETo]MbTFT:R\o_L-Lq^WAdpa\c`b7V'FFs-XJRGZ,\[Gg'H<oB!Ssn%A7$^2t`OE]O0hplskWIJ`,_C,p^oFoEIEHhl-?55q\G%$_84MM/L%_D>h_1Xc'sfm4Hlbr3aeIao8]]j6^3'IWqD6S,`!M_[#lgrt>foDiuCUIJX%7r:U,M?_@3#gY8/njraNsKoR][q=4+5%Q3QmHkTp/tS]ALR5K&k5nn<97+29gUol$XUEEB/hGf92tnjnpE3;Ma>VB,\U6211Zrf1TrKX]h60%n"B4oD-^(Q;h^Xfi6g+.^`U%=24UjqR,]0S',/dp&3Ve5!&_[2iq#-Z8%YJ+Kp6de_3j;meVRCEW]Tl9-mX1Z[VhrDZ'.K)5ZQOmsTK$;BA:$U83AJ24:9:k/2s(%>b4'*J0dKL$V$'pmO2qaH,a)QmYqUuBn:GihE0=_T_$CeA)8HYVXLr5SC?&U+C2a$I-F252-#D4U'NW@+Jq^u0.W1P#Lh^3V_2#"%c:,IeWDP!LqV[k^0e,:=h.ioGCPaBN=&%iq]gB+KV`@f84&^RM,0,F[T)1YJ5I&udO^8htHC9?V7#:^7,oo=#m-YT$3G-C?0E:4`%hE,28h/_r"LX.$&?Ic`Q-O'>:af@XU`s(_DPp\fpo'H(fIm&(^kP"R5PPb[cSX4cfbJ$bDIO(Sq+75WY[JTCarp=?F-QcU'r8Q87%?T,*:H2d0hMgt,$"EaCugNRO@gV:8%f05:3hq:4?Z^DlUeafWeE909F)*Z]Bp+OVhhu3#W5NRAYh4+-25JP=T^1b8Fg7)n^Ep:@"%a$8Z-^C'Vjqf2YrrU53&p)de/0D9e=#GIBpmm8u^1$8F%@W@ut@WMtT5Z2\2jI*bq+8#:_c21T:oTFJC[S4[3U6rV(]nABX#tp,4%A=*$LEaLfqF.*8*#MCI5mLPU]AFrt6j@Tu*3QM[DMW%s7S\t%%S"gDW!j5.`=7N$C&*?dNEN'o\O(iocDOMfJ3?=p7a]3dNR'U%X%#tus^hH,<RE^c/9hBO2QM_ZrRotI&r"1S%RUiK<<OaQ(8F':\56^V7)Z8f$U$[Ip4E]KMm$Sid.0JC@LSF!8TbXB*:8mG_t=(IH8%'?M[E\L&ms`sGMmbf=Bm9?YPWq#dgrXg<,-/.$!Sh16)3QGh+Tf%H7%\LaDYo?0F?R$3W_:Vi/_DTRH#$8[u"b&T.A(MR1gT-mTX%acfWO`2/t6K#>eu4"f7t26R@PSXX_$1".>!*@`nj;$i\%c9P:!5kK:Taic.HJlcKN4XRq\*&t#E@)uk'Kh7W7bYuI@"nPBMV3r-&%2dqM2#SK;W-49KWP>B'K8X@pT9ZcPZr'<peCaaZnELIdC,Qjko/:i$=i,tAX@u#1,NRL09h1b5D)+Es,L'3Ed=.RsP>7h&:=Gi1N%mkUen,(g/t!!W0S+Y]Dd"cNjt&[j"t^b#PPLc#BiX[1%M6NG>gdnrHY6(Heqk6\bo/-eKP:rp`_PH?46[RA2n,g6h*%'nfNpO/9Q%KIPtB$[./],'uAj<'XD8JPVK6RrGp-U2Y&UEVtAA3>fV-_QPuZiNn=cga5Drj;K1coUP?<%Npe5gdD@/q+O6<dikCkY:bp<6e\.e%B8@u:=n\!YP[sj-ljJ)&Y49u8f3k)/2fW4*ODtCMTugnB<fI1*7r/I!Ki#n]-))&--8-Mm*C[4!HeCK#RD9#0G+\+8JRm@>J*e$q%/]fV(Gn4<6/L^NLm#c9dJUj+.)9bmn3\mr-]AsI],Y-5l+[@(G&W>_&r&)RWLO_cXH\Jd'"+\Ze<cV@Z!'Z(75a%hEi[1:1KgYtF%hS`+u^e]ePE\lTFkQ]n+*FhoDYq%A'^h4ja6o#,paPN"+bG.Kmb6m9$6G^3?`]c_rn&nnhmiqe!nX:X>A5"X<FogdI<i$?0[F-=A%P$KMa,Cmk48N,#r%M_6t0T/'/g3Is&@;-lZ!9]&i:llFE(EaCt49/5h%0.3.!]f<2J10uDRj*"l#>R#oLJ<>M>:=cKD&SNUZg@F7%OlUK`hh\cSJIqOMY^e:*!5aap_1RE]oSB#j_R$I]!X[pJ,"+h"/pM<jB/8a=@`f2)T`c!H=[ZSPCsH`$,WL'oLC,/`O?R;[;dhLC%]&_ZW!K!V.$:Q_NnDB`N89fWXIXo98+KM4Zf1_9sJ@s]k1ED"d!J2[Z0E;*CEmPH[m3(U]Crh1GCRi:^-ei+Unm8W'Z9]9.PK4^p%!_tDir<5suX#Ytk3K4eWSjfR\joFH48KtifPAm38:dQg<Q[l3PW-IeF"P#9rmgoQMEAEM!jEFbVOto=_&h%=R9SB\W2?De=I:rcQ%%e]Qrg_3>b@A;*VK;<15kjR3bJ)tmCq/BIomTl1F0iN`>ZLgmMJLFD_)`b9FJi]$gMkdoshSNJXOVje5]L<I0!]<@MakeOHb:[d'%Np2CA_u@m!a;H-?KL-lj3>Z+"S_T).Ul5Sk!8TBO_c).<(5V5mTnjXU5:LV*&eJJ;@&c.OM8DP-dKVK?W"dp.*!N,<O>9cPOVcEJ%n-`n3npsD.[K0A]!LQmgojaR^S-Cu`-]ppGjCGsoU4<Rb[tJN@Y9AZ^*8?\@G/52L]A5#"1ch4-$e-SMEu`m2PK<>![t&N??ZAdE%MAs*0Y+T)OlQ2=,P_N.d(D9`.m"L=nCbEH2ON=g#7%#Zh4BZfFR5m*1<J(;47=S65_Jdi-Q(E$/-A<R[3(U<$U7?^X:eEc`p8Zfj%WpW1a'QV@R7!KK/L;I,I'hBRIc)>[k6tt`ajU9-Y;DP8HSsKj.Kq]nZ&1%Ib:mcRGMa4npqLDO$(.G$a0P]:uU"r`)L(O[!j6dXO%,!c<r56m?je+nU)"-A*9N]OEFZ:/jSq?:UaTq[GFaZ]b\@B\4N\.9C[Y(N8&R4Bd?QRn&0f[s&3;\A2NEXd14NcM.I0V5L#U#CiA%K5_7S\mu%C*CVEO'i8j+@nl(G9K773Y>dJ1oCmHb@,a7#Kpl/g@92VE3a3bZ4X\#+=Q&Y04_6S61Oa\Ne3FesIt:#$,A%rPE$Fj6%8Zp##H,b\u,6jTs+<j6bl'&-s+s:DTbS7hnWD8OmHD$+RSn4<*)-`D>+%"c+;@"!^fKdA;(JTq*fk8[L_b/+L5c,FA]F&?"'bcu6%kc<H(0,dB7k)`K4opciH",JX(n.Xeh[[G9VZ-N.=TVm]Q+9rc;i'];oO*ZH"4tO1!*<(][]\*tD9h@`g`d')#VsNo+@ia84N.D*@%<epbQGNMaS!_E)_'ZR53?Gpa!!e<hI<M9shTu8)[%T'\G#utf66h,cHcbO+KNkW!eK;&oGBLE6XHE)U<Q;U3sLZ(2;D#)tIH-$$.%A#Ua]Ve"6[]oWPVX:+K!Au^i9&[e)8B%.E$pPL/^eBCNe5%1eN:47C8169Y`'[\^*k!gcoU=4r!'U<3Yp8Uo@DZ#KZOEZGX`DR"j%USr!:-D;i(C:Ve\i[!1&_G$W08?)Q_DdI8c&RP@a'<)"!a+ll'5]UARTk^P6#:1'KZ-VMZ?WG>T9GnXsHl*Kn+U4<%eWo%;WT(F`%!7l\[*jIi[#9kCcfn6MjkKl5hnh7r'5(NT>+(/nn$*bmiJajNfh@"*);rM+[_G#eI`hH'^ePs)sj2qcB.q?K4JA^=/McVEmQAQ4b%dRT;@4Mfs<m5!(bKMEf--F:^$i:S)MC:@-*Z*$28nu']cHW#e?%`]C@m)cDQ=B,qR&_*Ze(f]4b"UCdgF7M"YV(%&T0ID_A##PmJ%g7%S%ElNkP-7nBLBkk`^:aRr^3]WH-m,6rDKo-52-5cXDHZ,p&JhE@j%O^jB"<8mXZT4sO5lk+l*(p/VXM#/,R%SXtO;ue&Of@]g%+F8f^'cmFI%1\5&3j5'$0V.D_i$lF>Xbak<:,l]NiYAaAS.A6u1a;(t_Z520HtAiuS/C2(b,%^"#Y6VSDOtu#EKW>=VPg4S8cmEE%Sh&:)E-NHS6:Zkd,7Y%^YcS)M1VH7D2/q`Zj8p%SUu4*rh/DqkE0NpaM'^i--;RE9;NlpDK<>92*-RJF_*RZ)ot\s?JE(PlD;^uu%"'kL[Y?ie8<umMAe[aTH'7Q,%bG+DFDdFoeH%n>>HU8'eOC*TS8L#*DRKuWp3.6#pD5'V*8jY8"eV\t$=RZQ3fq``Z<"t1RR;1N9%1C&H!2HWrU*E6TC\g7X0+)C1;@#dj"BYFTVouS0UW@8H:/Lg#@huTrHfYQ8Aj[Jn&!dXTU9%6=BGkQ+)3-21D+QU$4F)KDB>eD:(%LBuF$*,H9'5?d;HA.n'b'o?=VUP,C_=*H7jOrV#fKY343p%kD[LDM`M!"V<r9B8fmd^94ra5S#9Glpn,f,eg57'4Fm@;sV>kYti>%))TH<#8tA0K;fRC3Q$RQfAfG*9j2?o=Q;/b4%k1I!%\JU-]8%D!'s%Z_56:KFd26HgRjf"%N25%M05iD`i,X$:n^4jP>#r;Zs_E#%&><TZ"cB44<$l@oKP%os'KR!V4esb=$lK,/0&V@2b\D]03<9Qsr_8Lg7CI6P3P.]91G>K^5QX$I:Mr`R&0[hueJ>].nM>kYH+Ul8%PGlCGk6KO]<^.RH;\3T`Zu>$0i2Z7-J[Fs/W-VhZh&,.%//:bZRWD;<'6cS*lboDgE)c^J`*_UXS1lRP0o`Y]<;qV?TH]J;BR&m5%2"QY0H/Pi_H3@"]hC1uE-pJ$\U'&TSEPl&`0.=O6P8o6plXGp:hf']aH@tcVA):!;__]//gaj9X#(UA#@Bl6'#XGBq=Td:Y.N1VZ%LP-dqW7E8;gElHVWP8lBKF%YFe#U,/`Mf4H/4'DYr2?n,3s_TneHt>_1mR;'&nMTfEdBE.9%,,=VD\Gd@8YrBK9e8K)?K,[e1K2E%-?']i5]DlO+d>oG+67#B"$32TP>%EE;hiU.*nL['46Su;6NrVWH6W&(Zt/iO,no^njthBa!^rQ^<:?A*5S5oDF8RM+&fo#pDjhjb%5e'BGBVKr86TGt"^`-$EY+/[EJ`g0a7*t,Iq\sV\]#l\hT56,_V.."n>b$0oU^qm`6$HB'lMege:'He/L$Ejd9B+0NEO+foN$KNK%A9"Il$OB*,$Lf2^XpLbs5m#a;<:_;f"9?iWe]M.\7fqc7\_1I4A1jm8ff`S9!1A9U6lN#TMKVNXOjOG(qdB(o?\ISUAMZTM$=>)>%GrRDK;%^7GaNSC*,!nT%%F5C(B6%>K-?ue/:Wa8.-eZ8XV#&XP+\3V))9"ATDQ*;b)Ve:>J^,tTFW%=n@H#RqX*].mZB8&9J/&M.%,)j8;J]\&4#>.$Q?<l\!Ql4R6-U'ZsN%LoCg'`l%@W&m4]TK@qWIP8?=*MNGKCT(h*%E2X&M0Y)i<Y<lZ<4tQb5o^lhu_aYLD!08%N#B@&"H>E3,EaGn$f,T/8d)k-7@NFn7(A2!YWCQKi3\ErMblYoS2CR;dYU:LS]_o`eoP-R.-a[O^a1"#nEq$/Z,O("f`Q7c=X\>h%AMUb8D,'YFkW![mE`</S9VJ+VnZ%R#Oa\)Nb/$H`Emfk$\=XIsK8p63+;&DiNM_npM1I<?&f"UnBsOE0MO'M:Q(c"-Z[-qJ6/2Ob%P=6*_e;LV%MhPg-#6b1*8DfgSZ=+`/S1l.GX#'s,=Hj'/5WkDjDQ;F*W(^/8a\gQ;6t\!+$jEO"F@g*b<fs-&N%;(:#hW3YTGd%/%9iAuQE1+Ps*PKI0B?2?5?OS4Hd%lOT`b&C"6KM>u21bj)'bL4dJOH,04=*I**4-`),)s#=0c\.P#\PTK)O6T0-:?u;LLd+MK6k^m%J4YWAT"#]%K7nio')0c`K_U:'fe4,_5WC>i[RK,FcO?n4N]lQn&J<]'dH8!TA&kfFF;dZ?TV3L66Joj:=mD-jF,)InCj\A[k5\d"%;6Ga)(]f!+6=EhJER6IQ<V9re(Fbtq;6e$9%GktqL^n0]D'E3#EBsXM:)/]+7K^kV"DOM8i-_.DBH[YqHRdO:Tcn&'0gsZ6@`iBr%1hoLn!/W"@]F:Jkn/l3[j)6!mV%B&T"bu6,&GLCj;H5747/."_XK#<[a(ZsOlTa;VA,Hr8&co!Xk#45#MXHTFUa/8_"QM%124.JN%T'=/p'e&*)4\UR7<QE^Ld28,T+BU)FYnL,XkYhm7;c!')+k2mc2fC4sZ=VTEOJV+cUZGQ2K'T*n6Yf.P!-1G9e>W(u+B:!HDGmlu%U;QVDUFUJ$<N<ALMkei^eMquU8IWOF/eX(6A!tP1iCF?P1QY1RZp`1?bNK:W&%38!!n!g/%iBQ.;bYs.>9\Y%FW1Z>808Gs-T-NG%.DT_HQpV2qh`U1I<;fgB>&Ht=;:7R7;?Creb4H^C1ujT+GDMhmRWTD_eXgB+S;=u:7:`CK&1p.\9:>=pDBVl0MT#XdcL-TZ9ft9n%B8alirOZSti?0jAUi`4d=FoNANRjAj4ohI!=:W_V=-U`^"I'dQ9Eg!,`Q)]NQV&94$r9g-9T'<T19R?E)7lIfI-m#,;nW<67A=/f%cnM@X6oce:K68k#R8`.?3XXRuGV+%P3&363`'B,<e&Z2U!7;Jg4K]C0$>'b(iZr!e"3r57);/^4)0ULO<'CY3F?Bt9$e?6EKm;t+%nO4l1.g]YpV^5+HEk.6r]W`PuaCZc>+h#6>4tjL<G:>j>_6SU(T`2b=#U*;?J<i$mO,.BXZcPO5j[NmCN&/K`6&bO;Ga5.1E$Y*?%Bo2n^-EBTh:c.-&@Koi81fX`-G&d-Vc!190.5_O(E![>/Z>_b0!XBGHMHllc"CA+h8DU"(T;iT5#pq-9aA/6_-SFB!fHCO!FD#OF%5BV;PmPj\iAlCnMRgo/Y"AJS2))*6:6fHL1_;q##KeO:KoshgnOh=@+Na8/%k)h!Z/?%;?/-:6!'/N4!UbjV@[+3YYGaOQuU)m="%MS,t/LRFjROeP9oQ_O4oB5"ka@7h843jE6.l1ZZBGfV&<b;]W!fO@X?'oK??i/ION,j*b#5,/&onNUVC_8c$q=G#cm^bjXdeuV!D%7M01`-)N!s+sd6G*tU)@pfsTSMQ$\!Y/X&j7RXn8_Ki6/GjlD!H*9OY[bU-d&WLK.Lg%l:/fL2@:r4]udGj@tA*,59$]NP'6PY]*%o]G(7+9n+-$3'=[adB:kE=+G-m;NWSVlXpGB_oVOdh8\kkE&7KFR.BUfd-o+G]B%DMIapn6Q6'%G>?3t'm&#1o&=JjA,o<?RVc'.%i[.[#E/gA-]S<El!(;;::_gg1!gP\)ld;DlBS*gD&RfG7+Zg0j-?<&IS7U6;KcU[O[FCc+lj+.):jmW/iIjat/E3p&?l++"'W5Jg%*%'Vi"BhI:1S3aM+53Cl#__+T\.";6PNe0j*Dt&TPMZ]'&H[k=CB16br$F.+epnn?GYJs-SN#LYYN'6ff&J]Q:c<[Rnhm(GnA'_C%,LKAReH(nu3[-_q=/'%.<`Prn/Z<hpi69!1"P7/n?U7*/!Q_>m";&\ii3=h2;pHfVrB;u$@bKY4!^jlI]YM`%El^"IP^63gDFXIu%Z6^XoVdP,QiAJ:\-fW[iH@QUt=moc/'uldbmih#G5puLI!lWda'1<-N@`ss)TqH16,Tahk(Ra#9CHP[.`$qW/`LJ4M7$=RSoG>lQ%[IcC!YDh)Ye"iFV7NN0P&piHnQ5:b4O9)^#/P_OrTZ2MZHprra"!Rh6dnAV0!(`dq+;V$\J4'b\f.brs]W'Pn&OBc_>1BFC%C+S"%G%'rmGK<dLm2=gk6)H,q+HQgfBdPI73$*XT\r^Uh-aJtldogO4dBu;kF)t5$#=]GN-0e2*IW@JIjis`t6+(f6'pqq/VLmneM:tmA%<6dW&J2jqlk:GdVnp@+?.gjaPr/@2,A8@PP9Z%4oTG_&i!!Ub!!0bFk,'/j'HJ(5JIulf+W+=2$Pm-:PU+'2nH$d&>!^%RDSB"_*%R"PNJ$aQ)WE.DRA?>50[1,:R.&mDS)3?a7C.ZueI1;7-)cm_Ltf1WUR7qnVC%l-B-LF?oR_W$^4QoS2(K'COt3<I(F\_dNg_W%hN%BKI]96=jCW$rh.?VJK[Kp_kuUdq.U&;7[f&U)+sY4Mq(0;Tg5G>&5jn5_7Z<0PWJ]%$:Ebke>8;r=`<I@hbgN2s,E@_k"/6eQE<$%HY&6pZQ0r\)(h_O6VS8i%OX9YQ5!e5PdIX*A["9eB31m<\PX,q'Su9EN+,A1_-uWJeDt.c?lL^!njaORV=>quA"_NV"XZ!:T'/Cs%n@^OjKkrktj#jUs(g>>Z1;m!:Vn!k47SHb>!J+b_#H&"e7M`-XF";6kQt.-,>EOK+.B++'8l1*CHJ&$A@f>8jP_V6<eRqTr!$O$n%P\3CLk&Bc)f#L0Om6mCFeDDs9O]]W1`Xk#BJFne@bUDP^e=%FIJ54:^[28m)4YoI0Lkr[Efc[WcOgBt78]-W=A?`!sRSG.6ZR,uj%3964$2!&7Z0T!>M9C\GV8NV+ud`@V/99<I9X9reG`&BC*%e6^e2GA(e\=/FCMDB3D#Wi7kEXWpD'QD-<9mS%Ge-A]h//a\_%*V]i%!MN9%afBV"MRk:7N/.UXr&ZqV$Uq(AW$fbG?n/L[IR#Y)VS4ab*NJ/d&<qiZiMeicQIfY1?Sn)m(Dc&PF-sk4PZ;qK@%plDg4DQt%;ZJ5WAZo^3?7_Ce.>u4'RN+CTb?8*C`o$pNkDNF#KHVLbnXF;Ll%64,K8K=^<oFBU`a0?("pP&?p-?=.['u^5+$)5IpbK@o^OVOm%g`aIY&55hX0R`T_,pP*)X5APt<=9sRn6jOt=etm4X7s%95%9!s5V_U#*p06u,*:1Z*`,0Ml7u;;5Y,GT.4oL-YUf52_iXPOR&Q=+%!XJFTn=^.KF4>67KXeq$,nJ("J`;Qn0!h2N-hPVbKd_WnWXX9F*,kJ4d:F2_iPZECQ0PZg&OFW'dY$9M=e0_+?J;bO.PDLKhPh,I%0/=I+euBj,$KJ2l@^8tH1olss.c:^S,r+.4X4G@!8;3j;3AXm!!?9GcODuIR'<rOeSS%X[4];i)5;3_T5Qt\=fN%#""h<D#*JRK2%4s<SOUoso]D?q^mK9;(b:O:9>S<1:NW,Kp[K4&L8II1c"+@j8K`MJk%o!Ep@R_5&-N(3.Drdk.p6tKu\ea`JB^=$gXk4kK)D_E=D%K(0i:,gb$KCDCOG0Ekot@]Y4A<>4^qc[l:9dIe[?KpGT,PK;%A61Jd8#ut2sQr-T#0pqVP'/*;Bb1!2?QoRKl8)Cf1PgI'Sf._tS%9hK5J+NQ%MDpQ*l(IYYjK4Q63D.[Ld9FTR)n5eLlet7f6B`<f6)=7H,5ORp7a\#MYEI;2-@k/\^$WU$-#d*_K>-SYk95H]:6?X0:%Jg39.2$^9dat:%W&eQ5sP%H=fn=sp9WK%8Wjf>Y&IL&u*[4l8!VT"RKH4r;)h%1VVUk%f:@3?D>,c>8Zb@uPLRi?Ye1_MODi2<2t%XtLY-3IJnsL;,@jqB)4FZiq$q?nfp3,]953RT[rW#+@$&)BhZV+W0&I1RT(=[*5nP,cI,^$h>>-7%\4/TH='Y%n!S\@)VLLoul;Q%Z?Phc$It3F0Nr.(1BaY1+RDH9Tb`54.U=ke;#Sp1'i@$L(qgFuk(ZLDq?H.W8X#<&,S];_\Jq+XGf$[dTUfba6WVNXaD-XK1#k)X%`@"Bt^eG`"#V(s[aA>e;1UC1rooNj%TO/OI;&VKt6qlZs$0c-%k(9Gu(3KYnM$e#.F"QMi!g'@J/QBCQ];Y#7oT6,"&*[/s6s2pJ%5+l$3.KC\A1EA:YE@EaBD0@V&C$-l)[:cMN%X'[&M.p#:0N'kCXU>p;BoLdZY9:RKN\RQJ(X7HTZu`q#8#Lo`%l[Upbb#p8BmO0!%<fLso6Nq/fWsb@blR^3-F;P(9_'8_;2.(:A7T7Ren#q7.ms;YpkW-<7:$Nb?W.pS,:bnLV-9T^DJiG`2:U-T5'foH*9V'5$_l=j2%@:#TG(X4so*C`O&e!t(=gc:c%33(3@-u_,hW`C48!8.eCkcC2<W"_3:_EH>IRMN6RJe_Gk#U2R&I&R;tYCT1VfD'YjnJ'@"">kQI%.IgP9U`gru3ZnjP*:O9H-drI?bS&]!5)(k4;;PQ0VWpE7-`.0"c&1Wn1:C#\4pc6nWW*aR4<t],d=m=$;?9S&\BT5n"0HR?\S;=2%K:7RBRQ9PFfP5L;!&D=ji,E5L*i*>r"6uoC"5b^`Ted2Z110@W"Mh0:!tZ28kRfn:$2mPnAV:d"QEftJ&]M$u2[jK;\/frq:k5hT%F6*7Wn=2pi=tglWZtP(d(3!'r`%phHVdh)fGm;.$9PQOZ!Y&L@^P68o_o"WsX*8uP^ZU:XTS'f^JGf]Q3%bQAJHc<,S+g_kHAr-;%.(1MRY[C-KFDZ=<ois"4p0JbbP@J>.P!BB)'\419i*%Wt(9:GJ9dGTe?k1(%bDNGfI?@+J\-^]^R@/QS%=Bke2cNQKgQ']Jl_o]0%CY?(R6\VaeF"Q1.71V`caNsqfLG+*t_RKRsZap6.3C]!dhGM=hdfB1S8N/17FVkLF>(]kEbb;!9=t\6fIEsr$<-:W(TYjFMX]21_%(gU+ZAIC3U:%\E07*H??p_t@p@$R['rWj5q7qCR_dY.1%Rq0K8/F&%MMhnC1QS=+,k6"h\)OK11K-&rcM%RN0#Cu>V49tG"Yuo>,%\JhQ2>#K^/Q<c7@J27r5ST'&[Tp,C(.14%\G,'BGKfB>t^p6A@(I8AioAEK74V!N;:V#K0Y"&C,p(26XToC%gK-hO?NY[UkMON5,%Sg#)GU/n`)l;)$\ACVcX0I7!7<5l'aT#Tq9TL`URl>\ME2_9H6JkO?W.]P(8-4KfSk]HrTd;">_Z5Os$N3#kGb`FWGO[iX9A13F<%`/LX19!$N^Q7=K@Nj=LA.%92,VMD%O3@cG1EsX5d+Yf=HqNpE-@E0!&[.=PT*mJbJlIfXgV5Arl(iR?[;s6'D6@_YrHlOYPULl&q%p,YK,Q#uW!R?I3M9s[;8I8p0-\T=2pW^RrPFj?;f_6nmlMJ3Gb@<nb[:+odcLtpC+"!uC4pbTh&XE@sSrXMdTW>H)m8e@>KU"Jjg%Tl#I2OV3aX`N[iS(T9Mjoh(O=V+dWdM3P(M@X])*7:51T/8'\dMG[_i_fq\a9;L'X:f)_S5ciXi,S^f8SE=-l`KeJln?1>%Z`YCE%]?DG]lP9$O0'^3k.L44oe3#hnHl3^D3+\)*,YK>IR`DJ7HAO/YY]pMifmm[iQ?C)CU<l^'eQ7fg1A(h'>VmE?S^XVf+c.>pRn*so%]e[PL0fBc^8E_e66E"S)qnS3Je8`=A>c]proFn,[[OR,J1r'E9N=WNnB4e]uRZ?cNCC[lF[A+8\^0(=r=+:L^(f:a_QiJqRk+F1f%e^]M5^.6:C,sN."(9:<ccZ;NB3f@S"HAh<t=p#%s=V.IG>$iZ"Bj=Yib(!EdJRkBfo-#&E4dV8I>4;\a'KjE`5ub*57)KciOQMMU%161D$B#<Rj"T92(5op(@0&b52M^eil4",ah8e4KCpb[WCQ)KZr;4kM1V#GOQU/_(73n4OL'lcLsJC>&JZddsjN>h>^W_4V*qT567%<?bNT7nbq:NneLr]5$t8aV:MQ3s0^2B)sQgY\<kSokA(Bm.>oi@)sfD:fn,F"2R<=f$l6_Ar@t;6Xg8Z<;V5?Q;#UEc^B@+BaL5J%cf/NU0#@'J8YS6o0)$+m(-XQ$e6-%El4!dV@RG_pH68mHmi%bJWcb>=8cL3YB^XS)Om)M>HHY30MDrQ0UW.hJ]$$YPgHh2D3Z2V0%l)H.+RGD\YLjCOJUW7^*Rj0o9>\$nM?WRLJBPMikcWr)c<4?'#l?L?KAoqY;,t]t'(-@FeVs1(_3%.?Cj/^]7adU\?iV"D2m=]ii%V`Zin-g-k'V)8NDHr`/Up]8Fd6tR8OC_%4g&29:\L.nK*RAZLFkcMm%cn'C.0^K_^*b=<*C!iLfb\]UX!-!c1>sLR)J1W1L0mj+e%Qinq.%;W9&mq4AH?W3eh_qD(E.RIQ"Lio0hK?Zgs_OMdLOkGDF9>se5/@/2J8mYIjd';#MLc7^>%7@0,)=g(h`_;5O<R+"?6nl.%%4I9Gi%*3>.D"^7YR-GueC*f-I>#uE_0>JH!m)1SlB,(t<CIE_FVPju:.OUERkbbhVonk5gl;*h9n71-dk#,VS_i2:?W'd@(<lR6G%R4U[[Z+q9F?5#U\NY=;'O_u:*X=uX=LQ3-9nN=tJE$^X<9PB-OKP^=8Q@qKL/g0e^YXXEPB<5.:)(A+eden;>A6(mtjIOar7=mQ'%(?!G'K,hK+d6,S$')%JhZiJOEisZ+DCB4dM8>b)1huLVP)pAV"M(::fCgP(GE7+p;Ojq"0(Xm$MN^r[h2*6]6KJnFV8kbY!7Y*$*%B:Cu)XAID,kHn"poB^'^V5/1'MVFqpPe,IL\i+>TC-Aas#/tUk1u-3MqbYU!8eXpqge"/\qj2f1\\M*-[KQ4o%7e=AFjg=,>Q1Q]%XWpeCL^XADaGXM"H:9r;c!qj5I^eLE57&LoI7K>RYW>7r-4AOK.^IanPGqZRD]<BaXYtOPL31j.O62AsrVu"qZS/26CaU$Y'ZAot%S?eG*0Zr_u/Jl8<QN[b+!(fI"C]OK:f";H#^Y<6VHPOuVeNI=9a\2>VGXt8f%Q]f2[E7!.G2Hu>pMr]W1SBE*J_Rq_,bZ"@9&6lS%nXc5oW^?+h4A)ou+Osl_Au'l[>aL9fPVdWo.Hs]]jk!C<5T)kY$>nI)O>2GMoQKtCa$NR5U=]+)7@io=U+M?7q$ct+5W'mY'O-:L%C+2o9Or:j*%gG<aaL+(6$Kt_t6rbCh1TRP0Dk".G@NTjG/d:q,R\`&\>8ke+98$rc<h\M#9gJnY&aKE^9tCD['9`_m("s:XaE?mZ%9j6;-N'!r>0\#3mW%tt.)<mF.Q>M1snljR+6AV@kghnqSNoN0Dbm/(rB9dc\Vi5WsW#:$+==eV+1h9`g+]19??-:F;iaU<]ggU,^%^cd]'.'#!<+AFpaGn%F=nC:7e*fGa<p3X]3'(gksZ6d@_WpLk*b!R+i!1]qVG6kke4?9u=P6H5nF]1F"iWT+p]f"WE!60S*2W`nd%W+Q4VARq>/CN"lH)D=BkF;fT=e*E+/6<"1fHcMr@d=EncFW]h1[%VHNB=:W^)mf_7_$2(M+%k"*"j%X_<O!OQ0i<Ak^d[,F!=-VW%kF:E[!`$ep3TIc[=ICa$7g["RbWMl7fdb,&nsm,TULR2o2RC?jrusfUFQBE&1bP9Ae80Ze[//$"F)I%kT'j"p]i]5!\0!1'SIECt%lSte&%Br&Jo868p:nJ-7d2K57%RV0H^T#'OJ3M"5/=P2Q8P9S5O#8?/[;d(YW<e)U5i*MYYH.i\2+:4q1iT>hVuc+a^rlTfd^fJ1%(1[LE?Pff[+Bu'&_;9\_NKCN2e;4HBVMb6D4":t(HOWPh-:nYdeG[n;P0t)lWA2Mj?W4>;+OAUI0j)F@Q:Y;@^ed@b%iHK`GmMui%%GmK*!/eo['toHu0q4)F98Foo:=YV3eF/Q9OoXeV$Ze\:<ZCKmc*JFpmA16d0.nMK0D[Q47Y*6g#\<uY#kVLD+EitQ5Z]B93ciXq%Z)g-Eg)#;rAhH][Q:K#Po9q<G[5E45>S@/JRe3^#c0L+aHtU3LagEX,?<E*iQm-]4qi#Am]8/1FZ:<8#$HBMEp=X&%lZ#.pd_M!E%\2Om(0a;!Y/IR@OQ`(JM*Po(?'e!M`]1-3Je0Vs3.IXZa9uOJ12mM0#f>M\s/1#BId4+2p.fkhMo,fcO&$@Yf,K&Rq]EqS>1/+,n%$=a?j4!%e+g.iYrai.kq6Z%:RIpO-@K!=OQ^*Pf?3'0[<+)(s0%lME6\m7UtGoO1E8pdiEj7N1O2TTUbB7qVT,=VV>*:'#)M3<H;%FTjU+Jl/4jNPuMQ[N/#s]EUFL<ZsJMXan\ZONK+F`(T%X_DMTT"40G(=NY`X!2?K0]WItpp%_kkc0RWl*UXbldMAk<10L)Gn3Kh(%bqV!We"u/5[iERRjudHPE"Q>Oonpn(G\gML#I*qs?l[uugZ+s)YWgk/Zta@&k6=IWN#@hL)Z)Vi*jf%ND@gt;KIgs+2HpR'G#+rJ%)mf^4h't8F/H_ep9-(Jj+SF-7hGWMqkUlHBqJGqhIGbV)iL=-,Cla4?&u;?1^Bt$NLBCKXDjUOQTSbPo4drtCrd3*ceh?P3TBq20%^`K:1<JW)NSa_PPTCkMC\%W[A11!jc^]lgi7[r5#1kX]sf'Y:'0sK")l"WQj6$d`dLMS^7c9aY:\oPG064ItFLER@Bs&.AM!,kW@%ppZ:#(`tPmP_F(^_?J>O%r;9FGSU!,p!=iqV-d0RUFdiVV:oj'_1F$`1@T$KPbV@@&I7&'\PdM>,HJ,\l*=buFKu*bqJERiiUqa`%:g(1mFb8?K1>U2p0bUPP<.i3Fd6KEoUVt;%^%IheI3s#7eb3?s%2rTe6T.B?/PLG7#u?WWq!*>,T%gru-2fIVUHWQ#g8c<(^[6$f%;^PDJS.ol7L]mB<C-4Upeb-YT18pI!Ykk=>9WBY=-](;>?&bWlU7MmK%O<0=@KU'&*D!k:*KKVLA<_R4lQHaK0$rX?1!fP'Nicg5%BQ0ZMI1p?B,!Q3_J5=QT.;^-E^r)ZnF,KA:**_7:s+QVk6MDq_M(l,KXt@\0I"@t%boKMI:JQt@ab]9fpjc#c^)>`'oRc@uQiWoH%3N6)KOY$4JDLK0f-1-6Co]%5-C7lpD+se3,1-Mshfi!7,St?KUQBRV>7JbmQ2N+uh5\.VRK+r8^[)SV+lPulp0#fJH/kW#EZ5h9-%!Th1S4jbNE/cZPnJ]pujM=<L2!RSsm"b`Q2_N%Ja&>=f68?!@OAi>Ob,".[5.T'Tu1@CbcHq$8U$q<IU93R7WR^e[4,!.e:g2U&<%lX7u*KZHiETQtBQcu7`b.g?$XnC&BLZm>2l>'[?0B%F%K4HCS8:r>;,GRI)IO_ti%VU]KlBKhb%_l:"3!jlU((jpaf-GsBURZhlj%h;*7DA%!R>k\S3VUjAp8[mHthCtV:28\;T*]5>/AdWY*B]l3V9m=!hrY=G+b0XbSsHaDr1*SC?I'W!Ip$\2078r-VaVZjN:!c9g7%mHFB.C>t:jFVQJ^bjJlsmt<#?/5IkOX(9-9UWfi`bG$S&<0:d6,"m_^)@9Wg([IOsr^n*D7Mm^4SI;U_`6Ll_TBR_0D1$f4+R8B'%Y6hB=(Y[C>[B-H-c*b/F9!MtL*)SqEK_q;4Mo^])j(2\bGj&YrBSJNIEe1HU]aDNBaieK)i]'YWAm,)QL9Jttfqnd@f$=9:l3nA:%.*5W\/>W*;8[[tX>FH^#`J5UV!u;pjYk@TKQq;9I\.HEq92_r]f+rf?`(kF.j9mlcU/<WC#h=V-TDQ6:Z8mY^e=mD[DlL:b%V_&@%6Mn\QCe7lBeB'-e@8gr87BWof55=P&qd;`@$mnXOXWP@B9VA*&<?%07NR_cdKEcHE.qLu7R\n%WM07588[EHCA5,^IlT!T'$:(p3%Xn`'VFAXhMZY_EX@3fK>VU8Y&c<I&LlB_&EdOW,gOC0]i@eH]_)ccCS;2nE71']>p6d6G>"3iSe8Yo)6dVNr=_YL2TP\aoe9ZdKN%/a2L]C%,lN#+K,R"fhei'$3WlGUVoq4Vql`;'?N$=d+LXKQq!p2-Z()THdhcaUUbAf&*X'#Z!u539h"?%l[mKQJEI5Xj@iF<r5o'%4m:O.W"(okHoT/$aJQIQ6(6?X#.>?8%lZbn&LLq+6DmV3R+;lJ&VpJW**(7,c89^S_>(DIf2R"Ur2u\EeqZk3^WdOqNSAsSd@6[Q%h&_3I!K9:0q)$1F'/`,m>_UTLp6tU(*?17/J-?HBHOXGjB9\,$;:#^UcLo.MRKdU%MRCE;d'c=7iS30;*Xc[eXs=HR[rjo?60&K^%(ERi3@Z]us43oKb*@:m7/Jd&Yd"3He:7_@Qm3a<V+5a-7XMoldD)(EXqP-IcCRXaD%m%XrMuddup,(Y.$8[%HcPe1tf@7IrH?OHa%C.lsbBUMTRCU_Q3Eq!!q)<oUL[$@b<^+N_J2:uF\:*)$J>"6OtSb5L/@hl%rBMU:fkm)XbD%ZW?lT2Gcl9_q!#JbS6BDo<[6+#Kc%"#)YP$,;G:JFsE*H(W'7)@"?Q<R#*NlH(i6I2^5R:0kmYF1&S9_mTtUCNWo'Is]BqO2mK_&Lq@'4Pl:L%/g0W-Jd1!2iZ%]$SU"N%baCAfY%MBqA8C9H&Y6>lZ;sY/`@Q4<h8t+/_s$fZO>[>,eC\`CbuNe#g/`bHZ-m]R?)63&;@1tS\D<e9XO:ci$"3BU%!Q<KC#n?r%]u&)K.[sO6h'K-"@]3;a&1->[KHHkcbsU3eL,"G0`h+GZ*qq,A]+dH2fGWoW/DhKrO*,!4B"uf1F+QlLSYb30>p#IL/m(#^(ml%D%=*#@+'uqlsAfIpSm="'Gg$7Nd?Ced\71="Co>KZD@o]Jue)XT3M@+Nd,'I!U)HRh;Q-DgrA`1$]^Wrg'%t9gPi7*%\"WHjjLCK!c%B8o6;SB;MVX;Efbg\,bMEn#Vb?a3kj?OU_pB$Y6VA[onEnO@F=.r0M8K\"GaW,Tr/Im.i5CqYKk/Ci(b%@i<_it@(OTRI(tV*53m%-UVn$3."Uf;'HFta"jf@)%;Jf4(3<`g%^d`#PeN0m-)Q3#8]2j*F)`B5LuKr1,Rj$h1sPN$e_b_Jt/r&O@^.$ktP>3lta[p`CsV0%/Ek?AgIhDY$f^&hd18(0`'q#<6^Wi/Vi'EHX<i/0<CMOjHl3s(,$56!FqFi=[5\mj.Z8?"D4<`='!r609`t8,E1,uMmq+.j@(XFO%T29%:E^rrgBf9%F]ST.k09m\Ml*If\;G"!@^7,b:?"3nGm2m2'gI1S!>O8\7XG\JB^!WPgVGFX9;!Y4?bsb'Q[M6)%(N==PkuA-F%1S\8@3p1W2V&R0=!DKO\Obu^H9W2Cs!dc'UI8ok24r/tG9.]`'QJ"GJ_(TFfJ:RiNKo4ePB7?P'Q)ie;G1u)%5UKL7ofg?BdH5"V%a2tP%o!tG@Z5CAm7S4,6(Fuu^Ed=(SbQ8Y)>'eO,VfgX]]oG*gbY/D0oe()CJpl;rCY6\HBgc>?3K(=[-:>*tN1W$`(?^g`%&MKN%m%NLjH!aOD'pDHU]:.J[cQnt8PQh"Z@VGg@8a=L:NA0["BC&HH8KVsmcQmfABQ"Do&tD9sFXHK>nT`:'Ua=`7d*EuI"gi,p5Egnc%3;(o(_XL,Y>)!?l6O?k"?+&2agj)kuJC*aDN/hhV]@EUN^@,L1>=.$[_.54&$1kCJC`0B-MAeR\>_BJ%([Jk=eDK_j=2YW)#,;4c%WmOTgcrSm)$n"m=Lpk04ZgWZJ$(*BhE%ETI2IPp2]$0I/);1G2nje]dX<^$@eF1nq8F9[9=mI=/'>Hm$j%=fYQJ^+L.OnF6IPIfO%:iP*eN9psOZqj8Pb_jb;Nb])=kF'A#`i['nokCD=Z'g04<kM%#B?1063HbUs42VNVlhV9$@kPsGWcZ_]L41MUK3"Fi7!as&"0;8s%K'V67f;_*4p)2&R-^^BJcm69t10ge$cJ!],.YrLDE4?RYMg=he_/ZlZ9%T_t1P!@7OY;h-`-QqGX/_^%RY=@gd:\%(XfTVPp8(D)%g?(!>pFdGZ5(-G3.^mlMA9hLrdn29EYZc0^XfE'L(B*k<*RgDu/ooO3IGA#i.irOhBEF&EQ@_2f*ac:;VudmHd(O8BQI%a#7K%jE%MYk3BJrla)[FF9@W.hcslLD1`/?PHZe+!!'O4IJ:k26kX7kC3rY>R+"B@R@LFsl<GQ<^9,4-6bL)3`s:?;r[SE8iCIPRmr:0<PP>%9<eei@C)4+pdsdte[FKs"_2C0[ran,c'Vhp0]b;hN,1GmaYjaclWE<,HC_kP21e3='5,DF$K?e.6GfO*5%Q;P3huT)IrE]fM$4_*%g9O/IEdYPNfk8[cYQM[2F.<G/;+E>`=MVKW)`5Xj+!#+M7Jk_*Ksh*E[,DgVB!8R!`26iM632G;CM6A"5gZ\YGA+!o`=X:Up43h(%dnb\O_[RGqD,?i^r,A6!rq1,0#ROCk8hnhKTfI/j/UXR$@KXJ#F)FL$Q.9_F/&?!sbuG#e$WLNGB0=W10HOsRp>:8[As`%ra$EMq%OLN6uMbHnCHlV_3WSHm)[IrAH>GuXKK=TpO*3W65>HH4FkLr%$kPEK3J64@(+f)a?bb&X1q.)7YZLJ,tA:;ne2+)`&f+NW>.-RRJ%gO0F6M^HG5.0Li"FG%!!#IErT8R!M13,/9:?GA'q?i<TVnHr/f^BMfu\^Hc';"n2"7d^GbAiNH7g@aD3/i1-Y+DPNtUp].)l^YdE%+1TTioprl:#d#hMM3_eo.[u!8P=gC2Q-ok1H3VlGLp.AqNB40Y'Uc<$,*dcslSmL"fQa@b0Hu11%q23TnFrjdaUW6,O+UX."/YU*%)hbt#m!-ED/FtDO#gNNqYaWd,m!r1;b%@hE6#/U[.+WX@5:P(rqHUe;=eY3_fu(;2;`kgnjY7Q5Y5?U$6=b,4cI02K=L6YX>rtQo%igo7pU%*`N%h-]Le^Y$c^h\gq%+??>Du\BS:g\i*n/-Q'WW)<2WCWpX(QAM`:4k2+]p0LGfgj/>*FNeFli87s]>pl"`pCH73:;lO%HQ9u>!rPT&N&n&W#]UR^@(W%+c`H"`)HMDP$<%h/@<)"KdgDfEW](g<JOdM9n.FYdm=659I98S&qkMmX%X/*Z%fH\%:ckisVqi!;%&2V'?KF_';(1*'k&[3Lm6gY.$+WfTj?ostW_qPd[Vq@%!$M=M5^?l7N5q5b]<fcbD],fi4@XL3ZjJb&7nQ^EUj3u-QSPLc*<2B(^%*HV!mI(I4CgZ+qJriIe)Csb\d&[?"%=bAt$VI*,ZOim[XCF5Peh'j')A_S=nSLXS(U&&u"=a_;*flk;6!pn/"=NG54'0kG:CqB_q%c&o)fTP^<shaAB,?.#[*@Ft&:Q>+-:Q`+(ZYV3>)`+rMoAoGJT;G)5$;jt(rA6H:O.E`L%o6)(J[7aOlC3>V(O*Pk=%+hjTU=I`G%M::VM3>t-P\7RtTb(P["b18ou^O>HBX't@@dQ7hjchc=lA"\DO4/*]LX*2s`4DQ-RT5S"o52EeVm2fQZ2Iu]!b^YiZ[`9Lob),1&%>,@cm<g^H]VSoRu@G-c)<*%]pMfTb@(`?r:rZoCPZh;B-K+Ec0l@sF:Nf`s:Wakdg[gA!DDt=rM?JhU:AT->Dm=:=?QV-"BZ):b>%>l:%^,M'`Z)X_EP_:QC<bnp_D5^:@#I2\LHL$Ek/MeMb1#G_uS`24Gb2oH3@@;J$YL)IAY:Wo^BBKJKHXCI`CqU!hr?6,4pfMf)H%J1JQu^]A4`i!NDl8fuka\7#m7)!k1<a'aVtU"<Ut%?WO`C?2EC@0bL`3'rmg#=uD-%:&_64hPiUAWD>".gPb%N61q3*N3ee_joIk%Z);\NBb(b/'mrf4CTQ$!TLMV;)Hj-\Iq)7ujrOnBne'@!?P]0jGcY5SW#`U4J]@MGR'JgM4/Yq8q3k/;lm:^_/ZYH'X\HWN?dc=2%5&pnn4u*CCL4at;+tV>_j"@[c6m#]al58^i<"U^0BC6J_*h9g'JZ0BsM[^(P5e?C?$EQ=%/G,Blr3WPN:ApG_b4.*eG3>b51k%L.%-/2q7Vu/B?Ba5tB%[k&1@HKk=+SE-q;$8&n\AVqi;]VP[g[)&(`[:k#X4bL1$f5LB)(!dN[gfFUp=3jkf>526fgd-Hat+d76FS34%D>MoXNVa-qcjePiJ#$)`#%e\p>r6r2PknZk<jXNPVj2@4U1+ER2k[Xl)pZO9I!sc[<+accipF#';\iF2iWel:i>OM(k%a$8U0Fsh%eT+[!oXJ/F3_K-.MttQnkQB8!bHR,%*O6KjYrcZ9![C!JSg-PgAbp9;^4"oL1l<?Ne+Qo1Bb0LRg6QSY2!=Ro[/ou<!3`#:g(Ml3%Y6/<pId<QZh8,,*/63Rhh8!JoiUt#*P/8DF@h(oQ9F4_]a%Yd`WN^3@#DWBamnitO<FWsI[IN5$<!?&:4Va1<S:Xb[c78[BAcO&P%2?h>J[:\`9m7Ln((%OnM2+E#h-tTf`HkGCN\BPZOZ,V`fZcG9)k-j#Xba"fX.8>DgQeCGd,7pik(?6r:$V_IB@++KRm:eu>UPcga%;&2R'TrIRi+>9VbCH;>7=hi4q@FXOaAG%mn$rP7Ye?ep]AXfhVI2RK3C:#Tq1EEC$HHZo;`3m:0<j(/8\(tb@CW#?<;R_+o#*"\'%=&V-]WIL`oJbVJl9nfSM2P;RO"&u,>!9rWa"'6DML\IXE,T)iEd]),9V!J2-TLtK?-.j8sFfBuHKZO9pjr-OcV1*$Zq*sL84/4Xq%8-c_MUgrO.)$VkZa7-V$+CS.ncc5As)6i9&fU_<tQq8n%*hLsa`YE)7P>O+m)b80,r+'?W<k^;m,,.,IN&!H&]-qh@nlY6LpQ]j%%qF^PEhSl!3j?$<pje.o6Fd=`*?m-/(Q66s*eS\2ra`*6B>&E"KnC_VbOrsH-&Z[a[?ALP)fL$P[keV*''$u:p@0Ym#f8OuSa'cga%(a.k%`%RJOkM)>A`bFb=N3h)hlSmMFp/*nJ2ocD$ClcP7R%aEec+QXH))3Y8Wa/pl+2IYC.i1-BbqaWB%igi$UBSQ+f#MA>I6aed%)_k>S4&XVS5'Bpfq[C'iM&&-`=o#W6XBYCsRU_f-)@IJ9X4BJo"EPLZh(,:)q]5"RreRP]haam$I\0!:pA8+,\R2U-Y1H`^6_mKk%op(2)e2O%Yq>mUt4@%&2D;_i+lbbe;<sBP0\T1Q^bo!Pngk!Vm3t/\`())tGG\sfe5E0]nVk7/U=f5CA%.-J]K\rX2^ue&]78mfM%iJR[O;UB=U`Tq0J!Rt!!d$oHa<DP&05D.'1fnCllr)aL9X5E,tg8q7T\0l"!=MMj:7'YC#.E`H.lBdl.8AEeTXSA4CLlGm5jfji+%M/r)D^D>Y!(i7]2,ZOB?)rc3*FMmCk<aWQkX`u]Z;QI61P*0XkBXSuCPC;S\H.>jC*?K%#!b5r"@')h!g[Y\\Y;`M.7lc*O?+j$l%1"rU[k7nA6W8p=NZ$OiM0#$2?<PV.4V-T)IA"C/Yp(BoSPsq&,[Mg8c),Nde,gX*N4F)\F,&"UCIMKG!'L+dr+b%)-@JoU4fh3.;%=eukJ$o1ts9hps'(7/iqT(Si`_ATA2)?9t/1gQ<gM.A..iA[Z%p\ebl3W`OA)2&;+Lo0Ah4St(/I5;nE&Q:7@*=pRWnG8ii-Cg+a%kKWE1+'#s"C-"3>2[s[s>#&$?7lqpB7'r!d)o.8fOh5,sh7kiXfdgiMWhs)AJ@j%CeZWuDJ?KL4OPsW&oblFBIEk@>CU<o<@s56(%bP'a8F*@4qBmYu7J[3t@p=Uf^L7+>#&>mFuES;nO=`d-K#@OL6Zth#e!+m1gI]jgBYVmL@Asi/:(Y]r$ZKk[Zes*MuJ(OLIYt%=%%d-B4\-rf@OJ>VoKQq_Q;a9:Pm\>JjR_`ZO=&_6[^XQf;f;`u2N<G!-H8maVa@kHT/?asg=(D-'6i+:d7.6bbfcb.f;D2D2;B@\_7%=7P!qVXo#Q<.57^PS1RM&&dc-S'''sk"u;BWVdaXX-%>>"oT?D[!X\^KIr\:13rp$Z)`,a9l"gM`m<O[LqmMfa9nA%\`\R@q08uV%8L%as'!rTnIltki@T^n/Q=QMnXkS*T9)TY/dunlW@XBZGrIKtMQFkolfr-5/VArjN>%'+_dB0I_KM3DZMD-18aBg$4.O1hGfuL6X%en<@?':iZ3>X]0SBjZRCB5OHt7ir;K-rq0:M?.F0e&H9Dgh+na$@X<FNm@$/`s.88+C-pJ=,C?f=U.YHN+m?8)g3qQ(rH)k\nG<_%5&^`V6gUoEp/p\G*]bD5':W9EB#>nD797*i5Uj8.c(:Ppe21:VS%Z/VUT-6TTP1<N1Oq/l5Np@B,/.l3H8D!-WF99t0fn2kMnnss%[Pr5q$u=I>gZPFmGG+3F,=Ie"UTgk6e!iLI3P.E=c'Y,cbZ(N1Y,4,g8CO%5X<%oFjkFLg<ssHlB>cWr34>m7g>$^AXl33_Y,#?C%#3P76;43:0QHjZ.gA?S=>W0QhA'J^!m!)dkiRF>O-$F_UoO_LlLShN^ajK`drEMIB@>^V;W](Tka!_[8IO9apdT%Rt1=b,Q6dQTM%QChhB`0Q#o?IJ!qTW-0\7'2m7'@\<eXdL8`M)Ca*=u.ND/B(>M>\GktMns17<COLUg`]UdII./CFWmnH6seK3fPugmF1heT.]S?,%D!LBA86p9`Dp>gAcM3rHj%XZ;Y'0GLGEWPp1VRAZX7=,(Wu_o&p-]VtP0?gT[5\)n\rR=im;,"G'"+M5n16qGgMFiN(#+b94b%h&%4HINV8b+9'ZdTFl><Z:Zp3!"<kKgF>PXms:LhuccPI=4(I+Q=qYME=h40\tBCoJX0)Dt2W.116MKo>bl1m2_G`ne]ifSn,ap9c1$%VqF!-@*uSg-]EkKjs9P,l<ZB@"u"DV&$PfT6ql>]@*`:F>/g,^WT^I%<9&2.<-KN)cgpq;<un=K(cEtM[5H@A"*s8[Z%cA?97US?%I0R$GQfHlUq@.Kf2#;B.Ci<TLD[<8Ffk$lEER<1CM5Fi]NL7->\r#'K\magm`Xf"`4p6qHL'4XYg?]8Ne4TCBUnkuL_t+;aq.aVm%^FF@Y[?8nq"f]g`=IW;0WQkA)qe_@=kJ$bHfhkU2jBLkmAh)@mhI1RAOR;e"(5@)d:`IDoeebVVc.*$;GQY'FmoLh6P/T+Q6WUQJ%bi[EpBsU#"DOY.mf2V-!HRBn?\GY@:[9khqIX1qZiJW3Q?PFnWIRq?C?hiX&_sRH&bI<f9>DKsXJ+7:Rb4@ii4assAeaqZon"5e:%4bDeZ?M)rEDa/ODb-'j(P2skoHgR*]Y?j@Ve>lNR%njY1l7[V^l":t3'OiWg^XN&r^3oV5QY/PMT=T()nn.LVi>9gI4iGP.L%!+_%\)r@QYO%gmHn.ATnCcjV&-)=``VK+P-Vo3bn>@X@]m0=qp;r6+T3a_ZY:'2XT0:(/:O\YFm/Q_;aidc3?Td"kq=F4X"sUP+b>4`-%nC-]Mrtj_aU;d~>%AI9_PrivateDataEnd