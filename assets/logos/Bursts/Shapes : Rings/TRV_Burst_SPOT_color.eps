%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: TRV_Burst_SPOT.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Jonathan White
%%CreationDate: 2/28/11
%%BoundingBox: 0 0 288 288
%%HiResBoundingBox: 0 0 288 287.9961
%%CropBox: 0 0 288 287.9961
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.1 x420 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 9530 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDC2FFA0C9FD08FFC8C9FD73FFC8C19EC8CFFD05FF%A0C19EC9FD69FFA0C8C9FD05FFA0C09E9F98C1A7FFA8CF9E9E9EC098C9FD%05FFCF9FC8FD5FFFC9C19EC19FCFFFCAC9C19EA75FC79EC1B5BB9FC19E84%A0C19ECFCAFFC9C89EC19ECFFD5DFFCAC1989F9E9E9EC28CBB98A6363D5A%A092B08CB57B6036617C9E92B5999E98C19F9E9EFD56FFC9FD06FFC89EC1%5A84A0C18CB58CA03761606137A18CB576613C613C619AB58CB598A67D84%9EC1A6FD06FFCFFD4DFFA7C09EC1A0CFC3BC98C0593D363D59998C993661%366136603699933D36603660366193B0937E363D368398C199C9CFC89FC1%9ECFFD4CFFC89EC19EC19EBB8CB57C61606160613DBC7661606160616061%7CA13D61606160613DA093613D6160613DA08CB5B5C19EC19EC1C2FD4BFF%C998C17D827BC18CB0926036603661603D7CA0366036613C60367D7C6136%613C603661767D36613C6036615AB58CB5989F7C839E9EA7FD4AFFC8C19F%613D615A7D93993C616061606160847561606136613C3D75A03D6136613C%6136A05A61606160613C6199B57C6060613CA59EC8FD43FFC9CFCAFFFFFF%9AC19883366136603684996036613660363D599359605984848584C3A085%848460845A8492603660366136603699593D3661363D59C199C2A8FFFFFF%CACFFD3CFFC89EC19EC7C1B5FC9A3C61606160613DA07D613C61608484A8%C9FD0FFFCACAA8845A6160613C84766160616061606199B58CC2C8C79FC7%C1FD3CFF9E9E9EC19EB58CB5763D36613C6036617699368484FFCAFD17FF%A8A984606F7D366036613C6036A08CB092C19E9E98C1CAFD3AFFC9C19F84%7D837C9A8CA03D616061606136A8C2FD1FFFCFC37D613C616061603D76B5%99A07C837D9F9EC9FD3AFFC898A0363D363D367D6F613660366084A8FD24%FFA8845A3C36613699763D363D363D7B9E9FFD3AFF9FC18361606160613D%A176615AA8FD2AFF84843CA17661606160613D839EC8FD39FF93B5926036%6036613C6136997DFD2DFFA8A8936036613C6036615A9992BBCAFD31FFCE%A0C8C1C79FB58CBB3C61606160613C84CAFD30FFCF84603C6160613C6193%B58CC29FC7A0C9C9FD2CFFA09E98C09E988CB58C603661363C5AA8CAFD33%FF84603661366036B58CB598C0989E98C8FD2CFFC89EA67D8359847D9A76%61606184FD38FF853C613DA1937D598483A7A0C1C2FD2CFF9F9E7C3D3661%3661369A766084FD39FFCAA8367D756136613661368398C1FD2CFFC79E83%3661606160615ABBA7FD3CFFCA93843C61606160617DC19FFD2CFF9FBB59%61366136603660A8FD3EFFCA5A6036613660368498C1CAFD2AFFBBB59384%3C6160613C84CAFD41FF60616061606159B58CBCFD27FFA7C89FBB8CB57C%3D36613660A8FD43FF5A613C60367D8CB092C89FC9CAFD20FFCAC89EC19E%C1939992BB60613684CFFD45FF5A613C6193B593BB9EC19EC19FCFFD1FFF%9EC09FA07C603660769A5960A8FD46FFCF5960757C36615A837B9F9E9EA8%FD1FFFC79E833D61606160617DBBA8FD49FF997D3D6160613C615FC19EFD%20FF9FC17C3D36613C603661A7FD4AFFCA366036613C6036839EC1CAFD1F%FFC89EA73D616061606084FD4CFFA83C61606160617DC19FFD20FF9F9376%3D366036615AFD4DFFCA8436603661367D92C2CAFD1EFFC2B58C9A3D6160%6160FD50FF613C6160619AB5FCC3FD1CFFCFA0C18CB08C7D366136A8FD50%FFA860363D7DB08CB599C8A7FD18FFCAC89EC198BB76A099A15A84FD52FF%8460769A76A099C19EC19FCFFD15FFC99E98C09F83363D36617699A7FD52%FFCA937C363D3661599F9E9E98C9FD15FF9FC17C613D6160616061A8FD54%FFA83C61606160613D839EC1CFFD15FFC898A6366036613C605AFD55FFA8%6036613C60363D7C9E9FFD16FFC8C19F61606160613CA8FD56FF84616061%60613CA69EC8FD17FF9E99596136603660A9FD57FF5A603661366098C0CA%FD16FFC9BB8CA13D61606184FD58FFA83C6160617DB5B5C9FD16FFC28CB0%8C7D363D36FD59FFA860366159B58CB599FD15FFC89EB5939999A07C84FD%5AFF7D7D769A99B58CC1C8CFFD11FFA7C1989E756036605999C2FD5AFFC3%937D36615A7C989E9EC9FD0FFFC8C19EC17D616161606160FD5CFF613C61%60613D849FC19EC8FD0EFFC8989F593D36613C603684FD5CFF846036613C%6036609F9E9FFD0EFFCFC19E843D616061606084FD5CFFAF606160616061%59C19ECFFD0FFF9F9E7B613660366036AFFD5CFFA8613660366136A098C1%FD10FFCF9EC1596160616084FD5EFF606160613D8498C7C9FD11FFC28C99%363D366184FD5DFFCA843661366199B099FD11FFCAB5B58CBB7D8459AFFD%5EFFA860597D93B58CB5C9FD10FFA7BB8C9375A07593A1FD5EFFC9929A76%A093B592C9FD0FFFC8C198A060613D6159FD5FFFCA843D613D6176C19EC9%FD0DFFC99E98A6366136613660AFFD5FFF5A613C60363D7C9E98C9FD0BFF%C8C19EA63C61606160617EFD60FF84366160613C617CC19EC9FD0AFFC998%C0593D366136603685FD60FF84603661366036849E9EA0FD0BFFC89EC160%616061606184FD60FF8B3C6160613C619FC19FFD0CFFCAC19EA036613C60%36A9FD60FF843C36613C3D7CC19ECFFD0DFFCAC192A137613C3D85FD60FF%AF3D6136617CB59ECFFD0FFF92B58C99767D75A1FD60FFA09A767C6FB58C%BBA8FD0EFFCABBFCB599A17C9AA0FD60FFC9767D7C9AFCB5B5FD0FFFCF9E%B5763D36613685FD60FF843D363D367D8CC1A7FD0EFF9EC17C6160616061%84FD60FFAF3661606137A09EC1CFFD0CFF9FC09E60366036603684FD60FF%843C366136615A9F98C8FD0BFFC8C19E843D616061606184FD60FF853C61%6061606183C19EC9FD0AFFC898C17C6136613C603684CFFD5FFF7D603661%3C6136A69E9EA6FD0BFFC99EC17C613C61606160FD60FF85606160613DA6%9EC1C9FD0DFFC898C17661363D3660A8FD5FFF5961363D369A989EA0FD0F%FFCE98B593A07CA093CAFD5EFFC9BB9AA099BBFCBBC9FD10FFC3B58CB093%7D595A84FD5EFFA859847D998CB58CCAFD11FF99B599613C613C84FD5EFF%84613C613D9A8CC2FD11FFA79E9860366036615AFD5DFFCA843660366159%BA9ECFFD10FFC89EA63D6160616061AFFD5DFF6061606160619FC1C1FD0F%FFCF9EC059613C60366136A8FD5CFF84603C60366136839EC1CAFD0EFF9F%C19F6036616061606184FD5CFF84366160613C61609F98C8FD0DFFCFC898%C09E83366136603661A8FD5BFF5A3D3661363D7CC1989EA0FD0FFFCF9FC1%9EA06061608499C3FD5AFFC29A7D6161849AC19EC1CAFD12FF9FC18CB593%99767D7DFD5AFF847CA0939992B098C8CFFD14FFBCB58CB57D613661A8FD%59FF36613D8492B58CC2FD16FFC992B0763D36603684FD58FF8460366136%7D8CBBC3FD16FFCFC199616061606160FD58FF61606160615AC19EFD17FF%C898A036613C60366184FD56FFA8366036613C619FC1A6FD16FF9FC17C61%606160613C60FD56FF5A61606160613DA798C8FD15FFCFC19883363D3661%366036A8FD54FF7D3D3661366036617C9E9EFD15FFCE9EC19EA67D613D61%60A193CFFD52FFCABB76613D613C839FC19EC1C9FD14FFCFCF9FC1989E93%A0769976605AFD51FFCA84597C93A0769998C19EC8CAFD18FFC9C89FB58C%B57D3D3C61A8FD50FFA836613D7D8CB58CC1A6CFFD1CFFC28CB0753D3660%3660A8FD4FFF5A60366136998CB5A0FD1EFFCFC292A13D6160613C84FD4E%FF84616061606176BBC2FD20FF9F9E7C613C6036613684FD4CFF7E603C60%3661368398C8FD1FFFCFC19E833661606160613CCAFD4AFFA8603C616061%60617DC19FFD20FF9EC0593D36613661367D93CAFD48FFA8997C3D366136%3D36839EC1CFFD1EFFCFC19E9F7C84606160A19A845AFD47FFCA845A9A7C%6160607DA69FC19EFD1FFFCF9FC1989E98BB93B5936136605AFD45FFA860%36613C999299929E98C19EC1CAFD20FFCAC9C2C892B58C7D3661606160FD%43FFCA853C6160617DB58CBBC1C8C9FD27FFBB8CB559613661366059FD41%FFA86036613660367E8CB093FD2AFFCFC298843C616061606160CFFD3EFF%CA843C61606160617DC19FFD2CFF9EC17D3D36613C60366093A8FD3CFFA1%BB596136613C6036839EC1FD2CFFC798A73D613C613D61997D3CA8FD3AFF%84607CA03C613C613D3D7CC1C1FD2CFF9F9E7B837C7D597D937C36613684%A8FD37FF5A60363D76997D7E59837CA098C8FD2CFFC998C19EC198B5FCB5%606160613C61A8FD34FFA860616061606193B58CC19EC19EC1C8FD2CFFC9%C89FC79FC18CB5936036613C6036605ACAFD30FFA884366036613C603699%8CB09FC19FC8A0C9FD31FFCFBB92BB6061606160613C6093A8A8FD2DFFA7%BB5A6160616061606092BBBBFD39FFC7988336603661363D767C36607EFD%29FFA984593D767C366136603661599E9FFD3AFFA0C1A0613D613D617D9A%60613C6160A8A8FD25FF84613C61606199833D613C613DA69EC8FD3AFFC9%989F7D837CA099B0753D3C60366136607DC3CAFD1FFFC27D366136603661%367C8C9A768359849F9EA6FD3AFFCFC19EC19EC192B58CA0376160616061%3D7D996184AFAFFD19FFA884609A7C616061606160617CB58CBB9EC19EC1%9ECFFD3BFF9FC19EC19FC28CB5936036613660363D767D36613660598484%C9A8FFCAFFCAFD0BFFA1A884843660363D59A036603661366036998CB099%C79EC098C1FD3CFFCFFD05FFC3C1C17D6160613C617D9A6061606160613C%609384608484AF85AFA1C985AF848B84855ABB5A613C616061606199843D%6160613C849EC1C2FD05FFCFFD43FFC89E9F363D366076B5936136613C60%3661599A366136603661369A753D3660366136617584366036613C603699%927D3661363D9FC19FFD4AFFCAC19E837CA698B58CB55A61606160613C7D%76616061606160617DA13C61606160613DA17D6160616061606093B58CC1%9FA77DC19ECFFD4BFF9FC09E9E98C192B08CA036603661363D939A366036%613660367D763D36613660363D769936613660363D76B08CBB9E9E98C098%C1FD4DFF9EC19FC9CFC9BCC19E833D613D8499B593613C6160616061999A%3D61606160613D998C9A5A613C6183C19EC2C3FFC8C89FC1C9FD4DFFCFFD%06FFA0C19E6059A698B08CB5753D3661363D76B58C7C3661606136A08CB5%8CC17B835AC198C8FD06FFC9FD56FF9FC19FC198C1C1B598C1A0613760A0%B58CB592A060613DA798BBB5C29EC19E9F9EC1CFFD5DFFCF9E9E9EC2A7FF%C9CE98C07B839E9E9EBB92C1989F59A6989EA6CAFFC99FC0989EA7FD5FFF%C9C2FD06FFC99EC19EC19ECFCAFFCEC19EC19EC1C8FD05FFCFC8C8FD69FF%C99E9E9FFD05FFCAC898C1A6FD73FFC9C9FD08FFC9A6FDFCFFFDFCFFFDC1%FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE 305 C)
%%+ (PANTONE 485 C)
%%+ (PANTONE 131 C)
%%CMYKCustomColor: 0.5100 0 0.0900 0 (PANTONE 305 C)
%%+ 0 0.9500 1 0 (PANTONE 485 C)
%%+ 0 0.3200 1 0.0900 (PANTONE 131 C)
%%RGBCustomColor: 
%%EndComments
                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic CMYK</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-02-28T11:57:16-05:00</xap:CreateDate>
         <xap:ModifyDate>2011-02-28T11:57:16-05:00</xap:ModifyDate>
         <xap:MetadataDate>2011-02-28T11:57:16-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FUHZavpt7JLFbXCSSwuySRgjkChodvD3zGw6vFlJEZAmJoj3NuTBOABI2KMzJa&#xA;mD+ZPzDW0vo7fSws4hetzIfsNSoKKR/xLOX7R9oODII4fVwn1efkP1u40vZnFG8m18k+0HzbpOsQ&#xA;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&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:1EAC443D44C411E08F4FF2B2A9F497D5</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:1EAC443E44C411E08F4FF2B2A9F497D5</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:4257F0563C2E11E0B798DD78B7152E72</stRef:instanceID>
            <stRef:documentID>uuid:4257F0553C2E11E0B798DD78B7152E72</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.000000</stDim:w>
            <stDim:h>4.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE 485 C</rdf:li>
               <rdf:li>PANTONE 305 C</rdf:li>
               <rdf:li>PANTONE 131 C</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 305 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>51.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>9.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 485 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>95.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 131 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>32.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>9.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -287.996 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 287.996 li
288 287.996 li
288 0 li
cp
clp
[1 0 0 1 0 0 ]ct
144 0 mo
148.168 11.353 li
153.045 0.282715 li
156.486 11.876 li
162.045 1.13574 li
164.756 12.9194 li
170.984 2.5498 li
172.945 14.4878 li
179.809 4.52539 li
181.025 16.5596 li
188.5 7.0459 li
188.957 19.1362 li
197.008 10.1118 li
196.705 22.2046 li
205.311 13.7021 li
204.248 25.7515 li
213.371 17.8101 li
211.555 29.7695 li
221.158 22.4146 li
218.59 34.2349 li
228.637 27.4966 li
225.338 39.1372 li
235.787 33.042 li
231.764 44.4512 li
242.576 39.0259 li
237.84 50.1592 li
248.969 45.4238 li
243.545 56.2334 li
254.953 52.2124 li
248.859 62.6582 li
260.498 59.355 li
253.764 69.4053 li
265.586 66.8408 li
258.23 76.4424 li
270.188 74.6255 li
262.246 83.7495 li
274.295 82.6841 li
265.795 91.291 li
277.889 90.9858 li
268.863 99.0405 li
280.953 99.499 li
271.439 106.972 li
283.475 108.185 li
273.51 115.048 li
285.449 117.016 li
275.074 123.239 li
286.863 125.95 li
276.121 131.507 li
287.713 134.954 li
276.645 139.828 li
288 143.997 li
276.645 148.165 li
287.713 153.041 li
276.121 156.488 li
286.863 162.045 li
275.074 164.758 li
285.449 170.981 li
273.51 172.945 li
283.475 179.808 li
271.439 181.024 li
280.953 188.494 li
268.863 188.949 li
277.889 197.007 li
265.795 196.703 li
274.295 205.308 li
262.246 204.245 li
270.188 213.369 li
258.23 211.555 li
265.586 221.156 li
253.764 218.588 li
260.498 228.637 li
248.859 225.339 li
254.953 235.786 li
243.545 231.761 li
248.969 242.572 li
237.84 237.834 li
242.576 248.967 li
231.764 243.546 li
235.787 254.951 li
225.338 248.861 li
228.637 260.495 li
218.59 253.764 li
221.158 265.578 li
211.555 258.228 li
213.371 270.186 li
204.248 262.243 li
205.311 274.295 li
196.705 265.788 li
197.008 277.886 li
188.957 268.861 li
188.5 280.948 li
181.025 271.438 li
179.809 283.474 li
172.945 273.511 li
170.984 285.444 li
164.756 275.078 li
162.045 286.86 li
156.486 276.121 li
153.045 287.71 li
148.168 276.642 li
144 287.996 li
139.832 276.642 li
134.958 287.71 li
131.508 276.121 li
125.954 286.86 li
123.243 275.078 li
117.015 285.444 li
115.049 273.511 li
108.191 283.474 li
106.977 271.438 li
99.4985 280.948 li
99.0435 268.861 li
90.9907 277.886 li
91.2939 265.788 li
82.687 274.295 li
83.7505 262.243 li
74.627 270.186 li
76.4443 258.228 li
66.8447 265.578 li
69.4092 253.764 li
59.3579 260.495 li
62.6597 248.861 li
52.2075 254.951 li
56.2368 243.546 li
45.4263 248.967 li
50.1621 237.834 li
39.0288 242.572 li
44.4497 231.761 li
33.0459 235.786 li
39.1416 225.339 li
27.5015 228.637 li
34.2368 218.588 li
22.416 221.156 li
29.77 211.555 li
17.8115 213.369 li
25.7539 204.245 li
13.7051 205.308 li
22.2061 196.703 li
10.1104 197.007 li
19.1372 188.949 li
7.04736 188.494 li
16.5601 181.02 li
4.52686 179.808 li
14.4858 172.945 li
2.54932 170.981 li
12.9219 164.758 li
1.13867 162.045 li
11.8779 156.488 li
0.285156 153.041 li
11.3525 148.165 li
0 143.997 li
11.3525 139.828 li
0.285156 134.954 li
11.8779 131.507 li
1.13867 125.95 li
12.9219 123.239 li
2.54932 117.016 li
14.4858 115.048 li
4.52686 108.185 li
16.5601 106.972 li
7.04736 99.499 li
19.1372 99.0405 li
10.1104 90.9858 li
22.2061 91.291 li
13.7051 82.6841 li
25.7539 83.7495 li
17.8115 74.6255 li
29.77 76.4424 li
22.416 66.8408 li
34.2368 69.4053 li
27.5015 59.355 li
39.1416 62.6582 li
33.0459 52.2124 li
44.4497 56.2334 li
39.0288 45.4238 li
50.1621 50.1592 li
45.4263 39.0259 li
56.2368 44.4512 li
52.2075 33.042 li
62.6597 39.1372 li
59.3579 27.4966 li
69.4092 34.2349 li
66.8447 22.4146 li
76.4443 29.7695 li
74.627 17.8101 li
83.7505 25.7515 li
82.687 13.7021 li
91.2939 22.2046 li
90.9907 10.1118 li
99.0435 19.1362 li
99.4985 7.0459 li
106.977 16.5596 li
108.191 4.52539 li
115.049 14.4878 li
117.015 2.5498 li
123.243 12.9194 li
125.954 1.13574 li
131.508 11.876 li
134.958 0.282715 li
139.832 11.353 li
144 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
142.121 29.2026 mo
146.777 15.7349 134.252 15.4839 132.493 11.3281 cv
132.459 11.2578 132.431 11.1816 132.406 11.1079 cv
132.398 11.1846 132.382 11.2637 132.365 11.3369 cv
131.348 15.7378 119.061 18.166 125.991 30.6108 cv
128.641 30.1934 131.32 29.8618 134.032 29.626 cv
136.738 29.3887 139.438 29.248 142.121 29.2026 cv
cp
/0 
<<
/Name (PANTONE 131 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0.32 1 0.09 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
109.771 15.5029 mo
109.729 15.4399 109.693 15.3726 109.656 15.3022 cv
109.656 15.3813 109.656 15.4604 109.652 15.5366 cv
109.417 20.0229 97.8657 24.5176 106.576 35.4438 cv
111.678 33.687 116.958 32.2715 122.385 31.2368 cv
124.49 17.3848 112.216 19.2739 109.771 15.5029 cv
cp
f
88.1147 23.5854 mo
88.061 23.5269 88.0122 23.4683 87.9639 23.4053 cv
87.98 23.4829 87.9917 23.562 88.0039 23.6382 cv
88.5454 28.0698 78.0688 34.4609 88.2505 43.6216 cv
93.0415 40.9541 98.0591 38.6138 103.26 36.6426 cv
102.797 22.9316 91.1587 26.8521 88.1147 23.5854 cv
cp
f
68.1943 35.3179 mo
68.1328 35.2725 68.0713 35.2227 68.0142 35.167 cv
68.0425 35.2432 68.0713 35.3179 68.0962 35.3926 cv
69.3882 39.6353 60.2974 47.6792 71.6074 54.9028 cv
75.9233 51.3857 80.5054 48.1763 85.3252 45.2993 cv
82.4087 32.1953 71.7388 37.9941 68.1943 35.3179 cv
cp
f
50.5581 50.3584 mo
50.4883 50.3232 50.4224 50.2837 50.355 50.2456 cv
50.3975 50.3071 50.437 50.376 50.4741 50.4507 cv
52.4746 54.3823 45.0059 63.8013 57.1304 68.9717 cv
60.8105 64.707 64.8105 60.709 69.0811 57.0176 cv
63.9116 44.8906 54.4927 52.3677 50.5581 50.3584 cv
cp
f
35.6582 68.1011 mo
35.585 68.0776 35.5107 68.0513 35.437 68.0205 cv
35.4927 68.0776 35.5396 68.1406 35.5874 68.2051 cv
38.2471 71.731 32.5264 82.3032 45.3618 85.2881 cv
48.2563 80.4375 51.4985 75.8081 55.0591 71.4424 cv
47.8608 60.3984 39.8818 69.3921 35.6582 68.1011 cv
cp
f
23.8936 88.0669 mo
23.8135 88.0552 23.7373 88.0449 23.6597 88.0273 cv
23.7227 88.0757 23.7827 88.127 23.8398 88.1797 cv
27.0874 91.209 23.2324 102.719 36.6455 103.32 cv
38.6367 98.0732 41.0034 93.0024 43.7153 88.1401 cv
34.6377 78.2568 28.2969 88.6089 23.8936 88.0669 cv
cp
f
15.7729 109.713 mo
15.6953 109.719 15.6147 109.719 15.5396 109.719 cv
15.6069 109.754 15.6763 109.794 15.7417 109.836 cv
19.4883 112.271 17.6475 124.408 31.228 122.485 cv
32.2681 117.018 33.7012 111.674 35.4961 106.488 cv
24.7017 98.0557 20.2319 109.483 15.7729 109.713 cv
cp
f
11.5562 132.442 mo
11.4785 132.458 11.4038 132.474 11.3262 132.487 cv
11.3999 132.509 11.4741 132.539 11.5459 132.566 cv
15.6821 134.325 15.9556 146.733 29.2246 142.258 cv
29.3037 136.733 29.7822 131.289 30.623 125.954 cv
18.353 119.276 15.9312 131.434 11.5562 132.442 cv
cp
f
29.2363 145.912 mo
15.7729 141.255 15.52 153.782 11.3604 155.544 cv
11.293 155.572 11.2197 155.602 11.146 155.621 cv
11.2236 155.633 11.3013 155.649 11.3779 155.667 cv
15.7754 156.682 18.2012 168.971 30.6479 162.043 cv
30.2295 159.395 29.8975 156.717 29.6616 154.008 cv
29.4233 151.294 29.2842 148.596 29.2363 145.912 cv
cp
f
15.5439 178.262 mo
15.4775 178.3 15.4097 178.344 15.3398 178.381 cv
15.4204 178.376 15.5005 178.376 15.5791 178.381 cv
20.0596 178.616 24.5581 190.164 35.478 181.459 cv
33.7202 176.351 32.311 171.074 31.2734 165.646 cv
17.4219 163.543 19.3115 175.814 15.5439 178.262 cv
cp
f
23.6201 199.922 mo
23.5649 199.973 23.5059 200.024 23.4443 200.068 cv
23.5205 200.052 23.6001 200.04 23.6777 200.028 cv
28.106 199.488 34.4956 209.96 43.6577 199.787 cv
40.9897 194.99 38.6514 189.977 36.6763 184.769 cv
22.9678 185.238 26.8926 196.875 23.6201 199.922 cv
cp
f
35.3569 219.838 mo
35.3115 219.9 35.2612 219.962 35.209 220.018 cv
35.2808 219.99 35.355 219.965 35.4287 219.94 cv
39.6753 218.642 47.7124 227.735 54.9395 216.429 cv
51.4209 212.111 48.2085 207.529 45.3379 202.706 cv
32.2314 205.625 38.0322 216.293 35.3569 219.838 cv
cp
f
50.395 237.474 mo
50.3613 237.541 50.3242 237.611 50.2808 237.676 cv
50.3462 237.635 50.4185 237.597 50.4858 237.559 cv
54.4194 235.555 63.8418 243.027 69.0063 230.903 cv
64.7437 227.221 60.7446 223.229 57.0566 218.949 cv
44.9316 224.12 52.4009 233.543 50.395 237.474 cv
cp
f
68.1362 252.373 mo
68.1123 252.447 68.0874 252.52 68.0586 252.595 cv
68.1167 252.543 68.1782 252.492 68.2388 252.441 cv
71.7681 249.788 82.3428 255.508 85.3252 242.67 cv
80.4766 239.778 75.8447 236.535 71.48 232.978 cv
60.4375 240.176 69.4336 248.151 68.1362 252.373 cv
cp
f
88.1064 264.141 mo
88.0942 264.216 88.0825 264.295 88.0654 264.371 cv
88.1147 264.308 88.1636 264.248 88.2217 264.19 cv
91.2451 260.946 102.755 264.801 103.359 251.39 cv
98.1118 249.396 93.0371 247.034 88.1763 244.317 cv
78.2944 253.397 88.6479 259.735 88.1064 264.141 cv
cp
f
109.754 272.261 mo
109.758 272.336 109.758 272.413 109.754 272.493 cv
109.791 272.422 109.828 272.356 109.874 272.287 cv
112.31 268.545 124.444 270.386 122.524 256.806 cv
117.056 255.767 111.71 254.335 106.526 252.54 cv
98.0962 263.33 109.524 267.799 109.754 272.261 cv
cp
f
132.481 276.478 mo
132.5 276.552 132.513 276.628 132.521 276.709 cv
132.55 276.633 132.575 276.555 132.608 276.484 cv
134.364 272.351 146.768 272.078 142.297 258.805 cv
136.771 258.731 131.328 258.254 125.995 257.405 cv
119.316 269.678 131.475 272.103 132.481 276.478 cv
cp
f
145.953 258.796 mo
141.296 272.261 153.816 272.511 155.58 276.669 cv
155.607 276.736 155.637 276.813 155.662 276.886 cv
155.67 276.807 155.688 276.73 155.705 276.654 cv
156.721 272.258 169.006 269.831 162.082 257.39 cv
159.436 257.804 156.754 258.139 154.045 258.374 cv
151.33 258.61 148.633 258.746 145.953 258.796 cv
cp
f
178.293 272.493 mo
178.34 272.558 178.381 272.622 178.416 272.695 cv
178.414 272.616 178.414 272.535 178.416 272.454 cv
178.656 267.973 190.199 263.474 181.494 252.554 cv
176.391 254.312 171.111 255.728 165.684 256.762 cv
163.582 270.608 175.854 268.721 178.293 272.493 cv
cp
f
199.957 264.409 mo
200.008 264.468 200.061 264.527 200.105 264.591 cv
200.088 264.512 200.076 264.436 200.068 264.359 cv
199.523 259.926 209.994 253.538 199.822 244.377 cv
195.027 247.043 190.014 249.385 184.809 251.36 cv
185.277 265.065 196.914 261.14 199.957 264.409 cv
cp
f
219.879 252.677 mo
219.939 252.721 219.998 252.773 220.055 252.823 cv
220.025 252.751 219.998 252.678 219.979 252.601 cv
218.682 248.359 227.771 240.318 216.465 233.095 cv
212.146 236.611 207.564 239.821 202.744 242.696 cv
205.662 255.799 216.334 250 219.879 252.677 cv
cp
f
237.512 237.638 mo
237.58 237.673 237.648 237.709 237.711 237.75 cv
237.67 237.685 237.633 237.617 237.596 237.547 cv
235.592 233.61 243.064 224.193 230.943 219.025 cv
227.258 223.289 223.264 227.285 218.988 230.979 cv
224.158 243.101 233.574 235.63 237.512 237.638 cv
cp
f
252.414 219.896 mo
252.482 219.917 252.557 219.943 252.631 219.976 cv
252.578 219.917 252.527 219.854 252.479 219.792 cv
249.824 216.267 255.543 205.692 242.713 202.706 cv
239.818 207.56 236.578 212.189 233.016 216.555 cv
240.209 227.596 248.189 218.604 252.414 219.896 cv
cp
f
264.184 199.931 mo
264.256 199.938 264.336 199.949 264.408 199.969 cv
264.348 199.922 264.289 199.867 264.232 199.814 cv
260.982 196.787 264.84 185.278 251.43 184.675 cv
249.434 189.922 247.068 194.993 244.355 199.855 cv
253.436 209.737 259.773 199.384 264.184 199.931 cv
cp
f
272.295 178.279 mo
272.375 178.273 272.453 178.273 272.531 178.276 cv
272.461 178.241 272.395 178.2 272.324 178.159 cv
268.58 175.727 270.424 163.59 256.844 165.508 cv
255.801 170.979 254.375 176.322 252.574 181.506 cv
263.365 189.939 267.84 178.51 272.295 178.279 cv
cp
f
276.514 155.553 mo
276.592 155.532 276.666 155.521 276.744 155.509 cv
276.668 155.485 276.596 155.457 276.521 155.424 cv
272.387 153.671 272.111 141.264 258.842 145.736 cv
258.766 151.262 258.291 156.706 257.447 162.042 cv
269.717 168.717 272.137 156.561 276.514 155.553 cv
cp
f
276.691 132.329 mo
272.293 131.312 269.871 119.027 257.422 125.95 cv
257.84 128.598 258.174 131.278 258.412 133.991 cv
258.648 136.707 258.783 139.401 258.834 142.082 cv
272.295 146.738 272.549 134.213 276.707 132.452 cv
276.777 132.421 276.85 132.396 276.924 132.372 cv
276.846 132.36 276.768 132.345 276.691 132.329 cv
cp
f
272.531 109.734 mo
272.592 109.69 272.666 109.653 272.727 109.615 cv
272.65 109.618 272.576 109.618 272.494 109.615 cv
268.01 109.376 263.514 97.8301 252.59 106.538 cv
254.35 111.644 255.76 116.922 256.799 122.348 cv
270.643 124.452 268.756 112.18 272.531 109.734 cv
cp
f
264.445 88.0757 mo
264.506 88.0229 264.564 87.9731 264.625 87.9263 cv
264.553 87.9424 264.471 87.9556 264.396 87.9629 cv
259.965 88.5049 253.574 78.0342 244.41 88.2119 cv
247.086 93.0054 249.418 98.0205 251.393 103.226 cv
265.102 102.757 261.178 91.1182 264.445 88.0757 cv
cp
f
252.713 68.1538 mo
252.758 68.0938 252.811 68.0322 252.863 67.9736 cv
252.791 68.0059 252.713 68.0322 252.639 68.0542 cv
248.395 69.3496 240.357 60.2563 233.129 71.5713 cv
236.643 75.8857 239.861 80.4668 242.73 85.2881 cv
255.838 82.3677 250.037 71.7017 252.713 68.1538 cv
cp
f
237.67 50.521 mo
237.707 50.4521 237.748 50.3848 237.789 50.3159 cv
237.719 50.3628 237.658 50.3994 237.584 50.4346 cv
233.645 52.438 224.23 44.9697 219.063 57.0923 cv
223.324 60.7734 227.324 64.7686 231.016 69.0479 cv
243.139 63.8774 235.668 54.4546 237.67 50.521 cv
cp
f
219.932 35.6187 mo
219.955 35.5469 219.98 35.4746 220.014 35.4014 cv
219.949 35.4526 219.896 35.501 219.828 35.5508 cv
216.305 38.2095 205.73 32.4854 202.744 45.3271 cv
207.596 48.2188 212.225 51.459 216.59 55.0171 cv
227.635 47.8218 218.635 39.8433 219.932 35.6187 cv
cp
f
199.965 23.8521 mo
199.975 23.7759 199.986 23.6997 200.008 23.6221 cv
199.957 23.6836 199.904 23.7466 199.852 23.8022 cv
196.822 27.0513 185.313 23.1924 184.715 36.6074 cv
189.955 38.5977 195.027 40.9658 199.893 43.6802 cv
209.777 34.5972 199.42 28.2588 199.965 23.8521 cv
cp
f
178.32 15.7349 mo
178.314 15.6572 178.311 15.5791 178.314 15.5015 cv
178.279 15.5703 178.24 15.6396 178.195 15.707 cv
175.764 19.4497 163.623 17.6074 165.543 31.1914 cv
171.018 32.2319 176.357 33.6621 181.545 35.457 cv
189.977 24.6655 178.549 20.1943 178.32 15.7349 cv
cp
f
155.588 11.5186 mo
155.572 11.4424 155.559 11.3647 155.543 11.2842 cv
155.523 11.3618 155.494 11.4395 155.465 11.5098 cv
153.709 15.6426 141.296 15.915 145.775 29.1895 cv
151.297 29.2686 156.742 29.7446 162.078 30.5845 cv
168.756 18.3125 156.598 15.8931 155.588 11.5186 cv
cp
f
151.744 34.9253 mo
157.287 22.5347 145.42 21.2568 144.094 17.165 cv
144.073 17.0947 144.053 17.0229 144.033 16.9526 cv
144.019 17.0259 144 17.0947 143.979 17.1709 cv
142.646 21.2568 130.787 22.5391 136.324 34.9253 cv
138.872 34.7466 141.444 34.6558 144.033 34.6558 cv
146.631 34.6558 149.197 34.7466 151.744 34.9253 cv
cp
/1 
<<
/Name (PANTONE 485 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0.95 1 0 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
f
122.196 19.2446 mo
122.16 19.1816 122.131 19.1128 122.098 19.0454 cv
122.093 19.1187 122.089 19.1934 122.078 19.2681 cv
121.482 23.5034 110.152 26.811 117.502 37.8975 cv
122.496 36.6533 127.62 35.749 132.858 35.2183 cv
136 22.249 124.198 23.0239 122.196 19.2446 cv
cp
f
100.975 25.1123 mo
100.926 25.0552 100.885 24.9937 100.848 24.9307 cv
100.856 25.0068 100.861 25.0801 100.865 25.1563 cv
101.012 29.4033 90.5439 34.5957 99.4409 44.1343 cv
104.211 42.0005 109.16 40.1982 114.262 38.7544 cv
114.956 25.7075 103.592 28.4668 100.975 25.1123 cv
cp
f
81.1001 34.5957 mo
81.0469 34.5474 80.9932 34.4902 80.9438 34.4375 cv
80.9644 34.5093 80.9849 34.5811 80.9976 34.6558 cv
81.8755 38.7896 72.584 45.6646 82.7129 53.4565 cv
87.1021 50.4785 91.7168 47.813 96.5288 45.4883 cv
94.8462 32.8076 84.2427 37.4238 81.1001 34.5957 cv
cp
f
63.1201 47.3965 mo
63.0586 47.3584 62.9971 47.3188 62.9346 47.272 cv
62.9722 47.3379 63.0049 47.4067 63.0337 47.4771 cv
64.6055 51.377 56.7363 59.6919 67.8135 65.5996 cv
71.6611 61.8579 75.7798 58.4023 80.1445 55.2559 cv
76.2471 43.3193 66.6885 49.627 63.1201 47.3965 cv
cp
f
47.5127 62.9922 mo
47.4424 62.9644 47.3765 62.9336 47.3091 62.8984 cv
47.3545 62.96 47.3999 63.0215 47.438 63.0845 cv
49.6655 66.6519 43.3608 76.208 55.293 80.1064 cv
58.4395 75.7451 61.9023 71.6196 65.6387 67.7759 cv
59.7275 56.6982 51.4116 64.5723 47.5127 62.9922 cv
cp
f
34.6909 80.9604 mo
34.6162 80.9443 34.5469 80.9238 34.4771 80.9004 cv
34.5308 80.9561 34.584 81.0103 34.6333 81.0649 cv
37.4614 84.2065 32.8491 94.8096 45.5239 96.4873 cv
47.8481 91.6777 50.5176 87.063 53.4917 82.6753 cv
45.6992 72.5444 38.8271 81.8413 34.6909 80.9604 cv
cp
f
25.1919 100.825 mo
25.1162 100.822 25.0439 100.818 24.9702 100.808 cv
25.0313 100.846 25.0928 100.891 25.1528 100.937 cv
28.5029 103.56 25.7495 114.919 38.7949 114.226 cv
40.2349 109.123 42.0361 104.172 44.1704 99.4023 cv
34.6318 90.5054 29.4404 100.978 25.1919 100.825 cv
cp
f
19.3027 122.04 mo
19.2295 122.048 19.1553 122.057 19.0815 122.057 cv
19.1519 122.09 19.2168 122.121 19.2842 122.157 cv
23.0625 124.167 22.2915 135.962 35.2568 132.817 cv
35.7856 127.581 36.6899 122.456 37.9336 117.466 cv
26.8472 110.114 23.5386 121.446 19.3027 122.04 cv
cp
f
34.959 136.286 mo
22.5742 130.748 21.293 142.615 17.2026 143.937 cv
17.1353 143.96 17.061 143.981 16.9893 143.997 cv
17.0635 144.013 17.1367 144.037 17.2065 144.054 cv
21.293 145.385 22.5767 157.244 34.959 151.71 cv
34.7827 149.162 34.6909 146.592 34.6909 143.997 cv
34.6909 141.408 34.7827 138.834 34.959 136.286 cv
cp
f
19.2808 165.838 mo
19.2168 165.875 19.1494 165.906 19.0815 165.934 cv
19.1553 165.938 19.231 165.945 19.3057 165.957 cv
23.5386 166.553 26.8472 177.881 37.9336 170.528 cv
36.6885 165.539 35.7856 160.415 35.2568 155.174 cv
22.2915 152.033 23.0625 163.83 19.2808 165.838 cv
cp
f
25.1528 187.061 mo
25.0928 187.102 25.0313 187.143 24.9702 187.188 cv
25.0439 187.178 25.1177 187.169 25.1938 187.168 cv
29.4404 187.023 34.6333 197.489 44.1689 188.59 cv
42.0361 183.824 40.2349 178.871 38.792 173.771 cv
25.7471 173.076 28.5029 184.44 25.1528 187.061 cv
cp
f
34.6318 206.933 mo
34.582 206.985 34.5308 207.041 34.4756 207.09 cv
34.5469 207.069 34.6206 207.047 34.6924 207.035 cv
38.8271 206.154 45.6992 215.45 53.4917 205.322 cv
50.5156 200.933 47.8481 196.318 45.522 191.507 cv
32.8447 193.189 37.4639 203.792 34.6318 206.933 cv
cp
f
47.4355 224.911 mo
47.3955 224.973 47.3545 225.034 47.3091 225.093 cv
47.3765 225.061 47.4424 225.027 47.5142 225.001 cv
51.4131 223.425 59.7275 231.296 65.6387 220.223 cv
61.8936 216.378 58.4395 212.252 55.2891 207.891 cv
43.3589 211.785 49.6655 221.344 47.4355 224.911 cv
cp
f
63.0337 240.521 mo
63.0015 240.589 62.9722 240.656 62.9346 240.724 cv
62.9971 240.677 63.0586 240.636 63.1201 240.595 cv
66.6885 238.37 76.2471 244.675 80.1445 232.741 cv
75.7798 229.597 71.6572 226.132 67.8081 222.395 cv
56.7329 228.306 64.6089 236.62 63.0337 240.521 cv
cp
f
80.9976 253.34 mo
80.9805 253.412 80.9644 253.486 80.9395 253.559 cv
80.9932 253.498 81.0469 253.45 81.104 253.4 cv
84.2466 250.575 94.8418 255.186 96.5288 242.511 cv
91.7124 240.188 87.0977 237.521 82.7129 234.539 cv
72.584 242.334 81.8789 249.208 80.9976 253.34 cv
cp
f
100.865 262.844 mo
100.861 262.914 100.856 262.989 100.844 263.063 cv
100.885 262.998 100.926 262.938 100.975 262.881 cv
103.597 259.526 114.956 262.282 114.262 249.241 cv
109.16 247.802 104.211 246 99.437 243.864 cv
90.5439 253.401 101.012 258.591 100.865 262.844 cv
cp
f
122.078 268.728 mo
122.089 268.804 122.093 268.876 122.098 268.952 cv
122.131 268.885 122.16 268.814 122.196 268.748 cv
124.202 264.971 136 265.739 132.858 252.776 cv
127.62 252.247 122.496 251.343 117.5 250.102 cv
110.152 261.188 121.482 264.497 122.078 268.728 cv
cp
f
136.324 253.072 mo
130.787 265.458 142.65 266.739 143.979 270.826 cv
144 270.896 144.019 270.969 144.033 271.043 cv
144.053 270.969 144.073 270.896 144.094 270.826 cv
145.422 266.739 157.283 265.457 151.744 253.072 cv
149.197 253.251 146.631 253.345 144.033 253.345 cv
141.444 253.345 138.872 253.251 136.324 253.072 cv
cp
f
165.877 268.748 mo
165.914 268.814 165.943 268.885 165.973 268.952 cv
165.975 268.876 165.984 268.8 165.992 268.728 cv
166.59 264.497 177.916 261.187 170.564 250.102 cv
165.578 251.343 160.449 252.247 155.215 252.776 cv
152.072 265.742 163.871 264.971 165.877 268.748 cv
cp
f
187.094 262.882 mo
187.139 262.942 187.184 262.999 187.225 263.063 cv
187.215 262.989 187.209 262.914 187.203 262.84 cv
187.061 258.591 197.527 253.4 188.631 243.864 cv
183.861 246 178.908 247.802 173.811 249.241 cv
173.113 262.285 184.48 259.526 187.094 262.882 cv
cp
f
206.969 253.401 mo
207.025 253.45 207.076 253.5 207.129 253.559 cv
207.107 253.486 207.088 253.412 207.072 253.339 cv
206.193 249.206 215.484 242.334 205.357 234.539 cv
200.973 237.521 196.357 240.188 191.545 242.511 cv
193.227 255.187 203.832 250.569 206.969 253.401 cv
cp
f
224.949 240.595 mo
225.01 240.636 225.072 240.677 225.131 240.724 cv
225.096 240.656 225.068 240.586 225.039 240.519 cv
223.459 236.62 231.332 228.301 220.26 222.395 cv
216.412 226.132 212.293 229.597 207.928 232.741 cv
211.826 244.675 221.385 238.367 224.949 240.595 cv
cp
f
240.559 225.001 mo
240.629 225.027 240.693 225.061 240.764 225.095 cv
240.715 225.034 240.674 224.973 240.635 224.91 cv
238.404 221.344 244.709 211.785 232.781 207.891 cv
229.633 212.252 226.172 216.378 222.43 220.223 cv
228.34 231.296 236.66 223.422 240.559 225.001 cv
cp
f
253.377 207.035 mo
253.451 207.053 253.52 207.069 253.596 207.09 cv
253.541 207.041 253.488 206.985 253.436 206.933 cv
250.607 203.788 255.221 193.189 242.547 191.507 cv
240.225 196.318 237.553 200.933 234.576 205.322 cv
242.371 215.45 249.246 206.154 253.377 207.035 cv
cp
f
262.879 187.169 mo
262.951 187.169 263.025 187.178 263.104 187.188 cv
263.037 187.143 262.977 187.102 262.92 187.055 cv
259.568 184.438 262.32 173.078 249.275 173.771 cv
247.836 178.871 246.035 183.824 243.9 188.595 cv
253.439 197.489 258.631 187.018 262.879 187.169 cv
cp
f
268.77 165.957 mo
268.844 165.945 268.912 165.938 268.99 165.934 cv
268.92 165.906 268.85 165.875 268.789 165.838 cv
265.006 163.828 265.777 152.033 252.814 155.174 cv
252.285 160.415 251.381 165.539 250.137 170.528 cv
261.225 177.881 264.531 166.553 268.77 165.957 cv
cp
f
270.865 143.937 mo
266.773 142.606 265.496 130.75 253.111 136.286 cv
253.287 138.834 253.377 141.408 253.377 143.997 cv
253.377 146.592 253.287 149.162 253.111 151.71 cv
265.496 157.245 266.773 145.385 270.865 144.054 cv
270.934 144.037 271.004 144.013 271.08 143.997 cv
271.004 143.981 270.934 143.96 270.865 143.937 cv
cp
f
268.789 122.154 mo
268.855 122.121 268.92 122.09 268.99 122.062 cv
268.912 122.057 268.838 122.048 268.764 122.04 cv
264.531 121.442 261.221 110.114 250.137 117.466 cv
251.381 122.456 252.283 127.581 252.814 132.817 cv
265.783 135.962 265.006 124.163 268.789 122.154 cv
cp
f
262.92 100.937 mo
262.977 100.891 263.037 100.846 263.104 100.812 cv
263.025 100.818 262.947 100.824 262.879 100.825 cv
258.625 100.973 253.436 90.5054 243.9 99.4023 cv
246.029 104.172 247.836 109.123 249.275 114.226 cv
262.324 114.917 259.564 103.554 262.92 100.937 cv
cp
f
253.439 81.0649 mo
253.488 81.0059 253.541 80.9561 253.596 80.9004 cv
253.52 80.9253 253.451 80.9443 253.377 80.9604 cv
249.242 81.8413 242.371 72.5444 234.576 82.6753 cv
237.553 87.0601 240.223 91.6777 242.547 96.4873 cv
255.223 94.8096 250.607 84.2036 253.439 81.0649 cv
cp
f
240.635 63.0845 mo
240.674 63.0186 240.717 62.96 240.764 62.8984 cv
240.693 62.9336 240.629 62.9658 240.553 62.9951 cv
236.656 64.5679 228.338 56.6997 222.43 67.7729 cv
226.172 71.6196 229.629 75.7437 232.781 80.1064 cv
244.715 76.208 238.404 66.6519 240.635 63.0845 cv
cp
f
225.039 47.4727 mo
225.068 47.4067 225.096 47.3379 225.133 47.272 cv
225.072 47.3188 225.01 47.3613 224.949 47.3979 cv
221.379 49.6255 211.82 43.3223 207.924 55.2559 cv
212.289 58.3994 216.412 61.8579 220.26 65.5996 cv
231.336 59.689 223.459 51.374 225.039 47.4727 cv
cp
f
207.072 34.6499 mo
207.088 34.5811 207.107 34.5078 207.129 34.4375 cv
207.076 34.4902 207.023 34.5474 206.969 34.5957 cv
203.826 37.4238 193.223 32.8105 191.545 45.4883 cv
196.357 47.813 200.967 50.4785 205.352 53.4565 cv
215.488 45.6587 206.191 38.7866 207.072 34.6499 cv
cp
f
187.203 25.1563 mo
187.209 25.0771 187.215 25.0068 187.225 24.9351 cv
187.184 24.9937 187.139 25.0552 187.094 25.1152 cv
184.477 28.4639 173.113 25.7119 173.811 38.7544 cv
178.908 40.1982 183.861 42.0005 188.629 44.1343 cv
197.529 34.5957 187.057 29.4033 187.203 25.1563 cv
cp
f
165.992 19.2681 mo
165.984 19.1904 165.975 19.1187 165.973 19.0454 cv
165.943 19.1128 165.914 19.1816 165.871 19.2446 cv
163.867 23.0239 152.072 22.2534 155.215 35.2183 cv
160.449 35.749 165.572 36.6533 170.563 37.8975 cv
177.922 26.8066 166.586 23.499 165.992 19.2681 cv
cp
f
142.211 34.6675 mo
146.648 21.8442 134.72 21.6025 133.039 17.6426 cv
133.009 17.5767 132.985 17.5078 132.964 17.4331 cv
132.952 17.5122 132.94 17.584 132.923 17.6543 cv
131.956 21.8472 120.251 24.1553 126.848 36.0127 cv
129.372 35.6128 131.922 35.2974 134.507 35.0688 cv
137.087 34.8433 139.656 34.7114 142.211 34.6675 cv
cp
/2 
<<
/Name (PANTONE 305 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0.51 0 0.09 0 ] 
>>
/CSD add_res
1 /2 /CSD get_res sepcs
1 sep
f
111.404 21.6216 mo
111.363 21.563 111.325 21.4971 111.292 21.4341 cv
111.292 21.5044 111.292 21.5806 111.292 21.6582 cv
111.062 25.9272 100.064 30.2095 108.359 40.6128 cv
113.22 38.9424 118.25 37.5952 123.418 36.6074 cv
125.421 23.4155 113.729 25.2134 111.404 21.6216 cv
cp
f
90.7773 29.3184 mo
90.7275 29.2642 90.6787 29.207 90.6333 29.1499 cv
90.6455 29.2231 90.6582 29.2949 90.6704 29.3682 cv
91.187 33.5889 81.2109 39.6733 90.9043 48.3989 cv
95.4707 45.8579 100.246 43.6333 105.205 41.7515 cv
104.757 28.6909 93.6777 32.4312 90.7773 29.3184 cv
cp
f
71.8037 40.4941 mo
71.7466 40.4502 71.6895 40.4019 71.6318 40.3535 cv
71.6611 40.4209 71.6851 40.4927 71.7065 40.5615 cv
72.9448 44.6094 64.2852 52.2651 75.0571 59.1426 cv
79.168 55.7969 83.5327 52.7397 88.1235 50.0054 cv
85.3418 37.5205 75.1802 43.041 71.8037 40.4941 cv
cp
f
55.0103 54.8149 mo
54.9448 54.7842 54.8823 54.7476 54.8174 54.7065 cv
54.8584 54.7695 54.895 54.8354 54.9277 54.9028 cv
56.8398 58.6514 49.7231 67.623 61.27 72.5444 cv
64.7773 68.4849 68.5796 64.6748 72.6538 61.1592 cv
67.7271 49.6138 58.7549 56.729 55.0103 54.8149 cv
cp
f
40.8188 71.7148 mo
40.7471 71.6914 40.6797 71.665 40.6104 71.6387 cv
40.6592 71.6943 40.709 71.7515 40.7515 71.8101 cv
43.2856 75.1704 37.8369 85.2441 50.061 88.0815 cv
52.8154 83.4624 55.9038 79.0571 59.2964 74.895 cv
52.4419 64.377 44.8418 72.9473 40.8188 71.7148 cv
cp
f
29.6123 90.731 mo
29.5405 90.7222 29.4668 90.7104 29.3926 90.6914 cv
29.4521 90.7383 29.5098 90.7852 29.5625 90.8394 cv
32.6533 93.7236 28.9824 104.684 41.7593 105.255 cv
43.6553 100.26 45.9092 95.4292 48.4932 90.7969 cv
39.8472 81.3857 33.811 91.2471 29.6123 90.731 cv
cp
f
21.8813 111.348 mo
21.8071 111.352 21.7339 111.352 21.6577 111.348 cv
21.7236 111.383 21.7891 111.421 21.8506 111.463 cv
25.4175 113.78 23.6631 125.341 36.5996 123.511 cv
37.5933 118.301 38.9541 113.21 40.6636 108.277 cv
30.3853 100.242 26.1289 111.128 21.8813 111.348 cv
cp
f
17.8628 132.993 mo
17.792 133.01 17.7197 133.022 17.646 133.034 cv
17.7153 133.057 17.7852 133.083 17.8569 133.11 cv
21.7935 134.787 22.0557 146.604 34.6924 142.34 cv
34.7686 137.079 35.2192 131.894 36.0259 126.813 cv
24.3359 120.453 22.0308 132.033 17.8628 132.993 cv
cp
f
34.7026 145.824 mo
21.8813 141.384 21.6406 153.316 17.6802 154.992 cv
17.6108 155.021 17.5449 155.047 17.4736 155.072 cv
17.5469 155.082 17.6211 155.096 17.6929 155.108 cv
21.8833 156.078 24.1929 167.781 36.0459 161.186 cv
35.6479 158.662 35.332 156.112 35.1064 153.529 cv
34.8809 150.948 34.7505 148.375 34.7026 145.824 cv
cp
f
21.6602 176.631 mo
21.5962 176.67 21.5347 176.709 21.4688 176.74 cv
21.5425 176.738 21.6187 176.738 21.6943 176.744 cv
25.9624 176.968 30.2476 187.967 40.6489 179.674 cv
38.9756 174.813 37.6294 169.785 36.6455 164.615 cv
23.4521 162.613 25.251 174.301 21.6602 176.631 cv
cp
f
29.355 197.255 mo
29.3018 197.306 29.2446 197.355 29.1851 197.401 cv
29.2583 197.382 29.333 197.372 29.4087 197.361 cv
33.6255 196.844 39.7095 206.816 48.4375 197.127 cv
45.8955 192.56 43.668 187.787 41.7871 182.828 cv
28.7324 183.275 32.4692 194.354 29.355 197.255 cv
cp
f
40.5317 216.227 mo
40.4883 216.287 40.4399 216.343 40.3911 216.399 cv
40.46 216.37 40.5317 216.343 40.6021 216.323 cv
44.644 215.09 52.3027 223.748 59.1816 212.98 cv
55.8345 208.867 52.7744 204.503 50.0371 199.91 cv
37.5562 202.69 43.0796 212.852 40.5317 216.227 cv
cp
f
54.854 233.024 mo
54.8208 233.089 54.7842 233.154 54.7476 233.213 cv
54.8086 233.174 54.8745 233.137 54.9395 233.104 cv
58.6899 231.198 67.6572 238.311 72.584 226.764 cv
68.5181 223.258 64.7114 219.454 61.1958 215.381 cv
49.6494 220.304 56.77 229.277 54.854 233.024 cv
cp
f
71.751 247.213 mo
71.7305 247.285 71.7012 247.355 71.6772 247.424 cv
71.7305 247.374 71.7876 247.324 71.8491 247.282 cv
75.2095 244.753 85.2803 250.198 88.1191 237.972 cv
83.5 235.22 79.0947 232.13 74.9297 228.739 cv
64.4155 235.592 72.9819 243.191 71.751 247.213 cv
cp
f
90.7695 258.421 mo
90.7612 258.491 90.748 258.569 90.7275 258.641 cv
90.7773 258.579 90.8267 258.522 90.8755 258.467 cv
93.7588 255.379 104.721 259.048 105.294 246.276 cv
100.298 244.382 95.4663 242.125 90.8389 239.543 cv
81.4238 248.189 91.2817 254.223 90.7695 258.421 cv
cp
f
111.386 266.15 mo
111.39 266.224 111.39 266.304 111.386 266.376 cv
111.424 266.309 111.46 266.241 111.502 266.181 cv
113.82 262.614 125.375 264.366 123.545 251.437 cv
118.339 250.444 113.249 249.08 108.31 247.371 cv
100.283 257.647 111.166 261.906 111.386 266.15 cv
cp
f
133.031 270.167 mo
133.046 270.241 133.063 270.313 133.071 270.39 cv
133.092 270.318 133.12 270.248 133.149 270.177 cv
134.823 266.241 146.637 265.976 142.378 253.339 cv
137.116 253.267 131.931 252.814 126.852 252.01 cv
120.494 263.694 132.07 266.001 133.031 270.167 cv
cp
f
145.857 253.333 mo
141.423 266.15 153.352 266.392 155.031 270.351 cv
155.061 270.421 155.084 270.488 155.109 270.56 cv
155.121 270.483 155.129 270.412 155.15 270.339 cv
156.113 266.15 167.816 263.844 161.225 251.986 cv
158.699 252.386 156.15 252.701 153.566 252.927 cv
150.98 253.154 148.414 253.284 145.857 253.333 cv
cp
f
176.666 266.373 mo
176.707 266.435 176.742 266.503 176.781 266.563 cv
176.777 266.49 176.777 266.414 176.781 266.338 cv
177.006 262.067 188.004 257.785 179.713 247.385 cv
174.848 249.057 169.818 250.403 164.654 251.39 cv
162.652 264.579 174.336 262.782 176.666 266.373 cv
cp
f
197.293 258.679 mo
197.346 258.731 197.391 258.787 197.436 258.846 cv
197.418 258.771 197.406 258.698 197.398 258.629 cv
196.881 254.402 206.854 248.324 197.17 239.599 cv
192.6 242.14 187.824 244.362 182.869 246.246 cv
183.311 259.299 194.391 255.566 197.293 258.679 cv
cp
f
216.264 247.499 mo
216.326 247.544 216.379 247.588 216.439 247.643 cv
216.408 247.573 216.385 247.5 216.357 247.43 cv
215.125 243.388 223.783 235.732 213.02 228.854 cv
208.904 232.2 204.541 235.261 199.945 237.995 cv
202.729 250.476 212.889 244.952 216.264 247.499 cv
cp
f
233.059 233.18 mo
233.125 233.212 233.191 233.247 233.256 233.288 cv
233.211 233.224 233.174 233.159 233.145 233.095 cv
231.232 229.346 238.346 220.374 226.803 215.453 cv
223.299 219.516 219.492 223.322 215.42 226.834 cv
220.342 238.382 229.313 231.264 233.059 233.18 cv
cp
f
247.248 216.282 mo
247.318 216.303 247.389 216.328 247.457 216.357 cv
247.408 216.303 247.363 216.244 247.318 216.183 cv
244.787 212.824 250.23 202.753 238.016 199.91 cv
235.258 204.532 232.168 208.94 228.777 213.1 cv
235.631 223.615 243.229 215.05 247.248 216.282 cv
cp
f
258.461 197.267 mo
258.529 197.272 258.604 197.288 258.678 197.305 cv
258.615 197.255 258.559 197.206 258.506 197.156 cv
255.412 194.272 259.088 183.309 246.313 182.738 cv
244.418 187.734 242.162 192.565 239.578 197.196 cv
248.225 206.607 254.264 196.746 258.461 197.267 cv
cp
f
266.193 176.646 mo
266.262 176.643 266.336 176.641 266.414 176.646 cv
266.35 176.61 266.279 176.574 266.217 176.533 cv
262.652 174.214 264.404 162.657 251.471 164.484 cv
250.48 169.694 249.115 174.783 247.408 179.72 cv
257.686 187.75 261.943 176.868 266.193 176.646 cv
cp
f
270.205 155.002 mo
270.279 154.985 270.348 154.969 270.426 154.961 cv
270.354 154.938 270.283 154.912 270.211 154.883 cv
266.279 153.209 266.012 141.39 253.373 145.653 cv
253.301 150.916 252.85 156.1 252.049 161.182 cv
263.736 167.537 266.041 155.96 270.205 155.002 cv
cp
f
270.377 132.881 mo
266.186 131.914 263.879 120.215 252.023 126.809 cv
252.42 129.332 252.738 131.885 252.963 134.47 cv
253.189 137.051 253.32 139.62 253.365 142.173 cv
266.189 146.61 266.426 134.68 270.385 133.004 cv
270.459 132.971 270.525 132.946 270.6 132.924 cv
270.52 132.915 270.447 132.902 270.377 132.881 cv
cp
f
266.41 111.367 mo
266.473 111.326 266.537 111.288 266.602 111.254 cv
266.529 111.257 266.451 111.257 266.379 111.254 cv
262.107 111.028 257.824 100.028 247.42 108.32 cv
249.094 113.184 250.439 118.212 251.43 123.379 cv
264.617 125.381 262.816 113.694 266.41 111.367 cv
cp
f
258.713 90.7383 mo
258.771 90.6885 258.824 90.6401 258.883 90.5947 cv
258.813 90.6108 258.734 90.6211 258.66 90.6313 cv
254.443 91.1504 248.359 81.1733 239.631 90.8701 cv
242.174 95.4321 244.402 100.208 246.281 105.166 cv
259.338 104.718 255.602 93.6387 258.713 90.7383 cv
cp
f
247.541 71.7705 mo
247.582 71.7104 247.631 71.6504 247.678 71.5947 cv
247.607 71.624 247.541 71.6489 247.471 71.668 cv
243.426 72.9063 235.768 64.2466 228.883 75.0181 cv
232.238 79.1289 235.295 83.4917 238.027 88.0874 cv
250.514 85.3027 244.992 75.1411 247.541 71.7705 cv
cp
f
233.215 54.9702 mo
233.248 54.9087 233.285 54.8413 233.326 54.7798 cv
233.26 54.8193 233.193 54.856 233.125 54.8882 cv
229.379 56.7993 220.412 49.6826 215.488 61.2324 cv
219.551 64.7363 223.357 68.5435 226.873 72.6147 cv
238.422 67.6919 231.303 58.7173 233.215 54.9702 cv
cp
f
216.316 40.7813 mo
216.338 40.7095 216.363 40.6421 216.396 40.5732 cv
216.338 40.6216 216.281 40.6685 216.219 40.7139 cv
212.859 43.2446 202.793 37.7949 199.951 50.0244 cv
204.57 52.7778 208.975 55.8657 213.135 59.2554 cv
223.654 52.4028 215.086 44.8013 216.316 40.7813 cv
cp
f
197.299 29.5718 mo
197.313 29.5 197.324 29.4282 197.34 29.3564 cv
197.293 29.415 197.242 29.4736 197.193 29.5249 cv
194.309 32.6157 183.344 28.9463 182.777 41.7207 cv
187.77 43.6187 192.604 45.8726 197.23 48.4546 cv
206.645 39.8081 196.781 33.7676 197.299 29.5718 cv
cp
f
176.686 21.8442 mo
176.682 21.7681 176.682 21.6934 176.682 21.6187 cv
176.648 21.686 176.607 21.752 176.566 21.812 cv
174.254 25.3818 162.693 23.6265 164.523 36.562 cv
169.732 37.5527 174.816 38.9204 179.754 40.626 cv
187.789 30.3486 176.906 26.0884 176.686 21.8442 cv
cp
f
155.039 17.8276 mo
155.02 17.7554 155.01 17.6792 154.998 17.606 cv
154.973 17.6763 154.949 17.7495 154.92 17.8174 cv
153.246 21.7549 141.431 22.0142 145.689 34.6587 cv
150.953 34.7305 156.139 35.186 161.221 35.9907 cv
167.58 24.3003 155.998 21.9907 155.039 17.8276 cv
cp
f
gsave
258.82 145.07 mo
258.82 208.566 207.342 260.043 143.847 260.043 cv
80.3491 260.043 28.8774 208.566 28.8774 145.07 cv
28.8774 81.5747 80.3491 30.1011 143.847 30.1011 cv
207.342 30.1011 258.82 81.5747 258.82 145.07 cv
cp
clp
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 /1 /2 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.1%%For: (Jonathan White) ()%%Title: (TRV_Burst_SPOT.eps)%%CreationDate: 2/28/11 11:57 AM%AI9_DataStream%Gb"+`M*_kIe,KgF%e7?(0_^.!D?p@U<*%AreJ/0SaV'c(K\c<JqS0&2X(NcIUB_>C2XVKWdaL^/h-JR;\@C6SkoR4Dhc>+(Y#Gi)%cO'aO]<Jg?[/HjZbkU%uL7r6HUUAtXa`4@Cg)BVW>Jjm_fBEa!.gq9CBC9Z4h.\`mKB)*m&loHpRF^fk8\9'5lK!2n2-?h;Q2o[O%ijlP9k-ro67Joj;BANO3a['^Ce(ej^4?J;$L\QS<.t6>mNCGV0iCYC[PPWC?e2rs0WSH1,^"Rc1C;"*1Au0qmg>.ft[c'usS3XsV%00d+*od*XG[B5;mrto0Za%"T:75O_q80%oL$si3EA&L>J@9rH=4!3@e^9r`k6$(QDFoT*If\'sZpH-Vs9C.Z&3*#1pZ,NX;=gj!S%&?V8VX3-T:=qq:.i`[+G+73P'mrn#hQ-.;4I_.],%1d/c[bCVcV7"-Q]DXtH,Xj$cI<3hN%Gl9_,=&ckd#];qffNkiTWNOKd:qT`%)<*k:qP4<Wc,$m?#`,Y83Pfj@<!#F9"U)0br6ZG0?K2$hqlT9]n"#j5Or64ogNP-O4/Qf2@t)B*7+]-^6m`-o"iR2XnTfMN]CfS7%[Xb;_&),pph3B:6hJe;)2?rQ$LtI*U'$pl#FqFNinm@h2XEQL9FlfEMqWff0ILN"JEgm9c3<Y*#2VWa5dgF$#jM4dJo^5n(e6Ju+%Y&..0[f3D1rYQdl)">SSn^I+!1CWf[?>$3Rj1i$^hqBu;CYSJuUOc4i;kAcH4:cr54Da,)fZNe(%IQ"\YmmqLLS&"2:PU+%$:AW`%5N*uuWn4LU]oGn>lhF2fNbo[Dr3k#B4FF`f_!`3OHA6$*o;290M"E8_aktkH_BOG<.pNa:@Ok[sYEZc=(#^OK_%koVY+%.3cf1D_%'7[n7i@"=eGbUdL7JM`*`d\SXCVhe4Rl!=;_KFfb[V7Q0`qtBE-QEd8#tt%b:X[C"p,$u^)i]k6k<7f?oESUZqX>/FU)g%0ds&0/%pb0(mp$iM*<p3[k++E3f\2r>nr1o`*"@'.+Xq*a2(Pt`iY;AG'a>AE'BDURMU\PMQYnc5WnNnb(g#L:j?8O;-bkjg\p^agLeM1Xp%lL8Lk21:DK_bY);oSr/]SC"V;M/@3S$]@^3bWCJ<)M+iVBp`UgW=<K8PX;amI)1/%Gc04,enJC+)pXstK\&\7a&Y;`ohNi^p[j5Q%:7Oo*9RBOETcP-3&(,=6mI\W>,'.P<=cB87p5-AKmN_SGV^!*h:60RdYoN-5cA433:Ij'q\ak,n>j@ZI1eg@8_1,$+RduMNd5TIf%oZ(t8pZPu\Z`rZ)"H!,S5JBq.8,q#0+J@VEJB&/\T3@5gM>j>9X/kl>oIp/G=Bo&T8G"S6=^S)aUOVNhU&L-9a1]Adg/n-AJ"qL%%I?mfUgr<M"nL6]g<hiMJl="2I#QUItroDhn-So"_:M=7Jpb]?E#^l)piYg,Z^Or/<E'8#jn4_)^hr-$Z*W?/NBE^2FFo[5F)f%(o%>UXnS6SXRHNIJ),DPQVEI+;M.L$o!W3,38C-_:abPNt1eG>12:L-`mj>!X1#%;ML%fkYI7T+7u'"/)g3l5;k4VI,+EeuB+R\;mnm%B;%8[4BrX#.n0Q@eH,ura6/)$c*2WBoF0'QrL/94d%=UA^L7T+5ef"a^P4Pb5&-\U&a&DpHttq*$fD5jaBl!d$k,)%f>N&F8cd'7%&'\nf7)`bb6KkQ!ca8GR?8Y((?cT'\0<iDV6GO)V]R_jd$orH:$iO@:'sk'l.`=s1<pR7&rZ2"k/Gf#XHkUE%GdKU;_r%_s<L8'8%Rm9\`cDlsk\-s$i@/6i)GH_>"gu3>!7pO3o!I+%:^P9)#_+%f<lkD^[(7sb?%#5;,%]`o+We"#_P%GZmkr!;AYD&oplLC,CNpk-d%MdBg50$IgbIhtn-28cQ8<fT6\$Ci"+Hd,"9J5L/LO+K!@a$N(MJK=,_i.0T=U>Np2gFg9L&J"a%##<tY>_9)<^Z-;rk2Q/F)B^NG%hm"!&hc;>eZ%3En^[:fFqoD>_`L:(.m\ITelb_&"^'!.FTMjdg=tRNMnEL$eA(6(^#jQO?0^]%FJaH]$Bk5><87sPpLRm'^+18k=%A)^%=2:EAI-)cO-Ej+H*-##]m(sicd8A'gUfek3E)TZDRAN"LL9lOa8@Qa\l7@L_9i3[1BOoi<s(Ms;j##Gq/97u;pkWJne2Mej3%00J"II6a;'f%2GXobHEm-qWbu)#EM8(h"0@,5$aS);+IbJ9@?qTP;dmZpD>)Fd[5sgM9@A88U9M9cIbQ:^0`Gj,(c]K0E,C"LS5+%Ca?OqjG1.S.W>XVW36SsMV*U\'0EUjTFfasd2)Cq"*]L7'taNmRe@it*jl5^c)RNc&:5Zd8R=1Ng3$YskYl/?dAN^Tk%W<]U5+9q%6TQ!Ge4*bq*NJp%3oE\^K%=b2rP0-b=KB9Nr&);hFq&(1U_3<Pqs)di%U#Z<:UlI=<MXj_Ip=E-`*\\,E[IHE!h5cn/:f?U7G/nF%Xqoa$GL<o!)U^"Z?knttZ6c4hgi[raT*8OW&e[R[3RYhq5&)=57sdM5j1nF0\^D3t\QXdOI%b*Q*1*Ha4MA`Ze>2.l%VNm6\I:>c%-q6+J,`m$Lq&<lodL^D!i!A/uWa8@bR5Sa8opB>-]I,Ou&N5`sB]U??C+',%9S@#rhgCe=;(HVG.d:K.9Tk%I%`J1t?N^49&&On@%afuW/W%2ZhZoi:RaEpS]bS*Tae<1G7E1=YWfb!j*d\%[$=&9>Y+/YI7hdS^@78MoJEZjWG3_8s8WWP[o+@U9$U]V#!%qN'bMs)-s%'""s0gd2AN9kAPNWNIBr'9JAT:O7g/f-&1'q?HF71c8s)!*="AZ+UTI=+-19+9`AGYVOhI*CKhu"de.kM&f#X/sLb?5YXan7ELS'%]9^5Nn,r)*I0W+uV#1_%#MKbC@:=t[9:;6u=)q)]oRO$TB\*g-/m=u89IeKElQh$UO6qS0PS59f65iFr8&@EP\>YtVH-j/XY([V#%^7]hlZ\XNc9i.jo+Hbt6lUbJALp%//"RW'_[RZ5jG)Z,+0a@#4hET!2LdYSL3q=28;F5Rf8EYL*d%9_Km$cGM-J@jb.AR!uaQju-%`%'-Z7/;X7e^7=(M136TWXB]WY3Z2["AI=:i]ffYAY&'`@L_[0ZIfb1`]EKcfMFI6EL0$g.f!G<4(\a*BuhZujZh%5pgbs"o3gAt%qZ8`]+mW4)h#`%=aQEU.'c%k5=Ku@&a5IAFQe=uaB@\<l.b4gY,Bh;,*>9#.8`-7j`8*c&_]BX<\$+b>UR"?P^^Y9Y0_9G@@lHeK%Q1e==@,QJW%Df2tFm9&9CF7:3L:'P[U,@t>5[pA$Atf#EeOWK:7X2kd^.1@,Y1m&g4r1f,1m>^V,H`%4(QlI&f"I^_GV1WK5hZ9F%1^F17L]'8\NJ=[j6F8S/aGpuliUW1B=qKf16"?(b@]:47Q$@1(@@]5G%NBQT)6VSU7)0g1rg!)V.j(FeBScUY$i&>ODg?e^o*0OK%54W2OFX4Lb?e>q"=4eR;#^-QNS?T65AeNfico5&:%DgFLoL3Q*8pm@.4TM9$4=dtK%Fi0J><7MDa?E%A8,8)A$\#4u\V+r+/)]7R%CBdF36eEf#[jdq:ng^bGiJMHn#$GWH0,'iom>DoT#6D:IZk*KRZ-JpWNEDOs#L^VRp6oZG&fE,nNZ.Hq,7<Kd@pY0crjN_a9oUS"%-an[2XbR;efbm>\,OH"`O0TP_/92`qC>qUbFD@`n`D3Qkhq!XF%CD8F)O3?`E4WDb6aDZ)ei1us5s!p@!k/p`Qsa^nfa'f3aDp:Z%a>4O!Dp5@L967L1e1'N*XQY>7Q'%8`:Bu9"eui7:dZEFBOhE"l$^TTU)VIc8nf#AGCp9NRdt%+2fcXfh;::npq#O%l@HU(&1>)i3%.$5_B=)b7p.2c>&0b9Ft.)S?gfi#_]bS9m]TJ[Uf5l=j7010%[nRB=aC\/>-QIp7epS,AED$lm#C0c.p;B"I%;%keiG6r+pOb^jj%!VRZ3QaL34Q[$B*767a9'.Ci:#_PJ(#*##Cimu2f,nHICeS)_9(nRrm,"kMo13*te_)>E6U%g0%Q&'pk!S*$T'%TR*,9/G!b)k-3%+QpaU]8X/"b@bC&!.?oV82rMRDM%=/P)Ou[Ks(uneW@BX''AM#VhL+>UDEKUcRj!!P;iS"C0g>1-c0R3afJ(W2\^]Q8RtoH[Ou:<%OOu>9AsQ[/fFkf&B04@^BbtL>_Z+;fX[1rbUe?n&),'0+jdQPE@9r`FOnSETmk*WaX@q6d4=33$J"8Q[]ia6e"tIJu1?V(&.K%,Q%ZmG$X.lZFjX=&*FGpYl/3PoY;%(#[R]pb<WY3\"XO`P2PfMgQ1m(o$8;?IuA9Dr`&+ItmaUR@!hanl=b.XXg^+jl'</!0):;\;\#%?'i0=`dH>Kj&3gFACE=6/1c['?&eIhgYmbM9T!GWhb5)t[.n>>+o9oT8&_k&YEPb05@*VtOGj3bL5<pQ;fjW>4s94XKRX@-MYI0T%XsVj4C.9p2<Q-9dnka2f;$h/CGW-IbP270Ja6MH7,UiCP<\m4m:hSbDqfSbuN6X^Rb2^=J)><O&K0HVqKT+nJb\cQF\nJu,A;fA$%gEA]!1lkA$VP;/32^-ck,/u$BF<[jk[)#ThN5?n>GdPf9rWmi^4C<*N+ei>J`uN3W90U;(Lr>,e]tenF^6]n4,JYB=1\,+IQQoaN%B^:N=#/qV0K*tNlWGe"pFMfLZL`Uq<g?c[G#CXpIW8JqiP=tI5`;r;_Kuho5oN*Io$@3,Uj(i[Z67K8+&a]YefbEC1WTGSh2=d,q%li=IE`SHV::hSE<k&gFN8tLj#CdHa2RO\BCK6DteddD?n%4?CQXCuTW,CAK-$[\/GPDhP)M7rYN$DVlF,TUCI2%eT9fJ6Wf2&"#B%g;'Y4m*n<jeHM3\XnhP+9#e14ljIcD9)k6k)VCf1p#(j=PYT6I_%)1LK@[nh!O@T&IZ,(`Zn.*1U[?93%;H,38"gSPH,bATZ,'Hk%`iZ(Z1a?jfc:!%%7?#]T,#CTB]4kL_.LH/[;gM4R)'b.#@lu"ZM^Nd&iks!\cNZY?-WZ%c=at:IO!Mc`fYD2f'%0q5.f1AeZAWe9%pl=$PVB[=/17h)c7pb!9+;pIB?,XNZA^?+81eikL8LhW!S8bkg[HO'dj$JUg`1A---I9]MWEkL-=*co.SPE)%GoTEu&HNT[5Fr,.%W?tNH^b;6T\hP.*`5P;g:t1b*geb-S4bC<^2BZ/Lo&S5aFrb9qUg"F4-OJgc1bgD%O-'O)'qf]);.e0^l_MR([gUMKSZC>_dL>FC%K/c&CK@5uZ?tgo8/a0!2lt&F0FDaH0D=MG;1J)kt]:RLQ_uY"c5!3m%Vi'dq9'",3AjH'k:FC.0NZB;pER$0.2tjMdhEAZE.f-.$%43#4J+_P"r%=4T%2u6;J/ABeTNDB>74!oF6IFWu$m4N!l/\D_R"M7m/'DQ<Pco^JVl[J4Qgo2=dp0*``k30%Tg1b[?L3G-\7_`!f%$%Qp%s)&FMg2-NPk4Z8?_#1i`Q.LA4[J!,[YQR?YD4e1*Xl>ALpG"sN:g"g/$kFjM]j=4R0DUm%V?@8T[\&R7[_r:(f3Q8cj@HSm%pdhg/B^/'<f%D:`Qda`:^"MYW^C?Y1_tJQ5!%Hg+Om'CiK/G^75q@7fr6#%SOQDP`]j@U"4H??p#2*`$7d^.LC\u.ke2f5MD6<K=%2`Qhk9gI=BJ%%JPIVb/Sdd/#SIW#_mH!TGgI;O0=J3sH(7qh60pG"D7Z@1Bl\&<AYLCMXO>D%krc#.T!&TH8HMBAKuOCq.I6nm/j%]*j3F0)Cm"MI`IV7Vo,9O+fZ6]A;Uhl[UFW3N>&_(Q:rqrkADFiFIM'KAkE(nB5nJi@b30;fO9?.j+dJ.L4Vsc,*@d3*m?En-])9%WhJaIQ/dQE++C.,NZZ9VRq#j$l@CsKi'\q1@+@gb7Xi#NX[:Vtm0Ya1"5h'>^^`(Rq:E(X.kiJDZ4#!b:$f`s>/'=\oDn4k`-0@t%6Hu%9F9j9U:(@ddK>=\?Guci*!P:0ng",mLQ[i[UHBm!rlO.&')SE'VbG6d2a)iTTr2Sj^@MX.;1*!WP^nBt$J(,5R*WZ\MJT&W$%6a2AcC4>@a<<ErL"M9uAD/DcQjr.9S)Ob%]'?i7?iq0ld[1+@R$(-6Od2%0f4cA"u!au(NW\-,9gc0lO^k!pqEjD"oH*lr=L=uEC%li7T1_$VH6?/Mq6co+UiXQb);?Nf,B0H13CTOf"H=3'g?""WjXkFite*Ori;@+UQY_=Y%DK7JNH)=S%97m?BA%GTg<Tg_ZV(a/p:%ML_Sen,s082g8Y6N((bpI>Ji;)_[Em2aU#ViE%&CO;-hZ/n$km)=YLjfB%\e(mduZ);<k3kdV%C*1)4":Fo[O:^n0$LV>(ci#>\>%oHYF\+jJ.7iine0%*,7.!G]^[_"/&p&:l`8b"'=8cV*8L8U5l5hKE1k8_2tc]o\h@Te+BP^^q)R5T_tU3WP&C\-"tb"jQqS8[L93%0Y&2p+?51k`-#I5WWSnbh?#KtU<:MBCcS"qaY&Z,I%+21fES!Y\8o$d&TGL.eb'!cbsl)/rHa#<BAnN^NrTT*VPM$!$0Y>_fAmEh%:JqgW*Cm7A*"u!=lbGh-3F</a%bZPgHU;#J[P*3'D)7M_[d)F:N^hh+QNjT+6Q,uB,m&d.Q9`VPjTJ-.&Jue-S??9)St&,\n-5Ab%U`($b(@@p8lh*M(n4%qETXI,ZNZ0`.b124h`GJq5lg[Gt^]PXAR-"4NXm[0eE>7gR)#2<b?EAe+AjI*_@KHQG,6bAeJ=K>!a(<p9%L<TN#2@[e*@6dco5X:i&d=Gr8QjQO)<?6lE''fZGrW!e([`NVV_EKYFk![k!%SYYHhCtos&Ekh6#.D>gn9tHH5U*0;Cg/>.&&8>?%>i024.U_K8be"2c!&Z=H34.WE"Dfj)9V,5AYgNtSVP:jM;Q!hgU8#G\a[mWg#m`^K,9)m[GMn4Wp-J?YiXV&nPd[hf:-hMp<0tNR%(_md#Bo92=>*[?G61MmO,'A_bf4&4Z'eGO(8gsen%R&rbRm[Yb_h_ZqljJ?Sm3%A4M)kX@kqdCLVTis0jqko;)YtT2qOmF_e&Zuh%jX`n6C`m./OI>!&da2*h/3u=;\*A5TOce!S6!T'=T'<9c6GmE,#NcV8_*kR[A]TtT"$kW8j\T@^albrig,oDZQXbTg'O'NFoO0NX%4!k<6"2ASt+YsN6H33qtibcU),g\7YqMRH)X?`r>7A7%:_(OAXdL6+Db:`;BOtA4`p$4,d`Dk%^rL-EcXRCd,RECY;"@*XaLWq&t%g&U1D)k+J]Ea.F?P^JRk%:MntjK+0N_$[CK-9BIoA6[5e@h/-4^`?NnM1MKT[0M517qjjAmnF)m\]%t&jY#1d7c@-d)ZW7%B>=ia%<PP1X,W"/W+j_'XRHlT\4!mN_!.m$9=Kbm@[g3Ik2`<Alq@9:?V%!N/?j*RF9KuA"!u!J&I#jn\<4hBs4=d(#eimhe65-1<o*lhW%,(ZEA\H@J8<o>L$kGf"9&iW-a>)iT+I++/#0nKRpBuc<+5gSFAG>MF`\#s/NafWCf5+;b\c&MofTRPO\1'?'XB<n%HV/67Kco*2s%",7LT1k]"1GpXIc!&dQhi=8DU,LA2/SegQ)!+Jtm;h=D9%NHj\-t"hi6s[gpSBjiYeMrNV!:<MG!3npOE'Vtehh6es(A4h)@KM+h%`C&>&2^(rOQ!b0MZihbR/(gX%T^/gUo.5N<!=UfWQ&Q`E"NImuNO+m-Ld7.a+Y_Su#I#m]BXsfQb-iG"jBsUu8-2(.o*dn"WX_AM%ANGqHB]pq@)U2:6Ps?jA*6'NK-NLRWAitWj$+-*f4DE_^Y9@tCkHFss@/*lJ+;TSp0.*cSha5-"j8f]5Kb&d3E<.j<q^r#ji".]\%G1[.8q\B8c`df.0QiY@u9aPuZQ5i5N&^YaS#mj0K,0]*1I7n]%.$r>DP6[r';C`lp#L=;3'9KEA,ljD8)ZbO+#j@#:SA!lQE^sEU%D!W[_M/uQM<_XWIA:!$^1rTK/\SOiqa9^*5)TWE@lc0K??G.SC)ps3\2J!d-fJ@eO'Fb8^^)g2QMhaRNk;HJPgd,>Q5k`UlhINib%bQ3VUaQO"/Xncrf&C?LYj$]1]6;c<%Hpg494;pd.d`2>18/IkJj-cnL7iAgs$>ffGW-JIAP);W\eDrN@0e"-9d,9?VSgDu]gn4^K%Ub+qB#kT.F>,A5co$t]'KYUm1$;'0.Lc@[h'9G4L;NciP!LS9Z,]4;"!!MuTKIe@%V^6kRi],gC'2=!%+#4N2'`ea@^u<*pGU(QZ%QR.fWe,b(/Q92tH,+tXR\W?l9#W%k]",i[OH9Pl)ih<FsTVWJY5l[@)G/t@2"=2>#luA+30HF6'oj'X3]*Tl0Cf4,5g]9kM6Iq%8%g(J'[]Se\r/-0U*$!rC^3j:cD<ZPC&jcC_RXQS"=:kY7<dni]ao71A@T-o7lFPsd4;8a4^0LWT-7l&Wd+J`"*b&ZTGNlAfLPHt<B%,=?>#WFMt=]MK1V8srB["qQs+7n>dn7^6g-=IVXV#&4I)%>[NQ>7:P<7M3?l!@->g=JH"@V6^OC!4u9Ti.4:;]]92\r&U,hD@s2t%+M6s%U*O]VQA\T_!rC&onV"4sJ=slK[`m*!*OqE[o>9.Wm+#T[iq^<lB#++S?s7Ga#,WSjgQHDZ_e3aP38jusH*/;[)n?(.@%*pb%LB%O=&r8mBck:`7>$]J;9`P>.Y]459EjhVj%"kr;`o%0EOUNL+b>K@*L99+RjUQg:GQtV;YCJ`H8Hq*5!5s(0[49:U9aQ!=h<@a8%K7I"<+Yd=nl4Ku=Bq[Su?Um*pY30b.0BCAtdAnXf*uK0[k!TG$`nltDD=JKu&Lqo<E?;KH,($J3.Kn,(faRGIO.Y!HPJN-F76Hug%G0&[,U>,h6)LSRCU2S*N7[>DP#+U=d:5.'*E[VZA'IoM4Y\Zc=<_DiiPeIKYCF3\e(t+84G<?@+OQ@sBJ\cLfRD&_>Kp2Z'J,n4)%WQG5F56tsS!8<H2D7&I3$u@hL>h1e7bW6j\I^];<Y/>,<;36X>DoWqI7KA&ZNUs.92<8^qk`Z!9TX#&\!*(&,7[TuJd6XE^5cCPk%Z*<B#S,g/Ea0^-,9P'<\/@QW+oF5C/Ti].XHV0-JI_ZWdPSP%G;3#1n610NU!]XFt=64]<6'[icjGX.13`f$6:j.9rKi-JfO<G,]%VO.pf->74lLP9M65`Q76'^DA%0TtEd.7&Ep!(OeT&1Ncm6"kL:gnCc0#eYu+_b_s:MBg+h&Yi=!nk*-nF0&3lR>0fY0A8/R.S,<+%j[1p+PLX'pE>qXI70:Or$8`*7ZM:cB$R8Mai_QWmKQ*`AQDM5'AI\d/fotDk!lX%YG&7DE>nC^4oAcMO:aiuf.R``%!1eXbZ-9^(%KOAMd!4$hR!48-.9oR(8cr2j96g'BW!I.kH_DW;6#kZ5P(I1InD$?"s_9c3O=i,^'jCt"pe^2b)@#3,7oEcC5a9RY):lMiV<#AcP%#kZc)Fi8it!*U^>1*YifkS-"ef25IO'UcicqO5QVn_"`_Y[[j"h>u<:ekhd`$"2gH7lD$2L$pQ)labg%Z6[e[q\mo)([\7c"/D_c%=,):PA%B=Q'M$68qOn886m=Z;lX#RY.A8K=5]&0i(8tV"Z40-ODZOCPfc_sJR-"5#X2j"Ti..<&huo]i-u!FZY"#'o`jH5!i-HR@%.s3<A=d1o:kSSh^%'ef"Qo`#m(?O=4VHfHZKUQ9O$RIb']]B]E?qVBD)!dK)D`grDoA-\dFZM9!07Y&6Q1c)<J>WKc?9*$J/OuAJ%3>@E!?u36l.F\BKV,r9_K-eme>`?)\NWg]@Tl$`=K^4h\YjcVYjF2MQ&f>fMZ#aX6A40P`.QAu@O;h^8[`9/X@B&EYOAVG^AC+M)%!obnb].Q>:UZWAoJ3.-p<<hYt#;W=>O?5uu@F[rc_`fl.V553MU8Q<&?j>\m!%_<(4MM\/&Zh;n%f(+LbK0p4.blKu@ba8f\O'_A%8h_>_7SJ\t<O!`D>5C3[P=,?i\YnCQ5)^55(u-b]\U8!9AK(9cB0bH5R3)+tX<kZtIm*[KR&eJDQp\DCU7n9N>:5l)37"95OL66t%WoTRi+orO8Chm.Mc-Q8ZV`GN7(JR%]RYom.+A:CRGiHm+LFT7d0kL,0)i"NB!bg=NdmtpF$2DZR-1R%5%@an$H<$7QP6Ht%@4ZLq%ftJ2aNIX]SFAbNo9TrW.ArVoF31)'UPi_N3I/`3FG6$DmMhNu,h%o:Z^l6O'J<n=+&tr7h+AdibN]ahE?3;KE9_*S8K,=s?VutKZ%=Y&3h]>+[E%4+R?Gq`9D!YGkEap8&i80$It0]I!7%0=h`g$#l/?3d^<_B,S5-X!-('#NiqK*!AX96ltl#^3Ml0Vh&A:nA?,!.)5X%kiqG-!:<mM0N;=uNeJ]6cNGqd<%Zlp$$'.PR%C)[gPEES^T,YL6NMZ<=q4J`fJO^0%,(%[=XhID3S7o^m=6T3PBblkGpErWE[Ni@%Joe5bRXMRW#^0=uUH$njd)\iRUfP@V7!U';-q@U>/+Qei-pqC+',Q'7f0Z.JBT]"o@!jA`1>NJko7=`,8t`Pf%7YufHcIlZgBO`p%*#Z,;Q9_,P7%]>5`B,,DXg$UaX[St8`$2/g*)$r$gHF2mdWT6<1'PH9CmcRY$6e)I5cN?#WJQK(9"?]8:]Tk*<'H*8.KXp.V!qUq%j7n/":+N8IjT)ecCgiH=i^d-UN+J&QGrE7"ScXX/0.UY3;9j^mg&Z-'90mICd$>X8`LjV%?C*<4nfidM<==.SfVo5J3pa[jmXQKB%7g;+F@NuhKioGcCXqD'r!lt4'-5hh>MA.*iT.-TNJFY6tg9+a=K:(!Q"]F(,QmSJr>E!32EbgqLa/5=X'?<Z,nU+o&<^;d8<\N+V%k=E-0K0n3WA`sHb76nmo)$^b1A$-i-*^\34%K_j=.8riT&P$hnBH-2]8&^-j46FIT*"d$6+NN"F,SPmS*ATtgkd`5U4P+NtO:T7U%K4_SuCas@kLe5b*>itTR.R!^W@';EpPDB^5UbYIYfO4^T]Y03C*BG>LP[hNM"LcEua&L7TU*sqfWG+@Bn/tMKWNG?BKaEEXbAh-S%T<m1/JCK,h$`<bu70>59O7p]a7$u))YqVmR!#s(,ZVAG`BR;5!6Cp,rjKds-,)Dk89_EesKX,<VaiMM42HodrDG[5G!9WnqR>rSE%%P'8rFs:?GB)+!=\i!X<MP0mE"M5^JC.s1[?qu](.)I:BOCuX&K:Y,.PM,RbP,H`K;(ZdKi)U\r5hN9W*^fWga[ED].q6]JOu]#k%EQ/<#E#d^A@oeL-4(._/@[:b$(0cE]U5q*nJM2e!&S7l6Eccme>*Ge7#tf$o@(lurGd[a4j%JA3R;X^n*7/\9I]<AP(@*3a!FC^d%3&LlT4tSmrQ$jC=QeJ$]T$Kt#<:gU8Au'_9ABMpEOhtPBSH^/(T;AW")\8ftE>e5c%Sn&^dDE:`[K%!E@A#Y864S9f1@tZc_9Q*_%e-Mu_(nq*E`/JK1",=Tkki21UBkAS@#\Co@'S:T6.LBA@(X];cNbPf"!^P>bZ>P7q^kNu0ISg>I$A/ce+jf0^L6r\G$$-6X%Gn9:%:Q2SZ`5Y1\PXnE>%Ud%VFa>-#OVL]mVGr<TmnDpp^X,r'&U5F1a:erW`>;?-1.fPpf=R!o8=P;f2(^p5!le^C^=4H;9^>(Y:]U)Y%UdN7:"LLk!iW><*LdGRR$Ai0r!Ri268RYhkUD<U*#Rj]]#=T8L&=qqj"X7RuK]AdhN((R:crMrA3Het[r&dIgUQb`]RXE=4NdA\9%N^9Sq5s4@>LFR/j<Y>U@.RpXA<eQ);6s%bZ.6]-M*,O10NiDSjjB3WhO$PoU!aD783#;%!_PhLZ["L4]U,]Mi`Qk6hTkcG#R*jBs%_tbnhX&92_/1M`E"s!,XO4fVCE(?dkdl`n4m_g\J+eYdDbDt7T[RgPG&[\V0Obpalj@OJ0c&k)(lMI*K/^$&NZ-!2)!q%p<?026(%"F@^5&SL$>UVnTKb%O9dqU)[G8VSf;cMe;?[XB.&6TE-<P6Vd3RabSh,EgI]a@FN2I@N?;<3;@SmA:"VR:irA;AUs^/Q,gD.08Qj%b(NgD&A^9VObn>2V?BD2-itb'XAY2`BlX;0E)[=\8"iNT_X@!C*(@6%!6?RpAQ#'!Rk@bh\MCGs5Z^s;8Vr>R27[BFO9K7GXid1i%jN4sm`.D`YWNZbR4Ek2#;$SYO0t#cFa3_o8(c56\Q!dIs$?s;]0j%==&eSb!:PCLW>G;K]?F\'OGf@>1S8`1^W!4Ul'p(l#AI8!&%eM%E,k>aBr34t@&iVIQr(?VV/OO)ab=T$7VYR"mN$^4R'UWFtG,5T+ib&rTEZAooEOQ'"D(=e@@3=7Kn_:p!"!@flHN:SM!aRs*[%PtOZ9,.G@pU8L`'F(1q65hJ@_-dN3HGh;"[%*htO[]2enpp:[t1#Ij>:+<""\Jhn5m78R-2K-(S^aS@c<<hALK$rbl5taYjK`#to%f[aq4YU,KYX[jeYJVq$5MObAVfh;BX-#?#5c;;(I$(t+W"B6]YJph6"iG*;:%[=N*B&nE8@cc;QNhZ[&<.[IWc*8E*_h2GJdoDk:%-4*cUidK"U,s't#%D!^L96#OoH69$L+H1\bh[=\3Hif"NPfrXDnna_X+C%q/7b+]$g<oVunJl+Z>EnHurC3<tB5;=6:p0o3T;L,T%-<7p%^k0JbQ9'a6ZC!a&9SJQDQDJC-PO(1BifTWo,1A;HTbpXs/AO#t"@HN[#m?G*0JK:M;Ze<U3ML,b_)O.P@tFoOVhsFO"QCr>%=AEni69q5AS,5&FNgBgV90*F4ZSO;LaQl`\:DiYf;'/_jXtY5Tld0#k1,OQ%Em&$13U4u>=,)K%Ic_96b;cZF8.=%"T+$4m`)_"?%-uE%L/9QiW4"B:/Ua+A83['c&6REE7OuRXpjT0r^]H'1025K>C;K.7aH.`oi<K<n%Ao9C;/FF:,/pF@*B6^<?1*4E^l]O5UNeiEA%4ZoW#QpmP/@)Pm09,LGN7>sJLJi*9O&l7UP:Z<l;lQV2$P$gA9kr#0?o1X1dQXjQW-.aVe&3+$JlY9*S\(m3UZ#mN_RE:&r5k`BM%!VRK'%&,O*baFP^SOl\r-'>PHnVnn6(Ge'^Od[..DueDYRD@I=1d)Sn252o30TflXX@`5fSB<$8PId#,$39]MSq&6lj8eg_Td+da%^1"&P9S5Fb,=7N;'A?,d1-ruYNe'bn&Cc9+HkQKQV_=A2PO-)('Qp[N'0/NUp#6N*ZWBigia!7$Dq'?7MUDq[m7f+.=;5mc<ZL_%%V:'!DF`_CKqnNKY"Hka?PZj"n0HV^D_2*t:9ZkW4P[I!^?5k?p^i3;dfVIgF#j=7>lp-uhR$MQpPVV>$Q4[D>+NeCE9^DtC+/R1C%8i`A_Gln(56Ei/['9"6"Xpme!BSbb$JjX,[P7rahQ.BT2G*bJOpR,e3?DBW)P>\0A7!:X^E$O)TUjJN\+KP48"4V\A1ZIJVJ7,!?%+<Ln/<fE)EQ2ZO:]%jK-;U!uO<=P/9o-BuAZbfd(&-eH+"UZaNLSY!4A1T*9WhWc\Z=:@S(olNDN+u?Z.X*"W3O/_.O3^E5ieCcu%m2]1B`.c9GXG&i>0R6>[Y.DP:<%p&Z'8i'*QGkA9Feu>U-rU9u"PApc<EtnB#P:uP+I5ikXoq4@&Cn3u]p1^=0VdnY:M'No;7R2!%Ts3Gi-f&oJ`PktcAlY-%@qD"M)ORhD"ctAd0rq=o*hi-M6(/1N$XE??Gc\f^9L#nL#@pG2?N<*KhMc>0^e.=n\O30dbF2d`0Q*!B%[Nt.5q#o'#<FTCq\ZCDbE(HdU(CeG*6:9;cqGA]J5t)i;H2g/YmfY=E8L4EI`h?s(I&d;bpR5&iboKo@&omJo%Th1cRAp6e2"Xm:%9?Wa7PsJo4nkeSVLQG)c>QOuLN&!a8?I1hN4t1hGT$<-c1H7J7:j30>VQ-@G<2-l&Z\<1n_BoE.TJ%6]e3Ta\WM*o(>;'9-K7X])%%!K^#2!Fji_3Vq7T^M"DN4M,Y5;7?mI!T0KK3DN:,#[2!R*6Ce/PKP4XI&%&'6lBpbhY$RR0A*mFXh!dX1BSEf&=E/+[`No*Zf;j%.<4ZEN4FKH&X]T`g%EbfQH8UlG+e%c,q1)(nt%-k0kCkYmFItTGTDpVVoX`!%fha4&hH]kC2\>:PR&;45Sru][^>iSLaZ+)_4Jbd%^8Gj@Z3!Z[LpjBNR@HR6VIj<fLrtZG+aV@?=&k4#%!<0^<QW@'C'\oA0uf"Z=[VJ6^bRG]Mr.!\>R9s]RF$af1no;=7g5W'OcI:]%iurck@k6K6"j2h?R/t,E1YCmN(nLj1U\kBj-CEgRJAjMR[\6I_-i2Y`"*u\$LreY^"T'[>f6@$]`cjFc85q8pab(e\@j#Q*"KUlg%Y/(``3dc=oH#AfZW2l>k;^V*6G\1d2W%:Ju"/p<JgQsOkLE8(G8Z5fT3geo:#!Tute/^3&W-V)WT-oA)Y+3ihG2Sb(-;ViE36/gT%pr$,Pmb'(J;4O#Z`ugj_WgjK#l4Hj1O2ECRA&IoNioqqqS.o-E4s'hFb2X!A"dDJ4C03F;8EPO7'ItY9`T7LSPDUi'ZL%-P<W8@.%V2kM<Z]\iHC'Qc9/7dP@"M:?WV*KZcb64T@'h!^_1VJuH\k4Q]eAY`Pfhf_:[m6lA/kpIG5a6o@=!h$!C`/MT;R[\h/;k03fr5dQ%cT+9;FTV,s\%n!ReHs.kR),K-3s'142AmKRjA,W[RGJ7Qq^pXj\)'8=h!90QqZ0ED^=n%Fd:d`sRtYGH@qB4[q>JL]=1s5%rj^P9%a4Go%#=%dnGZ_NJmr>65?S0+$#49*f;/:EcnmGn:2Ae9k>3m?>3sUC=(VdF/bKmbpkWA\ZrP7_6+"Z2%%:epGAbg2P]as%<kdUF@%g%=`FkChRgdlnThju:<G&$[][7CIY!bpthk[D*`B[$S_U076JWE?FTu?B#9_>ODBi]>1V%hS^r2[9&c@k/*Ib^NfuRLoomuWF!UU%m</?:KQYe9mFF>s_re,$]:S]sZn,;c[X"N#j(T*hUQ`ON8Z1+pDs:_^*nB%J*p983'RVjqp$=PkXi@%,r</4T:U+D*?2+aYh;rcT%NaM79RX_g=j^e:O$X[#F[lnJep']Ai[(`5I^!lD6=CC-V$XY'_SF5YHXl2iA?]T8L*=7rbFYd[ql-_5^PZp4hEKWQ>*5#YJL>^V8%HJ?j5[g()SDkOced0!<AB'jJe4Gdi5CjY-Ag$YC>p0/JX&\\1L9!%:j\OP?a58<k2(Ga7]R"2E!$ccR[CON<IS9oV3\"^FBQa4cE%[l='T;S50U^[1?9*AkU:n%@qnLKD^Wdrs_`e(rKMg:=gSGPC7fhV?qV]6eUCmg?[RcBWJF8uu],gq>$"Wd$g@<\j>sct_n8<bM<6%H-lHO^O>gPD,_$9#A^HVgJ+27$*,l]d"QE1?K\-"DE.s.o2;XkiQ#:_Rp`":1*!`lh,W1;=g=fM?b[(TUX^kcCYHYa5[SXS>__[p%?\lGY3k,UK<CW_-$JW<2r%g\KD]7>%ZesJ$kqiY2s7Ufq<`bpT-Qg!GCV9!Xlb2_*e3(\oUB`H"OkL[._iqpgk'h)m^Y."q"=G;&%nATOskJ:ucrEcB\=S_-Aghfc,mmie";X4]t+]?\QP6-W24hZ3a;LVg1m#l-$g7ic5SS-D"Z'OWtT9lW7C\aUr>5i`&2TSq&h&U@T%OO@^Y,?ro#)/`'?4[\qieN?O8U:TGcnUkO?.Oho0Zf2jf3@(".@F-"$7u,-eOoCKn/.%#*HaM=>(\p%s-Pa"Z]d%r&E&85k@+n&=%[\7hC&EJ`;N&/ul.3QY*6HlFk'jH/2p8+/Yo)s]Pi-eeYDYZYU=kUl_XhhI^@WI3^TX&1H<SWM)2h?7sctPA(3DUN]rfj,V:kcuR%X1`jY*oAP8LXR:"XZbF@pNiC\6*'ZCmF.f1Ql1%nmPOU_b@W2ZTcNotQ0?1Uj@!:\@]O8$DD5`FZqp<?4u]*?Z4kYSF)Nmhb0Me3%H\;<+YLECB@tn6PX"2bMIYH2!1<a!j9eEWpL"Xf-"moFYXRQ/9eO`cS.agt^aC^.XB.i6<lIP<;/&p8Dg"4NQS_*4(0(<msp@n2r%[MdJp,m=%NX!I)GR2(uDPIDsiZpVS#_e-C4l>3pjXo1$Co]1W@:2=dT,P7m>jQ(q0cVOeE)RCgXZkkPM=42+\[4EULhUJHF>p2A,%9kCZ*LXt1sI]'a63c9(10:VnX;F\]$kXt`RGS[re4mc@mX9`C4_Z*U_IP_^&lE4CiV!h3#o4aL)dk:77h4?S.19Z`"TeBPrb_j'^%Y>:b/RnL*j-aP#n9!HRI$NTS-q$@+1>.F$:WViEmm7sQQ8m:Bj[T-[.7-dag^Co#I>i=75QVbWMD)J`m`51EeJ(Zp1?XEB?,t)=V%g,.L<h`j+b.8GVRDd;Xk$X_Y],odTcjW,>J8+"&a/5A?InRccl!?4*(_7-T3T70W&l)bNn3p7UMb=0g'HB3#74ai*kG8Ue9VQtiK%.[p.cqT5S0E-D4prm4s^(k&1ATTkR0m4ZR-Bm/7ObtGYeG#n(*gV8'V0YojhB$-VcI3P/Gkf5e'AkKqR=9!u.qA0C^dp^ZkEgN1(%Z[_)b@7l@HBidpuFI6c=9_3@nX-*t!J*#*eZos9!8;AW;nYSJjjpL@HGrj1!.&3i0%^UZXdp^K#8ifWP8MTTfDk7Fp(%UcbVo.k.%\TF2OCbtG[i%ibiVY^4'G-ZBclsX%3]VI]\`ENF;,aQ]!iTD5`s-G\'k=slt#+tie)f*cCf>O4C]B,ap="N>&lJ>`e1"S*TC\cqg%0Dr@3Bj0YjS@M&2QY>5\U<P"<N(>dB>+J<ns.Vnc*rt66D5+EL"`nrI,P#YgU!;\%Tfi3J)ea;<2G<UWDP,28=cPV&+6r3Y40uY1%@SM4>kAjH_)eXD:[aAM&s1cc9g5DT0c$u7#r^/>XEfGsWSX`2KI8_=S0D<><0+ETl<r:cTB<0MZZ!4BrnVToP60l$^FHOLXh=[L6%M6hZYbHR%/^$)V=IaQ@:U6hLb[!)2:osNUmlQ:HS10VrM>)<VI@S^6V6Mjcpa@:YFo/fn#SLGAg8JUijAQ2>>5)fpII0`'T^CT:]%b"j[\\.hG%s+6VPZ(Wf$HbAR\eIo&+T9TQX/,2l]1>DG.bLO@H6g-"k/+*(kqn4.TGHXdL3.+cg60U23BeR1Q,njl9iP!NI3(!b@%3G=H`O'<iWg6u$XE91u:dpCC`^+_OX$s@O!P@rSQS9B#NW8Lo;^,sV>0;O+@isRT>RU6D"eD^k@B>iU$:[-6Z3T<#`Jsqt<S/21N%O-AbIajY@%>jf>Cq/Q!'3-cF&PNVBDWQ^EekJt[\\%_ZXo)(KCEbmEl:pu=<V<kJ_&b>i*H%(E/5=1q`+^^1ueeSK<K<JY_DO7uf%3q:Sh`eY/Z?b`0@>P2;=oOV*2-ql`^]h9XH<Gq[HcWp7nI^D/,hESU;la4DINo9f2ICsf)H\pdD?2,lq$!fEjoi!XJVL+6(nG@O8%?I5g5fU,1ck)m-2?e[^62NPM1Xm+7XDtB=Q:4M>abiX]<#-Cr#+dc]?LVRNhDnUpU[sO[ski&1Wn?=ibG/%`Ih)ltWF*GjW%Z[tY%n4Ta2>jR<*(DhYr_OCL?+.nK!?MkXA>29,*i]V'oiUUo]rHMH_0l,j;Ce>XiL.L1NO$!#=qd=^Zf)P,iO]N_b1\orTS5bbZAa'KM%jF`e,'jTi;,,i\c*eIi>\q9T5QX#n5/`Lpp\!b9Rk&Hl9gh%V:RE'1,ELZ3OgW1cP`GK,s7tbgCELYg,3jJ:dbus$aQXMRS[A9R3%#XWB$mr8Q,:fm8fN%=8??ch$m;s`,;e;V]Ad$Q`MctSQLRdHgLoB]$QrHf!Nr;)AXa_"I)hQG)Q)>Z9e9_m3VqE$Io=(bd^)eeBF%F07S<\oW>pe?g^O;jl'T"Zgc6R;rIWAaZ->lOEciFQ`!1n!@'KZa,Y`4/WG+T&2OSl18raS>na,h*,Wro`"Z)^Z7o^8uh^S!n1TS%?c;=5Q_Z`UZm*9Zp$8h>_FY8A#Gj=j<bP8*eY*3O$6u.#o']O2jG3_$IS@:_RhbXH/bnPEi;fBSB$AD8QLP*TAQQ$VG^AeHc*V7u%3l[mH8cI1&.$<L8>@2bScIQ@M@B2@,/@HgAIc5)=%lr!0VQ7CYqI\\t=G:<eU2LiSL05>s2?)'+9mcK)`b[Z&o:X+1RDN#iW"E:"%TSEG4k!=t7BE*6Rj!sHY4K(!P)_qq=9O1KT5NFGlCGopn8@6$eNnN#MF+;^+]]uot'B\Ofbrt3O/ilk4WdU_h??=b6$sMOa>2=UT%HYi&JMiZD&VZM$;NaK[Fs';@Z3W@*RYH6L5*jnN8"l[mSa8fH5Zo]QLR!@c1=1GFS$^qg^D?&e\bt[T^bV,reU!&Hg#l4:%8%Hg4%hf\RT=DiT>dB)2IUi1$t*V>Bb7AX[F$-U_F_:>K^mg&J;@4Ce@Rn?eCHth'+"HN,X0)@"_URdUbhFRrgK3='V?Hp)`Y2fa4-+o*Q%M=[%4&"A>Xdj$hR/q9t@MWX_E.BC,:J@PU@9m?;ur]6o?G:^$mFpmT.YP']i-uPY_TgK1IMP!d[B>Vk'.4,jU\VCm?E^0Miif]8P%\\$I_]6dJn4*-0qmdNq'GOFtF*PNtCPi`J5`B/J$Y/++[po\L@ReD^GZg%!o05p:KbrreOa#EbfjrWF8j1DT<T6oZ^^(MrbH[I9C%]^.-mY):P,AgLCEp&3b5*IJe_p%A8`FSW:,L\Vr&do#aW0m0Qr]MZ$+Nk>+H(K8IBo4pJ[(38MS]XS[T\SB"Jm.Y^/F==a'f%nc'%YL=Gllueco7h7*QlLgYDmEpu[&i&A(kXS--`[tD%I'ti6or?.!;N$tYAniG3c4DX7c%tT62g!>c&^dt@I`i%P.CU1Lij-`'<KqX4%pbkD)*.["ii+mDK[CtHK@ils;](fC5[aRJpFKP;Kia(sJ*lRhpe%8#2biQ8dn]Z\?m@V9/"l13pB)<k`@2W;.pgY,SaHE_>SeZBq%Q+YnXDgT40\$gP8=$j;Un4TbMH0gBG(S\@H)JoDVI=+rP(fduYn3mZ2G+!O`r=g2dXXuBsVEFXeN3!&IK+J<X;Kp?H[ASMP)o&4n%rSN(-gF?VE9g1PM2A+9C[,!\:i.WiT8fR3u$.J>W0>a<MIrfsNDD1rVHYI@MSc9\<V4=#@Hg,::#$bTUF!Xc":U+8.0`uf,KL0b,%*ZZ<29&/_r9>[CO*c3dh7D@.88Hs$1lptJ'**n:U-l\2:HL[lI1Bgo4nXXZs3UUiccn`<HF/jG[i6J:r6L7?$#Hm9KE9=`QXuiOU%YYD[r4I%3Uf:Q!NO=AeRqYW,1qQm7gqbO3:fni)BhpOKD[a8#cY*jQ$j0TB7<P=:Rb$R=oImr5\hF4eMqSMDun^^HX"u7-tAL9'5%3c78cg/iaIJmdJd7u,(Z7'jopB#Tl3V>[24]#tjRkmKms4p/*0<Wn/U1O@.O3%GX%8mbP<Q)bJ"Yj.e,.m@9Hq9%<c.s&bOP.%t^%m?`3*j\X^U?&rt_PP?hbNF]J=&U3NcN6n0qe%3uAe#^WE=\M=>oj=d_Ml(Z&7VGj)cAI]CN<#I`?CF`$)n4o,f@HVB*aH8&cnri2%C"_ZHF&*kgZOkKj.bZ71@dWX,"niST>i&Ic-f+_[1F,\t*0jP&MGa1fd+QF/c7Y7)bl<P[>J7*P'B/<9o`dL1Ap=#Mj"1nm6gn)8%*^\i[X(ZpQZB/MKK-@.4(hUaBS&KW.aIK;R3^90`B#iL`SQqQt,+Y-,c(?_8WRj?det/;LmX"Um]`ng0/ja_got"ASKt'ihM860o%Ds_H?MhP5\fn]?;qoA55YHr0QG.74lh$'QOK>6mT=Z@#n)3re]7Q'[0,BPD)e[956%Rfa,d6a([o)8mlnf3,R$UF_kSBB$ta$5R+%!VZ.t@4<m8X6MdT<=*KrXu`Fa3DMmm^M;M@AJ:c';`,TE_mW;t%,q*.A7NZ[HCd2.[CrRZ8>m>*"#k2)TeqVr*Z4`r@<!*^I?\.)%`SEUK7b&'"@U$7O>2.q!3I]ErWS$Lq/o8u(_V9dKEp%?%rU5T8;L:;ObH&<_VfE$N`SL[)CCRl@>r6FX:>,rkIZ(fh*TE(XmIpg[%*D'n%]B3Xf2mCEAd6Po.C+*]8Z\g/gB]1f/'[SdCSJ1dG/RC4:1j.1"CK4C?-c<jEb@\6ZXYm&i*ZP0^kC6R,0C-kXVu;TK%G>b,%d'R%t/,`>Qdc`MXbH`SToQ:sNHjK--<gFNh7#gMfc,"k4fic$nWR=IKBo.,,o6N3i%I8o6I2>hp>kei_-PZU(s"8&PEK%l6aOn(^%Z)Hd,gFgX@"5*mI=.J@Zs+^Y`\H3lB?e(#heBW1C+ajIAh8VPULC;9Y]"NU)iYQ!o458a5BAgj40N"O@J@5Aonb:5DqDmd]W&Nkt%'&24L2/#P.Mt:8@9cg)nZor0l+6>_og)RQqj%g)08$1Q:/FdfEog#s6O>J4j9terDep\.^iW-`hAo_T#?26!S*%[3JW%:p9`4BC%%!i(?^W@VsF#G[Nke9g#(PP-D7)=[r-L$l4n&1@8ajC/E;O)X`;JQYWQ@putP``/:\0.!aX%U87K\%8aR%Q)R(S@:E?od`_EAn#1m%n2pKHg2-M7Wel4u5tfZ#S]'R347,nCODnGAj%ZQ\;a+k)Nc;:1eHm'^GGGNYL=Xmn[KXIHJf9r7rb`07EB@f_37o%gW;8-U_7+e7%CaoAA@;kYMpk*paY!CV"2H;?\$,O]e!mcUN!lkN+<"8cm$sP[GmgLt[-iM*U9j@"l\d)jj8+Ct0SrMkS4eB3AL#quW>Pfd-"n@:o%9k[F"IKX<tS=VrTU2mkoh!ZXg3R0-n(-(dXKf8d%M1/;t(7U6oj<47C0j^dd[[Na&=>41s>C3)Wr9qqO\4-!:m`#(^_DlXGCHo7n%426\h*$_,5^f>bL%0<N4=C0MXqQ&E)WkI,3rG'#T)fDL4"8obb#*V2M6W`27IHq$":CrJW!)(e:JQ)^bk^<:OK&K($WsVjcOYZcR%'9EjaI&/ME[R@Jb]-i0cr1A!W`_9&%14'Qmq6_92e?/.PXZ:-j`QZ()@sN@DGb4]$rD^"A6.`M*:R`Tm!/+-`n8)qi^*P!`UZH*+%^Y(mgM78I'fKm\#8#<DRr7gH-p6qO2Xo:n)W-j.uP[JO7REftbE^.0oF6Gj+.up-c1qsl4Wa"<<mbc:*n6q(GX.3^6Mst/+Q`OdS%9`-fDf\(%anNFR_#''^#gTAjRJVIVB`ESrJOe-`Uh-N$Ub45.IHM^47UA$U'=`DQ*gAWn24teOq\?!$@D%noiKO;6QZc)&XIquAO%2SEWN`oZT[$qJ"kbEZU&Nt,6G9f*V_-%kF.--)Y'(YaW]i"nD=X2(RLYQ%;$2SN][(j=X1ZS%0<5e6ksbP\8d+Kij>gg&P%Ei#rS%psh(jbbA)X[PVlo(:2qbQb+jbONC\Q?>frbB=%8RoQnm`-B@p0QT"Z`jY"t0g9mZ$=W2SNQgmFU)3M7NksCDjRTD50Hg/Zo<75>R%iOCa[*e<X!ep2p]SB$Tk)%4h8Vc[I!nAgltKD*E,j\9OCl^Z&kfm%[*m?qZh<5\s!RZkHFZ5U-^X[-N6cl0>^Q'gks`auT9r:ZTb%#DtN4O<$987q8iAf^Fg>=uABY8aS\th*Je]<RDQh5kc\0.i)<8<iMXKHBgG6iM\VIs0"<2A*mE$kr8Jns'bg"U_>hiND<0b8ol]?%lSSnP(%ic:fK9=@`9ISW[jjJAIn,dsKD)7SfC$"95Laq*r&TDGc"?_)8b6/eZIS95oVoM;)dK*S\)=`Z-MCTqD#N2T9MWL(Hr\q+%heDgn\nIN3>8af^_7GBs:\7COST_JB)2^eSi<5lQ)inC;q;(`^1VLP-K0BM4GRN=5.IdWI@]PgoDXEL2K?@N,dhK8TN6fMF0F_+;%5d\d5X0RKmnM\+q6-t8G=@)'r<ijHQ6&V-aUZ8+eDuU*/$;Gl[2.grBK"\m7%1a1r$1`p-Olf%9*0maf7,P1D7XZ+9^N\"HD)](N%'<o>/_MU2i@9.'V3P^!@@!V,A?i]>L_?i_<(60G'Ead]g'V/Be*L)M>P4<UX_QTC'Q6V[*h!Q5+L84#tBX(E.=MX&`lQ0%[)I83Z%\-;i#.K*aX>AK4(Q4)#"SJ,uKd2S`t!$\O(q]mB>0j^Wg:[;]%dqTo9M2]cf7<.&d&BsUF]m&kp5Bl^2BOTr/ee"]'BPXXRqYc3;%A9N:tgtkKC%:j22c(2b9j1T?:h2uKdZZ?D.!>5AEEnIB3cm_?d1^N)Q=S_-aeZB7LJ"tM/Ft5<><PGn'nDFkoFDM<E.$gu9h@;u@%n<rY08+38%#?aq**bs(<LnUf[Dg2uP:(6cf!e[IB]<L9%-kb`Q^K#!/Y]7"tC&UBfd-UK-F2X]gPPmk=hQnhB[f*<IF[MpH!N@G#%]AD.Qq"Cq4dQPHG\a$!Ec.KE%6+\41JIHQ1N<(9`0P(KfNJ1m!T"S`%X[-YH[<H)sV"c*Qj3;=[^tDA`QUa;KeD^XJgMu&?\Q"qe%^Y_*!-"1n=,X.1")/l/6!AQHXh9d1sA1=U$Q[%;@Q>%[2>4\:NqtO`DE&9+XfBlGAHN6B2ZB63=a<T%RO`?[ARsYrXN6kS`6gF$=%+9J[)Q#a6ka)m-5-s',aoe?ah+WugHE;)V8%r6f[L4fX1>m&BK.-QS4\(oPrNlNuFFs/dX-GWT.f)7(T&9B)eG(hC2pK62pJ*F0h%C!4Vf&s-1RHAf;$Ym[Ul]$HiZYpsF'G#mVV+I9[%K5IhH3j&?8$?-B,<.p'IX"/,&07.(b*Y*M:XY`GcCqSiHReC&"/]Q-fh$(2<%fjmG$=YsO35kG$J#"NZ&c5<h5GK:G->D!u3^1Z8MfZGqtUYJP.)<,=H8LjCui`42=k`4^*oE5M*J[PGBDm)1TD#S)sm:Wu`_WBH*%n:#3b*%=TOcD$$j6,uNGI+32k'/Ne_)(rJLEN26o1jsNI44X>aD@MIldl>2OAWr^pmGol<kqX4,H=<3]]*uEOYY64.=tp_5_>YD:%adC[A0"!Mui,U(VZc[;8S&('R8c'B)Xr2)\F)AcN.6kOan0t%[D*_I,TZQuW=@B+Fm&#J\X@hjtl3JPI\$MecM,l_.n-fP+W5Vjq%-5chehqHBE6T,hJj:mXL?bO-&C?O_m,18L.XH01Xc0i%\9#bJ\UNV+t[dbd#E5?.=(6WsD-RoK:&HH6T<hB'Zd*.B$!QkW:b]o5S%gPZ,@kWA3&[<FX4*XfZ=?-<P`:/FP'APugVUc3:]'T]n`VSp0kmt_9Nj%PO?G>W.;e-Bhq3d;j3qo@na&]^W$2Na5S_8Sbc8=F#?%N)=!V$7=N)njP96l/<Vh`c4G,[?3o&b@6C$.Rr#=GjXC;[Fa=)Ab1Uh0[+OW7"^,Ue#Fd?]US5=%Lr]\lIV6f^6[=dXde-!T+e#Y%%ag/3E3]Yfrc.V@GJMGt[^obHr8--0iWH`5;#,3GqtJ]HTC,bZ:+96cl_[Ih-lI"FCP0?;4$%aLK+F0os)?Jeb'7*^]Oia+ia]9B%Zq!1'oFDLSSZ_[^qKc1$5!n#$ShPdR6_`H[<82(I<BH?):sa7$?@s1Xq(2i6!UI?uIbVQ'f9C#'m:4n#HLcO-r+:^obu1t%JVZ$=%o0WaLH/dECa[=h"L+s=dD:]cq[7A9^IXY411Dgd5Bs%+k"0`!V!$1%g?d;WUV,F7=,%3^JmGOYk)k[`p5SQ-S$;-(H;kcXunQ%u#%a88K^6lZqRfP1&[LRRW0cCS8?g[S.K-#,[;pd[G3$l&*+c82\9,:jnYO"cEf^s]0(A'$p&;b-/U*Q>.dRLN`V)?ijSZ-f/#,Gu_e%1u,tK&o^cC5%lcR,!r'l+E9)6e2f3/;I(Npr"qe9a]WC9<jU@j)k46)lS7?VYpWnjUZt.C5PWsujtU`qP]>bqkI(KWLQ5OSRc\m+%?r[WTKhH`n!Ess$&OXo?8tjXco98$k!ac+c9nI`:1lRXs,H]@%:)ltF)AH0)5Q6cmqkAhYd376GW<`a";e.4`)l^h'h3aT[0d[V4%0XFbAU$`C-66Ju4.XOB0CP2?<Xd!UL`h-&ZP?A5O+eH!hD(GX*<AY>dk$!o^oj5A7M]+.P3O;`'i*3J_J2U;JR-ER@CaJM(jLtuU%jesA<eF0?o:hH3qmP#0Jct3tRPg#Ba6`tIRBd9EhOiA7!SQV-V95I17S)MI1Y:AoJ&-Q&^b0S0@D0p,AgiAm+>MklOY[/GE_-$$c%\*9:Wi](tqgDh$=LWtJ&+;VXdD3^@,W?F/2Mhs]&QK[\Bqe;1Z)RkUC?62jf\5DX,Z76E4U2!!dS,'Z"&\*`dctfe$f:P26gpIp'%1%oqnZ2;MTs5`"mZE\fWjh:Oe%S&GVA3%F&[UQ9jIT&If0-8hCG"/NJ?c.kuV`3HpC9DtB5!2m'>5',PnIDbY[@]Xo[^:GZc,/JJ%qi?ee\T[_t+5sU4LMchObLc$eq^3oKf,hSP^NOJ9G\J&=O$;>2_n4OcGCO[gf'jtZDXGMjo(pO>HSr#0mgnm^O'e3e1j]/i[W)k,%CHUEieJAu+K?'&HC(L0ET)\X2*'Ok(rpkEDdJLh,[m'TZLU$PCj24XP;=2cFH*?@SjXBiIhsT*_m_+2A2SH3RdXnLmAp=tC2UQ2Z%3#Fatm_BqUSf,_s2D$/Bfe@)uhH?It8%4G0>G`85Fk#g::Lj/-oGsIWJ%TdgQ<:ZLQaNURnhA^8K's6MJmUGtnFVLDjIi+LJ%kjQ%>Pb!3rb$H:g#m,8TV$/:g0@`")`AVaCVSM(9HWnnCNftMF)d:*ka)%d\SeP)M[!HhN.rA0IdhA,@o2ph:@n17p%1P@]:\Nk@XUmV%l1N&/B4:>MgO<ckD669;ou4*PK6fIoFpE45AISFoZdJREC-*=Jee/pFj4Z/qbicT"WIo(N[<==QC]3dJkDL/kBQ7rR\Ym1E-%@t$%]SXP_S_VaW+7,%/o.CI:oHm+Cdo_lfDV`#i2Q5p_n+NMB,>+hAG6`U=G'>\GrO(ncNLOPFTV%j(H':,LdtPc1p76u2db"?=[6KF*%%U3l"#Q:cRp[S!Ia.$dqhLF0\GoR8#qiW5$HVaY9ol^,(cA)p",;``'%XPhYc+j):fQs)Hkea(Aq")g$``g%pMauTiorLHK`l<Wa%n'VHs0P\($GPht\d"TGY"HRF_GTmCkY]OLd_,"AtO!K&'592ToKDtD!Z0<p039\&\5o1;lf:TKthOEYj"iL38EVeMhpd[,M;"'-g%FO9fQ2<^M!o%p"4(_g\#Cou$tYPe7Ki74=H6+7rm[PJ/:dFu$gZp@R[4!0fJmG5D+e(-Rmro.YXe]0oBhFSa[h<jX>bX&]KJ,?N!%#$k?$>jKE>j5#Xm0Bn+,g5Bkg^]*dPIF.ublY2!'9ZCMum;?/NAK^d.CZG.:0@nPVIJJ,9p[`<Qrg>h2T<F<IM*Y"R9Wn&l&+2_.%A'e#&n`R-_PWn<3^\Z!S_n[<4'Li\PmQOk?Ag2K(\:+B\`h4F1)XHeNkGa(<YEl=uqt88]OCL!2b4fnQ3SF(Lje-toh(be;qo<=?%Sf#tgrV4[ej@V@j0DAL^39Z!.:`'@kKl6qec9hQY@!p=0n(&^Dkig.eZ'AYmeGOQX#$q185"c7"#D;!ia4F]5(q)ISQ(BRa[DJU0%d=`oqHJP>^T9q9t`WY7Q^@R4=NI>lEr^%$NUW?k^%L11k/e2WT%6>?U>!8b?kL[]X*P-a&858\djgXLlHE['H?Zm3\rQo<IHHA`A%I=(:$D^G#0&&4OQn$9Yj1nK/!4GgeCOSg5If5>.^%=<'[I\#Zp=3D]_edK^X*Vo*l.%&pbYBtNmIG4E@'Xs[9I*2@FYjT4#P5XcV%oCHgQZ,uHMeu_111V_bYhgJsFJ%PIOlbhr@0oUB:?=2UIH^aJHnFY;\?eu:WgTS*$LL\ZE^#*G^oW*7cAHH@[pRZ;Ie%R1Y[s%db%OSS;4MgNY!ZG6@F[do5/QLb!@`R"P.b]!M"D=sN5IXC_4>5^&LFol0o7ubQ]Z^un#rV"U_r:[\_4FWo^Z,Q\0hY(R4e$lL9HM6T0%k-sZaQ[>jYDkC60Y++)]X'N&LhHe7uepV;75J"mN?FfZHm+_D!^C?gVDsPq\`jt[)cBjN;[HMsMkWF*RoYBb3_<m;+.=]&_G4=8#%F@R:^/r?1MhXD9YP`TD+kU(VCokR4H_[k[6rj@A#<J3644]m&0a,f,3s/*FfOqD`Ik*oA:I"Ub9m71AR;P&N5PH`(Khlq%:K?oS^%DkO!Aj+uf`62*;4Z0tIRZsLKNj*gkpNH\mCrFkXP8>ke>K9It=V1c?!>[LTlL)$:T`h;/toQ*3n&*eQ;,BH[X,(H"jp/l^E_UHUH%'NO"=et<9<6(Ml^O^l95Y?&,BK-&gZFX%f(=T<,4HORT$rMu3$F:s5_r?/c)pok&-5I*$L("RlST\p?4p&@#j'\8FLl^sSt!eQ2&%p7Q*tB+DMWM"^jWqHABZ<m;S*o608h_PW+n7G^fKM`/OL@TQbW%kiBp)f`@da2,#U]?_kFh)Ok9[.J6`s1J@1F^[B+:sto!(9=\%%:GjRQ-Wp,dSR]U`Rok4'ET:RPL!-Uc?cP-T\U@uL61j]WJ*1303pS2XaPVL&^\^Z2olruKnMkoBo.MhVa5P%Y2%X$;FWB(p7$AVi%nbT!XGjr!d#7r49&"m`3Qk(b9;4ebd7@uj3XY(^(eeZfVS%-Eg@qMoEj#%ff,JMqdc_&:G&kr,g('&6G6$mX5YsW]H'Z[HnCu%]-%:ds/I_T$Y@ED_*+62mJJP0t\"'L!J*<.%<M-b"YK?Tt]35;?Ve['=SC5WMBY5>P<e'HnJ]jQ+FN:KcTBCROKm=H$9/4u.>DpM]qT%nc%?@lanNY/8^)S]Y;WVQN$mV"FZGGTo#k@cHLX9Il0!n>0nF:7b5JR;NqpD<C.oDASlhk?68^;GR*9k%nXlU`k8_U8,,1gmgIgi%8rB4PPG773H;aCfRA+>fLih654WD<OW2?(Mi%5R)l+$W'N])haE5m8HX?W?gM*&&5Nk5fpf.t<g(0?B<>jBa$>VEk!\/#a9Z_+nb%H!,gcN>K(bBgV)Qf'\U$.^$a"X(lKODoph-&>SPFb.CuZ"f4d-TH/"7hT'T9fJ$(`?gcd&ah;')fVSn%Z[)09;_\N7o:HXM7^eUH%m+m00PS9g&&_'D@bgc#2XXetsfI>.[8\SsuFSRP]lTeN0YJ3<Dh9-c"K=BtFr:kM$G"=>R(*FL`XM7<\:;BtZ6h(7:1^ZWHdKZdK%8\n!PGl=,#;J]ZK/Ye<TR6BEZ)eL\m=/.X!]0'MU9l<P`n\)S"\KqJ"795eYkW'!)$]CF18],/!)M9p=EKmGg()G*[mfqe4BmK"n%NV<rAP&`Se=YG,aim!n>kfNEi?2=>VS<&\%#?/c'k]lD/(A2h^]_l$PU<)ImlsP#lf<?[.IiDV4;--0-BBX0DX"c9c9!-C%$Dm+%%pk2^lp*&=M.C7+*<Hi&6m1.DR@nDMXEaJ]T*9N/DQuH;#O,'X?NYCS/0V>7Wc<ur(S#W-`eb=jN$KP=5^eX(8d?EnZ`g*Un^Y^U*%.+<J.`(iM8,Ep@X2s?*ba3KJ+[re/OAQt1)kODBJjh`]<\mbAU9IQ_-9CXo'*p1(Z@hXuh4?8Z..A/P\1#)8@3%884fL3eN^7V*n%^-0H^ou@\/3?:^=PDiIYO7h[TY8Rd^_b\U?k1<67O:ftB9CQ,F%?i8*1)T(T^=fcq=CtGi:+61+dLo^Ncd?49>1ODgcQWC_lgJJi%n$WGC(\Ef\YSE&U)<7$1'^PY^)'8)AINCnb2DWna*,\0-+d!/!lM+obj?WTt[P!!N'<=6+l*GW3gEX?V5ZUGl:EW<8\9Pm))'1@W%)>lLt-->/G??^C2$)mR/?A'RWQLK8a,We2Z]TDJ^K]MoRdXoeaMMjj-Yd>5lak\Tj-@(Vs#qpG=)p1elT??bhUforNGQ[0f]-S4<%10#ZE97O.bFD=;#B43MJ8pC1Q%sL7..IMh%.?=(\M1U\2%:[B,U?%]s9LKfq#ug]PPAsM>kTDsS-tT]=0o]:a0lBUM_&_3=@Qo_G%o?iONfMCB#\&Tm@k)5L&KJ1=riR@>?b&;LqQW?fC0-]MUoZJ\XdJXmAH7s&"$]@$0%^_F!HD_>T:Ym_8$O(m[LR?nL+T90EWlq\Z%!BXeKY"0)BD-:%89\&*1ea7V\#-J;@3lI-%FYQLk_gJKG@c!;aI_VGNm?4BAg..7O=]W0m/_Wgg797&94"J-pl2D;Lc,/J.%k5H"%jf?#tm=(4YA@^C71ND^CX;jdE-uUm+Kk5:mI`gt>jmT*hQ8g$=VaQa3K=?PWn_d0jiiJ%peT3`ZW/K`cKuILZe5/*VR8khe`g:+%%?nUV*/QBa6c^!r*/N,6/L.?G8,hha$quBM[U8:=Ml@>7/^RnN#]o=9UH`q!3q!lXe-/*t5#nhE)HASN/EoUHo*$cHh>+.i0c25j`%H&4Ek]:aVu0%$niZ_+pgIWA29*j"3qV`;j-MeUa-64(?kja#5CUVh0m`Hgr"R;WBqcU;Rh@:q`RAc;2mp@iAXUhQ7IJ^7\ad[6FH%nE%S>FS>-+.3Z=-QmlWCRJi4Xk'+\/:3bcr0i290`fcdr,YW2BHDZ+&0-Ul.rL?"S6M-H":lh0[(\a+UFOppSVjo)icH[Y89tCne%G9<rFUc&A>dTPr6(m-_[^DWWrj*Ug<DDWjZ]?&KV^R)7po4,#Wg"Gci:Z'WC@9G1:]2h+k26"R!T<m2EZ!NYI4M;LDrM8*?BtYq`%25;7!D4%L7KnT9orQNtLTaQ(bc\]Uh!'QZj,a:NmH!!sG-Bb:$1lP+4@!@^=-#lmJco?H#s8FRSlEN<5FEU^QNm0).\+=[CF"jJ&%mda-4-s7T'lt'1TcZ;iWl[[<*b;k\8NHDb:.:lD1aR(EeYAqN\Y:`PJV0[8ebHKDl9\/M+K?Wu#m*)jGIii97l(M"-\b:d@QYd,$%AY._VBTI$t4`k;nI/%1B4<c&$0u'68Ocb9P41SSGMSW2')9i('2u/af@Y*S6>*IC1L^E4,)OX\ddV"WsQebWe6LKE'Q5b:b[ab7m%pY(7DT@^7uea1Ua2n,AZ5t<lCS@sY0Y/M_<kf,*,:0g5R?U6&Mni>4HAI^1>kVB1B9@hJO=4"pe"j^(6QX<%FYklXA6^M.GQ`(Z^%6Od=M"^Om2@&Y'Ur!GJ^/U.a_FSY<7D=s<4kU%-*;*h*BM_ir2j]Be8H`X`3/s26c;dm+W]9-]BBBR'C<s"@-]4ake2:B*;S@EuC%Y?n4`js-KZ)0TlPqFq8+kXKk_XsLK(\ZLd\nZ@cuCn)D>&+:gc2-DH0FSm/M@^+EjX`m3"PiN]h?>'(Z=F09HZ+csT3UQL!7BS!5%73Cd;jen>?q,e3=b*u:4aW.I[<7.5%XB?W<"c78Haq[a48u7,9r`Enj8GTK0<mXt(%!LcXeVBt?q+Fr=/9XZu6C&&h$;-%95AS3)%MVYRuD3A4';6a?6J!tlF&<iFG\]Gs#f<iU.=Wa\V85or^Fd>_;1+,k6p8m^OQ&g5HX4\o_oEqbFEdRQIlkIT?-)RF1mA4FF@Bj_]%a@\P;<qb0Vkc?1OGSKej_BeX;gXN%P;k-s,A=?el<F@OSBtOqWd-T2`j#\^4JM0m@[oZQ/E[)1'at?E3/qV2(V'g?BDa-:qOYs+F%dn2I'pTH7U?9=)'?m?Q*9\hqh3keuu<"kHc%*@jXm-NLW6jM,]7oj1nREg[=?6<\!!:(LW<`g]K^W8s?SI/lK^ot0BrkhVhdHTmt%@XUipQ_#cj&bDQ8ZP9IT8WR*<f?9.rOjV"moqY&Pl/IWofu/q)\_R-__q@s0?\,QXmA[P#QdrosNoDM!.(U<#p0$4OTiW^fWZBeN%MY.@H2!Jh--#U[fL5"EE1fgGa3,oUBT3!8H:f-;UETAPaP^hf:_M!9$@n3[1-W9d/XGo&5*]k7]U?'(\Pmd&V\4U9\'bn_`8=f+)%W)9QQ5D;8o9UFcaIa>CArd%Tt]TZW52kE<WC-3LP6lHi\>`!80-lJ.=9IWi"%$S!>KKjLSP[roc/XD#:7s@T$g$-IEEHtJ$^Up7%%(B:4oV"9D`4;STt1M3V;-%&W9+sYG/$HdF-Y#K>1,pF#opRe'@+p/k@aiWs!;207_Ls/8pi7T>1=GA^LOiaUo/ZR-<8k!8gj8@4\%b&d34F0J%C(p96hp!WU(<?4QW=FLi"bLq1$3l\K(jR)mb)T7_EPLtA)5+)hh0.Xfn5+eJX/8aKD5u+UY);6MQf]2f3$coWK9-qa$%-;kXXWs+FHl:NGK:1gG^\iS)`^"g31=QsKoV/UDcoL80o<AEp$fp91JH<ZSWOWmItd;dEX<asMQeAL5nkE/]0?Op6;risr%_kgp1%D]PHo4kpq?/5"F0j^kB^?TfAuXj>(>)YJ%u2hGWWELjfb/s-U^ceL_QHFWKl8#[^#]^+M`D[ACiHFUnMPt%e8l0@6IIBfk`*NWd5%HY#>i\9#iMKW^IuO]f,h:/9l^SlSTs&ap6km'E,]Fcdedp1e]sc\%tJfBc#*N[1qIZH#?tk>98XOi`]K"(*V,Ydc;I+?#YV*.+#H%7`P&en+S.aSo9*3fSD7/b`)8.Is2YdN/E[*;2)?^+`s#sX\>0'b@JL$I9ebTZ,RC5jo!(s69CgoJ42]afI*F8)>Z@[6HHQG4Y9^e%:\L'h)7O<kV--T#$!_]o=u%QjG$F"_#Epkn/3_7lfW!5k<Y_Urp!Y7D`7CH$Z1+_B;Oc9^22Xp^.oMkgpN/_+"f6\2;N^h?qtX3e%@R'$QOc&g@B<OkF?I#;i(&QCj#("K>:<Vr:%$H$QC?["=]1[2=PAL$nb\T7>$C<BccFXccjR_PHoUJE#>jB%nHR[b7j-E8qjnnHl%r5pg[_Stsd'#efSV%bO.WpgZoiR6arRf:uq4Mrj*$KCe-k7p0$B'-,Yg^'OZa6M1V[n&I*$bLGe,)R9>AF(lEB"O3abetgFAIfSd%e`\)3O)XZ-k64_SVXgHYMMmtElfpZF?AC>>*&p!JU)kNX`OEiM8/k@mJU#/qj4B&*STi?7[2T>ul](DrYFcaqO13\i>oqf+akt`r%idVNC%:B!BIIM%>WOMK3^09?rf2n;Gi(F?aqlGen438qpLf:Sp/$8(F]d-aUoJ*uG/GO'n.o'Em@^h-iY@#;%c`odl_g@<V>jGs$%fJt&1k7tTL/8#H-1j2pk.dRpX[pM&"#5s]@kf-L;)g&_.CZYOL(53\\G&uL^DQ5W/Ng5-#^QVacAlcqV9tl\WiGhnPSTj,6GOOTk%<jCE"]W/<ur!L'mc;*Mp[l.HG#?c\fo&%L^g\^>'f3`s]a@,LAY5N;uCXCt%'m=%fJRRZ?`D;ZB=#AYp9P[-qKg\Sse#$0,cJ:'e%-WT?,QXYcb@P?tcj.nK6;"J/:)C`-e$hf%9eri!;g:GfrT@0=j%+XmH8bRM4^2$CkFtT(:WM8J'U-&tW?I/4;EbV]t8\%bg,J'-6%-Fm#O\;tFZ.?XkbOQ'$V&p\mo09OH&ldMc0JsXPiXtT1UDac;ud9U,L]*>X)?M'hOZ+JN2nGYCqIbACG^PF9oh,X1QFSV'Udo=ee%/e1ggRP)hqi-014?T"D:r@hlcVFugRNq:HIX6J&IktYIYQsEFQ(5ku7Zp.2@>llU@B2e7@4&\"B>#tkdKUed*mZ\X#A2RZH3K;IP%k>k<D<_F8'pWob+0!1F71Uj8M2-jCeS_q53IarOS].5)=k?:THB&(=G8'e*%0!1Elj0nb><7=Q:l0q0NV0(F+\hrGh@I_"2l-f8Y%,oc-.eTBhW'u!WA<7Q(n[cR<ce*1B//CeiP?&bJ5T2RW'WA%AaRP)(hlJ/E(dVGo0]:(@S!uU-iX6J&-9?)#1c_6d[9fs]7fCPr<%.l\D,VeWePrGit0FD8gPXRYn^VCS\-3hL/uZs(&bp[Og1!F1L%^r6,h8mU8;r>)TYQW0![RmXOOl$EH;-]mfhZJK/6qY/N79PK0X%4Ql[W\np\!%o8tt[nG[/_GVQk&o061%1>lC8/*I_<'=kgC2?MRU-Rc+Elis5;b[QQ#*UP0g?#srV'f/O8sgS\jh,as6Y)o,96s!%%bickuO3#$Qp'Y2CSfaA!Dp-:MdG:3tEu2IO9%,%Mc"l`&h_+XiX&_g`20W2g>^D*G=pYi;q8q$Bm`r7B)^"o;Dje_,;JEi,XtZT+%LcP'Bm\C;Us.[+]^ZLPkh[3\3Vg!C8IrPtm>hMp0Re`GO?YAoggesC50-ZVWe?qECZq#=_kqhpq#@C;/R!Vq'T3+R<c?!k+?E9/_%-_ks\\ABp]M*nnh&4Xc54"QL^L=jTVr?WmqmgWJTnr;DaogF%=C?Cu6mY8kFn(H>S5%S/(+r^lFWZWBg3u\O<.a0!`cA$qroJ4#L%':X^B4."+1ZQFnZ)[1;c".-X'foO^r?.4+VAThp_#7$,m-7[\I.trmsfgTOWKsb(PJ/Br@h<n#Reo#]XmoD^?ls*k-/8,H(X!>jJ%\gnGZ4)(WEI,A^G%e[NW,@.ChS'7PNou+1WW*@07F/_i12]nBq,UU.W4?9T((r@(nfgj!7]`5FiMlO*YhseU#B/V-9Qb9EF')e?<%/HOAI=l37S]eC+sh/HIK=7r[b+[`4BhRiM\f^PG$+bNeurlf;jj8-p"GMJa@%9&E?:A`o5Ec8J2X*d#3)`",/2r'tIS+6pPM=fYh%GLh'aoqoC.ZXM,umZM]a3qXYoH,EqEqd/e5GNI_$VgGI)<^3.gYkHQ?aNVcs?F:/VTsJ2aB0jSbTm+tVY-<)^o$KU9r!;Tr?`',V%Qb2EQoQ(AM3H7Olp2_kZS1b=7?`^K(lrr&H,,U'gCF7!co#fIkV\Lr*:IS,G4IBNoPrf-gTb5o9pV(@-1$KB,h1#!Ag_5Z]0qC(s%j<=t@VbpN1?S]fl<pjX$W9:bZMCVcrk]!@n&_$,;h/VKP[!q-6;FO8^)+=8f`#MKUc7jW!CO"0E/,tuFQuZ?hq[`</M"@QbX]MiI%'gr"tll51]^$\aj1><lIE.1keI1W;pk>^L<+nKHKni"_KYght[$f7,WI**AZ(k8PB%#q:MiYkmcP'5As?B)"E!9$C`qW[%Fl%^!l%:ESu**LZTNjlaC^h.St/?<CHZEdrH!;=D\V%t<6b'%MDipR`?/f'UN0f1>Ffcu(CX/:U8+iOsR.-9c+;*c>D+GiRV8Xa$coq&Zu0%qSs*aol,,]Mspou?WPCH9HG_%1[\i)rcpG?qJYg$R8nq7.<A<fbOn?^c<RETET<+hR=j@F[TEEnocCQRd@dM&.mi`kCW-KPQDP+0%qmW<o#hicgNd'qSq:J7XFC>an4T<X:6lB<P]_4"=hA<qCAIRk[=EIlOI>MF;itZRG3J25)oWe_Xq!H'CBnM<;^'.:GV3U(n^<(__%i/;g4K<DDmD'UmK@+^tDr<)_V/AaN[pLlRtq\eef\rkYu?=.Do\[PJckjeXEDmURb8QbQhBAD]MLG^j@P>n.HS2dcOFIHp-J5l9G%3"8Km`N2%=;F<B1hiGbbRgLAcfd04RWE#?b6;#Op<*cE/WOT0HG[><#&HU^>2m_^;P1K2&X"q/%ils#.^il+[[(NENZ(!,e:mG(C%Th/?id%dMD6a*f];c.>3].<iG`Jc6?A8.%pM`0!VASE_Ik"R<e:0_[/+>'qk[,cT]Eb!/.ebZ2apQC<`l]^d23LqZ$I6Z2jqRRdR%qg&.Q/oUZlFA;4Y6]GiVh!hW;.F72MZeRqfeKdmp)0`)i\+Cp2;YO@E?9`"33I-N0<WSfb'&'_)i\Ki=MS,7s]AdiNT_/"]12/#q%LpbnaotH&p$.Cjm+1^&AQS>=#oqm>Q/3Xgs<lM8G9?_37c<hQs'CXu)N2ekp-P?]FJjF[/,id]V[i`<04rc+T82g!%M_i#3/\dIJ%</jm[lCNX\PfDuq%Q<lea+`)h@S3n)I<f!:j4]ZmJ4DOU8ibr+>ih1O(;8/+@/lsbpOeIb660oP(jiH+l<@jmFB8#LS_N2T[5je;%BpH#5XK\!\J!%j:b;3V/n9m?o0Xg4nb33Z9>WBthPScJn'qfFRT_:Mo=Tr8<21R^?ko*QP\i##%n`2H*J@[UgnJ_t]<rqU;!/d`J%WN-"4UlsbHNp"6EWrgeQ!CVm;^'ZR2B>3.lel\3>!n==Q<'KlPWW4iP1f4>l5HgmY9Wm[I0BLZ4,MQ@-aqn:*:OFVK6r`-C]TfV`%NGReL;Eh)uaZ!&Ar_gIa`>#BBggA2_q0qCsnP[+$YO,!7UH"QVT0Vkl1<9_(XidoS0VcR"1RZ(0Z,%PnCh&$amQ(0jH1i1m7:]D@%CG;F<hu:nU*NI8^MTh$8'iXOM54Tm.jnl.N.h?\Lhq4u[Qcf3>Pd0H08qZk&eaN"@TtXl%DlCuEfC-%l6QQ#.^X8r2TJtALkPBU0%T$l5^lZ_itIUCVEC6*H7%e^7sNPrU0>edrghgrJ7^>`D4Ip^<U37mWWb`L\&Fi\Y&riM?!5n;]Q:\@pqq'(U^^?>>5r+U5dMm#=r%DrsK3Sa,qa-\1Q/Y2@&;Zr`"If:;09B0"s;?-PU+0qV`#]4We\Y;k/&i6G\X9`1"8qAlNu2Q=Y2E3A*7DW*865]slQIKr6r4gUfr%i`s73as;bEGI[8>(/XW%7HaLf4:;#aM`B>Wi./tuB9.,$_Y<k`e?;$eD\#cfFK46nFGAohkPEG?_e/UA^R:[!?X02No]Q)LCYe;C%cLj9o<53l.+7`[OK+kCX'rcsLf5IVFg1r:cossqaF8ZS\+>)4LSEkC7?Mj4Q/Ef41'*jThg#qo(bAhQpI3.:>cLpKnflR%<Bf3r6%F8ZTIHhc3/g[-XWfC**?*ZYb,EN\2J3rGo3Oi4H(htdb&^.&b8D&`K/\UFe(RqK&5^A_BP=`2Q\`NMFcn&pkNp-4UV!SaM:eaN"j%nU4.Ee%^$DfU])5AOl:8=/6o*>e_/sp9%?mZsr7gkPFkJ;?raCHK]GK%Q8D%=^tfdY2@'nqAm._PF_#`8717eT'Q+gFfu04fC.Wr%rP&%h^9=QRSWfAOch723@ee?MI\We\l<M*[Y2o,PIf"7JqpKQa%SlJ]dpc[4Y2@'P:3/UqY<LQVO*MV6l?@2S\BdCkn*Bq<ZQ/l5%R\tRQjWVqB)[+c!Vttgap>F`:IL!$3d0UqN44iq/_bebHiQq0Y\00?ZntFD&S,LG(;uLmmA"VT!CA(oIrJ_r-@K**eeRtK>pK9Du%U!NBNcfFKoc2lJ'qs;YBch0A%3?2/?\ZgZfebeZZW/$uUZI*PSfK8,'^9?$.g/2ib<sj)"fC$J3pN'o(1TRLXYp"F7md*0u3dC<l%fqVS\2!";r^mJa4p3,m"H#!V@hY;WT2uhitAPju80<[OLFgP;$oX`S2:f"KHo]E^Mdq89to(pq$Iq![&a7iZ\rV^O+j+A#GVfn(B%gN^3T>^LVZifSGW2Y-DlcX-nPf5DI+;Yfb7[l86?]:7ZjIf*_jV+oFK<Gl,g2#UkZIQ?5o)LpMOqte/)QhPC[LO\+:^6RRR[(?55%d>&O!a%Lo1F8tY=Y>>1Hk0_rNo;cfd4_rrW]YEq_hcbJRlhn#_@J+AAq>JG.lc26gETB]=qoe\Ig\\)>4SRe5]q:UgCJQT7qcE68%>!!CX?"gBWr34RRq0hT+k%anhmecanFfXsqP_[jT*-mu[Hq5o^h!$=@n#r9f5P8t6DKOdcZF@U"hgbF_/In99NbE;&DAb3.?i&U)%2kG..[sn5[J@[rH''Di8qTZ.4\9QuPpNnWQb`L0LpatVS**qFq>?T@`qY]">SKgAtI/i!L2t,A%I-]gn:IkD5\bm)*Uu0e`d,e%N%s,"4HYBKLHCD)se?FbQ8V)c-cP'I#PgKBa=T=O>6T6=jg<&?Q/>=Y;4@Vmb^SBEFPT9`M1rHr2R&J*7Dr:T@28,:`ubAT#7Im!?$%L%Ps0^Uqo7H%"lH_[GG&YjK]GX+10Aka.4Zo(!/+kGNNH=?SiheZHN&;9J\/l%SSD/AL@L?/0^`Q$i+WLC^#Z?2j*92>g*2ps.bq%'^_Jk=FVqdIS]%SXFFJD2Sue].Z)d+oN;'Y>G^dj37>O'TBuqcrJJD$rf?t>H]f$(a>)(O:YlIfF'<LpZ@:o@^KG+"CX(S0P:N9.%XBrMfh46\%a0YW:59(dFU&4Vts23Rc%l`(JQ<*iHSJqOmBtN4$@=A'/Il:[,IrM/I>hsX[l@N4f`j>uO06f3as45<^T3fL'FduZ7%So<hq*PKfb,oh'Z:0e2$K+giKp9hMUr[r[!3$.t9X#4kia-1hkf$X25*u>SfLul&'[SEB9\7cn*907%Wr,o727iQX;`s3S"7BL3_%JD4k</Z)]4lAqQpYl=*Pf]%sa^[RdXjZ<UXmr&%dI<FQ/SZUdf>l*FUo"AI'p>q[2ZbU]:e@FP!?b:>jDGXJGLEH61)e]%V2q#`.%8%5]$qK$q)n_U1=IpW-Mjdh.tEo.<Vg&Lp5l%RAHT<Gk=rUJ?5(Y\gI@`"u5m8fdhLSr3cJ*G!Jke`,@FTXaB`0gB9VmJU/I?Z*B%Uh4k0Ig,f&X:Cb[Apufd!;cZ)NrT_C"q`O:!)EQ?qsE\1LDr1eh`1W0HW8b_CE&V0l2BE>@/g)ZA%EFO>V,6LHG#;@M&`k8puqC>%/s_Je:Hp]%YJ6L.s7sp1Do9t?k@;uB:-W"?HMt#,[V&&c*Ja2A*p65.bJ.;tcdQ[8pA[1/*IX)lTb?K(\`]jpe0th@jH*%AWSQ+&%;aBJ\lh`Y3Xu6/-q0','AC%D&M=[9"ft@,t[.dA[N]=S[ntN&8c4]FM)srFF=:2]%]70#A1N/aprS3C08M>NP^P=q%/b&&6mX9Ar%j0t88q".oGN[N\bPg(qgO?"-d$SLUJDRDP&'VfEZhAVjsQ_,Um`k*=$G5O>K?Jrg.cqXnLI+!qfh'tXJ$o$+q5H]J!#LL@l#C?kH%`"Q4Mn_1sQk2jaT9CLc1I=#G)V0Sm.R8Z%k-$mh>G)sOK<iLgYff4;W%^>Wn/?\%F)sa7Bgm(B2?#Ru=-ds*7W)[T1ofpbc\BOWV%ro_DPkI@B>mAG/npA"U_T=<^6SK*Z]3V2!jB?-VeIH8ri1TMU)*KQsG6ao/t4,d[NQYVY<mYDnYr:bhJA)ihEe`)5"i!@4Lbit0%%:YpjCZKBcAkS_EcdG=a6Wg(tm#93L4hT$Ga,9Y+IV%khR\5dl(]P;'&,p$6f+7s[Q62oEYRF+,gXhOP`m#fi1CD1fG9-<Tpf%aL<%Mc59$KHYfF7abFHm3=?d?6$ZUMl?PuFZB&>aQbnbEUWYa6Z""gmlqEI:Z(uXk6GE6=NC/S'4LE5*TFFF%<:@cM<B#3l)B(9k[R1F%"@%=<+V&f'm=fc24,=&ei*0;*YHRs7qE5CrfS>leobe98YO=K%]YcsDNko$`EUZ<E>p@.3m5%4b!'eHgoF1E,G=Oi;o^7`h3kk0W%c"=^&5A..SWMA(94mM=?NU[>Ai7#<cQ(f=[f9c?WXmONT`)bgfB6jFHYO-MWe/RrECr`u^(XA(+kh%!Eph02qN.9\dqel?'BmY%$%o@;N81\5Y[`])`K$QcC@*rgUK*=jLjm@!LjInl'F(/+DWpueV,kJn4T?->/ZN;nA+m`!T"(Je,P0-Z_OpdJNej2N_rL@P%-`$1f3%R+ocQkKNW48E)QL]BbuHcNQ]56D:6@"bNFrU!V61!l<6t:hXAg*?GXV$\d).=qDP)(CK+M$Nicn6D8Bnih=38^/2oKQAYc2qa)HN%XVV1rp4Yiq[tJ?heI2*e`pNW3R#TXBj39NkqJU;Ed)e:kp>-,I501l4$,n?4Vr7X7r56_(C#hRG::\BIX`=_5]d(gM9s&n7L&IiH%:Y*&;qL*LDX,-W_*m@.J<EFZ0DCL1C%HjHF9/V`nXuGj,rb-ku)@[D5&6E:19q.KMX/?DGSib3C=ETt&Sj$(e(V'2OWOVh#IU8H9%;Wh,'$2F#Lou>nH]X^Ab<?]J$f3e/L=,_1nlIcgcB\cjeTf+$Ts#[\hRb1A-#\gSnpXA$Smr,u@o@9IO-7>.o>?\ddh73c/?G=,D%IXCtkpA]TSoQKQLcM!`gPLG`gMt]-5?SCZlp=@ubgCjq.oNOCl\tDj.8EAE;3tn@<Q$MWgmcs+R8+)ssId-Uhn[VKsPG$u]\9<&k%eG?G^9.TM-SloCQG!@OMr8Xu-pj#<Q7!7DTkr&B5VDOo)EbYFL`i%!q2fCgKgK$][l0fFTh[,AKW4mL.SOUr:5Fu]hG0AcYJ%0Is%V#9"/74hph],CYDaKN42)d'o*a)@<*T=G^,)*d)^0?L[C]i<RL:EI8i!S$S)f7*Y[f(.PGoG7FFIehL4n8e?cbt$BO:V8b5.cC-7%1:'FIRUPk`pRNn+/'iMFE9Ah)nre;i7BsTg7mLTg$)ekgpS`M25I"Kpm9b?[6_%LFDYrMI4#BOD[Uqa"YF`%J,!TN,hM=(C(k!L,%$fH=eXBaE]+1o,$gZ-0n`a<]Qm+UY6c];t8Xaet;@s%L0ht[#`q>.#Tlbag]dI1CIXFHVl'2\##*<t6ma]CDsNZ=Tca3VJGI0r\s%68n9cCP;;b#QOWGJ%4h>1Rrs!/3iT.(rh#:DN?k\\<g!I-+U_*eV8TCTfI.gLpFcI;g[^$3eZ*VH,.%eo()m;4e\(GIcj:)^No9*%1tDQ4Oeu"rr:n:2rh7*WVf9WT/0):/rqt!LVdI+tp>F)]bOMcuT38kS.]3&%F:C_6@?XICnBL)Lia1YZ)X(gp=Bdt0`8faA+1lRd%b(X?[pFfg%H$7kae)Ns$=$<.T7uSM>^jeR1@a"*-o@SQhoC;BtEVgGmK:,an*j",%J+9IW05b#Z0)p7W9VoCHlHaV)^!,#bk6MIS%hk051)=>Smh"KCTB2jn>O8jE1p\r9Ys4lIXg\5aMM_uaQrkIa<6Yj]uj?6$m*a1?PXaGk@4LA^jD,O%lls;E`EEk6CVqfMbYSu\u%P$'knn++X/WdEXTN:ZCkLMMP6D"IXa39*+of8dMeT5N3\ITr3^i7!TGn*&eqGu66Pci3fI?G<b,GBtq"K3`B3q"W.e9pjdDR3*PV%J"d$YJFf?B@>PZ7'3a#!q5uhAk)\tIZrj$&Jf%iP=OY<MpAE_QUV6Y=%J,p4A+\luGH<O%r^41O=L56dJb=,@7*8Hd9u;g;;r(+l%hq%)NH994<2LSdM=H@qQ**>QIdlq126:B,6HT\YCkJ'(7:6$<4k3CZqH#;pinF_f:4_XIAN_V0p4E)M,VI=1Mp03Re^/Fe`q]UD/%&$^9Sk'f+39KVdh^4Wknh>](hLNrgCe[7&[LJ`*0Z16=meS"73P^Q/aIF`%eM=Gn?O!/tC>PhorcZ8B=q()3tm9V"I?[n`dHPJ11%rSR-d5&tdJEm;!bpKmKQH8F:_H0sa6\m4TumVh_ro(^gC^hpqB?8i>AGJF)MPC.?)r&7@@.P:\4-94%47eqPe,Tk_;s$`,VgS:#5%Z:U(%fuJbPTLh>50`O;">b3]kMZ("XEi^uMb'T>"A!f%-WFc8@-J'3UY14Qfr1!/cRFg^MZHZpn9OXebOoOtQIpF-$SqYP*Vd!3^%e7\hFj-I@pD)\"lI91XAKi;gVNP5%l(ree.f6@*eCXPPXhNQWucb?(7pSSgVl##U%qr3u;3-*XFnDUP;iP%IOSm)Y-cT?!i[6IsO%r9a0rQ]RkiX'pD@kk./dO6lDn+1)&Es4#9kWu'>p0&3OOn;%$*\+H51l+1r^0#)ZlFp0J"X9dqEp;]u/i.CT;A,FfKDf.];ch@5^%2pqX_nj!'P[[T6`-9`aOO[-VM@VM+Z:>GB]NAjK\cdjb`s*3eSXcItGIImC8IjV'ZH?AbuKBnjNV^HfX1V*4kaf<!Jo1Z<Q595OZ%l']3CZ__8S;?$%3s"&S]s4gpq-MkL/99$W@r:*#Bj*UUB?UFU]8Y"S+4ScCQ]Yo5BQWssJY3XNSQWF*Jh.0#hAa6S6H(1]l"uj)t%jAM@'0m:42FWlp6Vm5<ul^Vm<?2!s&4>",&FZE4OP_@VbC")2[['lBG,t>Et9k0DR5kEGW-B&b<W@:I*VPP_EXp`_22S?N/C#bE4%gU_)-3K[@>p]_Tn2;SUEC*u33Bh;S8;V+[5VT!bedo%C1n+*i&P*>4[[-\jQnkGPWf>qoJSGFj[Urbirga_4EjaBF8@2`;s\&u1i%U*MZl.EYRfR<kJso5<hknU*YQq?/0a><8jF0Q"/f]WOqLaEZ`W)DNJ0adWE98+L?hMS_:YntMtGa/17l(`d<cL'_n(b[pqRKbjVD%[Ft0.XsI"oO:MkH0)q(,3r*hL6K8M=OClDo^`Hb4a2qf;(C7/!/'O9HW%TVW^:k#2mtm(.a03GIiOc_!n1nqbMh:juHn;cC^j,EI%+$o%tTRko.=is<tV5gkrD!#!]PrX3J*moSh:GOQ?e<b?q`S_Xu(/#p.0[VbA3#l"_HnB$:C\;!b2jkLgJ2-UU/5'+V>c@M,>eRuT%?-e5._H#IgM6;23KtS%O_VNW17C["",2>VT&)c<-JT\GEH6)^PQOi,ZoZ=8Z1!7](js<`6eb8a]'gZ.`ke$O5"jF-SW'4'*5@M<c%hb5B.9?Q,j$[e%M.q.R%*S@FiV!!Ms)j8KqcaH="[clK>lts$Z=P&S2U$JSeYPZESMQj#ucY3X@.Ym<=G7H]Z]KV4FAp[ok7e/=:%IC_!g\[\eg>EZjf(gS,bgmiLCN>?d,VQnMd[r%5<Btt2rD&.D5QAmfZ;b>iaNAmG&[d:>H)u!tZed@negGm=@B"QH6]?G,%?X/:O%N72IaX0Nt;1`qPk\PX,.R?9n>0\q`MQ)kT?I%1daIMuL[&Up95\'0Y!=UbNIFX0N>9p4tbi`7[L)_S6Y.LTUn@!^MnjHH.7'pJ-i%IrSHiEa`cW)Cl/]jj!Qi]fq;%jF,6^[Gup9KfgHaPMG?T4B>odY3,KPW_OBC;ELWcKb[]Z,JDc(AIl=:SR^qb/s7[G<E0>apn?Fu%NW7;[.Gls'KtF[MT>eJ]o([pC25@86iN9XF_:mksYV0KF_Z4MrY3ErBii\NR1GDb9TIfUfa13Wd)U/T^A1),=QoEiah(Z=nOmQiY%\K@LLqDDaZEEG]cNhX@F[>*KSZ23a3jB`Nt1osjJ7;1/]Y.54XG-ptJ&KB]kYX,c4A[[>!`/Q1/4D_F:%u:,)^WgRugb4Oq['TQ:%=]'>5j"7"KA,3nV9d:guO--mh#o\20*Xa3$8NW):A=B!MBu3o=J6qT)oCB)IBET8B1A9_6:>[1'3Q:QTK,j#/OQG*;C93XNN7Ogm%23%9^q&7A'?$3L=6%iV^B!_gZY]no*fjL57gl?LipB'^L6$6VZ,h\Pp'uum,B/F$QdZj^&#?<gD18s"-@=r1[?YN?prJQa/I/U]m%%.l(f/;B`n]j9$,F0IhXa%&TkSX,Bi;s/%7o%<l#/>Kc^7eW%JPED,1f@&:gj)Q)CCq:`ZG$SC\A+S#Ip;fk-bC=%qef?M$3U8RA%=f->FN==IN&P%"^h6eJK\8L\reQhkKaLJB>@Ut,cJn-RcX0`aIoY!X2%0'XM%J[`IjT$KNkr1j:PE7"OdL4G'[T#g[68qmaO$HO,%fjgs[-2SNT<<Y(r>ua[ZnQE%j7Q@P#SMB!%\nR*2Ws0O'a/\CD33t*Q0co-S>Al(k:(Z2SZ*WLUo(&i*0&F0hqpo?"K?<7q;6U!M%GBuA&Et6o!\-'MsgRrER-GjiJ*o=d^+%['t!fF)FNaF)N+ff3jM58YcMmX*gUgWqI;B1[5Teo?WZrj;VZH;u17n&Yb5ESikY`\"W%UuZ3M9<tk3a=pIi:1#eSpWEsI#\C4G_?#&H.S-\#.,.N==8*PFV1B],5`YWG5k>/.D\JWb=4u8eO2JT:H;t_ZTCO`A-+"9B@\/pU%1(/GT2-+9T8h3R6pgj?[a7k(tGr8a\fXSH!okEUWgQ0[#l,^!c)FtVA:l<C9-2C:`,`/?*6LKeq4ff,i&pZ'n:0r$`BpRmj4*ss7%OQiQ#*JkH@`VZB^,fm:,>!NX-?D^3n4/+,u8M)=sYN.^O+pW/sZWI?$BKDOnOkX?B6DV\'Ke4UO8Z0Rd!,>H1Es*6)W>s")@;93d%5[_^rD8"O3Smfdm@[Ja9_E#afGmF-n@CD8>=U@NA4MbrP!YCN]-%T?g.=\(LoZ\\DM@sIinqt`GW'M[X`b=]S9$](O7LWPTA0Oi3%#j2uL/a=.7WSrImKqZTdcpfRj%S?cM+@?$`!@%7`@C2)dmNGGIZABOi(Q+``dPY>HW%;?_bU1Lu*UsNo:];NkF;G`/`8(hf8s/Rb%AaGKmkS]VO&e-Z066j?B$*=Ir&7fjE:qV22->oR6_/!EnO)O$n+EUb)P0_/uc<s4@+&L$69qnjSfapSI3`1h[o!u.kFDVhu(.Dt^%nl&('H!iUfWfT6V26]M[P"!q,GmZEH(3#/aLR80*AX/TOSg4Dr8An"*],JE>/0>YG?Q!0.Z`8=;]<1R(8?kF`J-;8@Jql#jFE^+a%6;%(nbA.dcLe(QE/p[mf<qm!OK\pXra)K:@_,d3>"0</47Us2IkgG@`<l*t$9XHM#6VPC.PA+hI_K[KN+u:ambm:E_A:)Li26ck'%&.K(/,<(IbF"iSAlcHO9#bpQ-0oWCkr1I1F/;UnTT."'\TQJPGJ_gnM"AoM(P2?`V#D=KI/Hg)(^KZi'S%(oEG'm*LZAtB:&k]3`%&p$P!501a)&9]6]A^@rEkX2V2,OJEeIGo@jK(M162C21QY^jZ.>(ro\s4,a6=XjXG,UF*=`3AfqEY"sl;ojEmnq[HBEGDSl:7::\%Jf$#e09AJa5mPfh5qIQI#bJk(fNnUT2^e\,7gLq?8V!>d`(csGN9%7pKM[V(1-RTE1*f.^LjXc$CBJb/r222.-q9NER<f]:f_R>=%eLBWpRirQ!H%fM>P;!"I!Ze%lc.9_Y,`d+?hm_gn7pV)qW[kl,PUYm<a%M#'CU/j/$f\ABW\(Zn':%RnNua=&LXuX-`ChJ_#Y"s"%bFYr[S!n0RLdAhG^^q+s&'(d(6;C$jR%5gZ0FAr-+(TO-rEj$W#s2]Gb<kYE@XndWOl*ToKN56=Mc3H.D'-tDiktg*Z5U9Y@-I^m%dVbB(O1<3l,\$I9^'CR>.k?@X43NCJn^j0D-@75=8.3\1>m+'@V[/t.\OZc1(fA>fhU?H>JcsF0;Cq)IURWV2AeQ3g$qPtOp<"'`%EaJH,gMl#*FTju:'0TW_FBaS*Y(la!E,'%f(kQPA5QPgUGUlm)o_C<t,7V96Qn'j4KE)+UnU(b(He]e%Y4"9dKLH3&%_spJ^2??M%mgRAW80p0af46R(XE(T^dRk[>VtmL0)cGUG_J]\<61bcbp@,3RGFN\04NnDV*eCI_!>RXbLtMSk;#cCa49[V"$pI^$$4Mi@!A776%a^;j8aC&[ZDmq9@=f*7CIR')$RLR+KZ]0slG'**4m-lX%qllEq^m,2;KX_.H%r<^$5QI*,=T*;g>8.tf?:Q];;CpOL`3qPEdG^2o%pqNO2:I:`,"i2LgZ6Vb)P6@W^"#irC,s_M'2p#,[crg]R6JEY!W2^n`7$]R'!r_,a-::Gg#$\7G+qWb$/8%KVXsiiXJf?s#2%\7]%TVB$Li9!G_X2@)W0LQ%=T'Tq'iY3P#*Uo_]V?^$hUdcar:no>(<Bq6($d!<J;=IeSPq'TqFoa%6YK3(?`g#@0;nZbYpPN-X5^-@T%Yjh`Zi$Jl:VaQ%8Iu$r&9dW]?-2_GL"sX#;m0)>LmfI'f>U9)`ZB1b5W>0qH4EluCQOb>58:](hp''OhH$H6*2?*0cR;;q>M%:Gr%Tuk<b,X;pR._k6/_!_iFK^b60]!OC^-pS0Z^,FADk4Ko.YiN`%jmSEVO_"XW<^\8'#!s*QltjHHJJYOl4,!;1'VsMnA&:(?6UaA.%,$#q)[mhDk=<k\p'$U^gK;:<r.,kCoC.=EhhF45!@"u>DAH&VGLG&)Q0X&/cMCi@i"QBGAPOVjb&H@[W8<'p8oHkE\Lfpp[GJXXJ%clGi)3e%la^qbVGn*h-s5(#('$=Xp*JSFcX+Z-LW"C<pULDkkb)+M+)S&-$BL$K:l=dQcVjife2m2Cou&3#]UE<5!e9LlDU5PNtA%`53[=_*QO"&pBis.`J+i%YcEd>#o#>6QWuG&1\/)3Q<r#(WC<c8W3Z<6:SVrcraa2Ebbt3"GTq7$KD2NeI/'A)m*RP/3"Io!bE=!%30pA!bp<]]/s^<k#aqGs#rl`-kr<[5&t!^LJqL"!+:6g^pXKZDg,,5GOUt-U2I5s4!9?<4]>.oaL*W<NK^htX0:RUS-YV9?^GC8E%J_iNq5HjXd1u.6_3_)/ViHa[fB[\+F9kt>j!BtPF6bM7;;MU%CHA1fpoGAi%oFrQcG*MP-OqT$@YR(.;^^-ZB!aJBP6CRTMYQKR#%r0K(ZU4m&Lnm#9RLsVR9Oa^?!]%iY\c3X?okap:#:m'6nWC*"B]giKLC=!qoPF"2s$<XJceY&TTC>B/g7l:]N.t@_32]hHI:j9OS%M6tjDWBF:f)H3C!>?hSd7!9Jm94$_(KHB2jW/jK"=k6[5Y[V1"D)hDYAAY(.bO%biOK`MD85\EfWB)EC"bd7lh^cP7*]cd?ELp^1%lQsC8Bk+2r3446INHG">8$jE)81lOU5;=a+kc>GLTK'#AFc(=Y"A0Q#R&sPZR5Qgn91q?Hk1#lm?2c%6XSG($9dUttJIR4#GuI+a%<M#s&GE)ufib^Na)K-!b)Zgp3rpqh'J4]tEYX&X'=M]tq:tDWmT?PP52lBDjRmMR,F9N`d6ImSo89%RHb$CpsFGg'<;;gSXd[M(V%`06k6[[8Ec-E<e=`_ED[P]q_9'n\fP2cYeB@n!CEU,:K<<C,e.Q7e[:G\b]4RX,6L=s4Fs^^,hur"\:M6oZpZH50JWaY(jj$8>;0%KjH7qOJ6[ohD'Ok&;jrKJ@Cm&;9eISk^"G,:fn2,0nG3qFH;#L&@-Vte8uI'+l)@mhl4]U4,@1<]bI4hBAm4]`#+6]-qn3im)%&C%9-VhXOYQk9%Y8LkF_&9J!B3bH:Ie!Fq;DVbk?+se[8'd?FctA\i2k.lAT\%W_!;@pDQ*:RK*al;f+`mm+Yd:*57C(VoDsNrOoQT6%RA1JHQIl:DI!-\VJ\dBAJdBP[b_4MW*]?=2e7FYHHdR^+'-^OgbpS_n&P1^j5qpS_U1PZ:AVS^_mpKH]5_sr-dKss3bQC0Wm,C#`%/..<Oa4V4cpg"+4NBUR6K"qMV=;!Y5=<<Jm:Oj?tOh$c-O<c%MAG3lZ%je"IL=Hke@mbt!h$TYY.)Ft#0eu-"e#Xa<K@;_j=C,IJ%W\I&ZDA7AII1GS4SmOm0OL`b.Et4+?J9g>J$Cf6uUC`XN9q@&jK1p'b8FeAc/.CdOWfn9JTNd2IdMRpn;[WO$W"+6ZSln=XL&hT-%.rOo)MHnrTC^`B']n-a,3/>KL!2bQoWZk?&T^<;WKIB5>JUoKtJ;1<3=e\cG:L-Vc,\%I;Y.tY=n\\.m%;4Uq0Pg=+!+6q=%/3.Y%@"L()a'BM2&5)FAAc9Ud4tMT+!&<+P`46nI%$HM"J/TCX)QKp\_JAKrLIT0qStR95dhXlh'/hQrq<0U@FEIY%1_H_ldDl;2#e0nN%%"YVc083KB,@Y4X[B56cUM5G@2.g,:hT"_FQ8VkJ9+@&E>-i,)n8/l?2s0YI6AO7uo'YeDNL@"!k/n=0%8]p?%S7]jOi:-8,J1bt%J=2@m6BBT\do,brR]*A(H9F4p!b!eKIF4N$MuWkk@>i77*MsDKUsVglVLe.%R%iNg4%oe:SN=e#LirAfL_rLVdu/k&!CW1R+n2F$%7i3GrZnnAi''#=L`af*;J5pf5@Sn+7;?t\$@=odjFGI52DFTA+1d`Fr=\=9I7W7V&DfHLD"?#@"ZU(.rKI=ki^>b>A-%](u1CBiP%RG$#UpDA\h:'W$r'LEIO#T?CCTWb3p_+o`PBbcim2JB2Hi/icbNj]]Y.:hCA#TjF<[rl#h>$<]-P_F*=")Xtu4@8E%.#j#_1o<2c%f>fFd">cI<"+?oP]Imnk#Z:ZOBZ^h(0.?o7";Gd250QmYd^`qp+92bdksD*&7>-7H%e=AuqB8="WkXX26c5Ag3A=d$:"F$q5$#&s%iu$O>X<4DtZE_a'5jOZ@NlF4i$DZRl=L(1uB)jFc$`u!s2%ML%:<R$SW]8L(AgUgV8_7KFI!]-A8AXVLI_0BPmW'$GY_j;>M?"A"%GTqbHC6d2=dTOR&r9&S5WO&%a!h1(#^a[n3eH\3*+"h^U4B2A\N3dOn&B^AmI#Hn*F>D9J9B%G+;_UTu#Ul7Qi)o]sCsf:]>Ci-<%OVq+e(qQse3TfE)V2pKG#X6(#2G(J%!*5Pi/!To3"F/<Z^bZ0WUKj",<=HZ^&I3o14[UA&l0hR8dqI\K6nOc/Pee(@*0XC7Yn2IG%-5BP4cmXk,B$K(AVA0-5.*e]Do#9VPM?[=r&2m\XOeL$VAKipoMWOV#"$70ZZWpY+3fVNrjc%rp5%UC>1o-Y(!ZR,4">P*si4N!5%U@J:#d?FY@=Uc@@p)5?A\YR*;0&(f*\RS=EJj&Lg'C%DuPqnfD#0o4WaQVRWl4>OY<0URnn27!&)FDh\R1r<i@,_p&&V-@Z<NA_O%mh"b/\m[2k19Y*="5Y_qH8en@BH#=oU2;":He(S7ltN,T`bT=Pk2LnXq%!fP9aYT^2%OC9'%Ab,Dq,BThj-X/8MQ7+)_"n9^dL3`%/^2%_kCQMX0W@("%0Wbb1)ZI9=dLSRNb^0T$]tRd*Cs&]Q7SQlF()#1=ZY2;M@^H+6;=HDW&NkLZ9Y3QKS"^#"f>+OCQ]!'62sE1%L5Vbu81:#T0blPX#_._;'nR`S0d2;p-ejGGZb'+Y7$I+OT[o+,LP\kl>&>F%%hjee4%oU`=I0K'70.@@'G:-h]PT1<,(%BnVc?L]%'8u:8JB\$o;nlSBbUhh@"9$.FdUma05g[eQ%]30XCTOHTi@2VE+@&gsP75Yhp"heCUd,$"l@$;b1o?9hm4%@LYqn(@I&UU'g+n3*%kc>"dck]1;-J=PU2*n<1EFoY(`su5,J1B-WAmiOIoZX>AJ2WV!==bt7$*pECQY$ru?jd:d&%\a)JcMIQ>s6)k7Co.4e5TMIf`2`=%;%\oa-8.G!Yb6*k4A>BGAYuc]3FlG9:n5#=Y9qt/YtLBTj`G$gPiaPua3i."=G2o#Lf=jL@)OT4#[S;^(kkl;X]-**1ukS0:/RmD%`_s:%,6<ds!\m8hDF?_1IB&r.Wc\Z/q@p=l;\m>gQj3nsopPX<91>]a/a-$\&S`'85el\sk)p!7^%tZSb;]8s/>oOGZR4&&L)d?K%g#Ir:\0-Wde]U3JYX;hQA1$V$b$1`_7DhS(G7mU\77+LI=rnL!4U`)CR`ON`_`AZ/YW6I)RQa#R0$WI/`CY$u<,6<)-O\+c9:DCU%,Eq@D4%a:j14_HLRd=#'KZu?6bgf!p<<.c-"k6VrMkXNGMbaT#C=CV)a2_VpCp@<PD%)u`T3NTYTJ/$b3F28F_I/.kA<W%&jqZ=G%LQj,*5bs.m-om27Zpi.\,1:2a`\r_cn0;_),AS>KnPNd<2oCj`EVmRM2d&:-H1]J+<j:=+btt_Z@GP,3ML;"Q:/miO_.-q*?PnMt%bYE_Im`M%WgJTr(KnO$6ZHu<*$sH<Q]hq!D.4OI\Zo^hc"?0(+Lc4oiejqW$5;e\`$j23_QF4f_4L:B)>;HFmI3hb!WZX&1r.ng7%V])jZ6hmb`$tdpe%S!>s;9GQaK[Dk^aqj;fkfauOeX;W1+))NE&bLW16T0BJ%,eYf6"B!mb,:W\"q"Bn.>@HaZD]f8._sV'YGos%%>m8J?8jT'P:fr8N8dk1)j?e`HO1YO,<\X*@*@gecQNBgj0SG1l3H)oBa7KK1@Cg2r"-bgE8)bn\ZQY5FLq^*&N>2Y7Yo%-&&0)gF%'j!,.h,IA*1<_c)(+apd?jX&OL'J[-*'n(_?1s`#$qarr9;]<Q.Y[OgTYP]Yanq/MbhGr^8HL]R5lk:7JX%*Z_*=r@S/%hFTQg3D%!JkJj_LDg:-r^nEW+AgAjGDo"aHgr;RNd&nPs7=KaB7^E2i\7;THorpMo]ecr)/jA'pc$-4>p":dKJIP'6$Ph]L*lHs&M3(WG`KH%.*;XGGc9aJqI6$8rU<hjP;pT*AQnFddprgoe85ndFHADA2a_"ZGg[*7DGPdo@4"KX:#&[LIjA2?0nD2EY-GQ0<ekloh*s6.$EBcW%aK!4F%2Y2C^_0doP-h*q7'$>Tq@Ibh/iJ5=3G?e^L/.$:a0M@M&JF]TYlmnT8j_9Y&jk(u>#-LT81c3j;..3$#2W`qloG[Z?1:0'%(^#ZHLg\e)*OGu*7o><cOSoPuMe%3r*(eetRn+f6>(u\g`kI5#?;N.e#@nF^2Nq9_ME5/1'#9=OcoQp&7/DL%D'n$4J<CldJB[Tc%b_`I!Dke/8<Dtt%0k*cg9(diK>$0o0!6B\@Ou!`^f#er!OJb#\Za&&6CB,*<X;D_2%DNpsm1H>,@#g")&RNDK`Bu'ED2[c<Pj#c4%oj.tA%X`/M'%2/o>p'2A+Z4cN?4q]'"\=VVaIB-&D(D:MfR*,HZciSM=np![E<3.,9`ZbC)q_4ulNSVi'aR]Xbi_[TA0>7`,!sJ+%%M1Zj=h3f:N>XXCD1p_r@T]GdZ#g"5*/$R%$c!4/<bsDheVjd.CdJ8I",_:9U5VdDOX4!`glW>kU^u-=%";YacnL-k#fsC]E5/b`%H0r#&"f2PoD,?CUdGj0]rj)5qeCU2K!a$[`Os_K46M<.XW#_&:)C87\5blqH=;tlK*/%cR2,3]g$(a73-tjA'#^0f&aMMk--SqN`%JUS`&La4`(($OBfC:7^QSTa$*K)('2bR.57GPKUK[N/K/+>V\elOs#RaD1FE"eD/"=M\:$3!+1"A)oMLB&r@=!d,:,s1Old,5J4q%43O)pM)j(V<ihM#=bOb^qVRdDY"s.2$O+ohN'Xqa&1DC$bt/-@fEBJ*h4B-+!h;&.?_D"8=?%SaVQ@L>f61J!E*MNpLIe%1RUKI4%cEIM*eVJ(9>U5"m6Yj!U;#8K>E6gB)'UZXtd;a[Y36MHZ:EAaO/:21<REHMKJVb7I5GcYOj@D%=V+'WA2TsKE&t4h[ZOAMDZ@l3%%`l,;/Wo'r'!cuY@Kh3_I2(BB(!$Q@LW9,;?gh?@\]K(u8=`2cm9^MJhY7YrO<JiCG/Vjc!hlf+s-7-J$5gVIE=rJf.4VZbJA&+U&%=i*;M2Kaj2oiLNMAmY5T"!mS>6Bd&)[g:0]`^%nXb^LF]"EfMt@$U>-A(-ghL^[gD5LnV)kb_\qm/@")e-1J(s%LBP9GPs,e@]a+%F/XcpeEYX3"<BT7b\Gb;.t?k?XTr(d0HRR7ljO]1@%t<,b[\(r02c37d4\[W%P:#GhC=mXBM(2!UdYQK`m-$ii'IX!!]$aE6j^h8%h$=/e9f/9W.b\;e2VQm(_&iiEZ!jb=08LMP+B`s&Uk6E2?V=hieQVUm?;6Dm(lLdj<?T.Z9IpjL@m\^X&8*[)1RetQ&U>#I2QLSM%r>Lj])SsIShtjWYfbI]KWZ"]u:HMGni+-BBd>4SXXP*e(+qr-oh(Z?mN\mVqd!)4\e>:U1;f0i]Xk#L,cA>``eQF76k3Fi!)9*gR%3cug=c:#pER/_%[H5MHk]iL;b4A67e!R?@5c+rC-GbQ*=pt`/t\_9HY',08e7MG5=Al1t(,<Pa0BljL/i?jdf=0%!S@AmBg_^2d\%"s=,Jdr\@;K2-$Yg-.1q!A%Y"0qlG3cK))Y.iQDMdUoM5"^;PG6?=5dehM#Br!?u()TRj"6cI&=@G&9gA>#Z3)U!'V;NOlD)-7rA%WLDH6NFK/-H#c:XX1T@KGX7J\eTd(>;c2pdHm,d&==[,[(gS@_bQ+6-G7f(a7CLWWKiFM:F^CP1['W\oNP[-W"AJ>Pj%j9)1B6/u%;$LpBArtiY6OK@:B!bQ_KV&Mmi\tr0U1WO<J-*f$ToZ?;C`.+25V<$Nb;a.3Ha/kq=LQ:1+i\N')IS5s_OtT,[$s]V8tKg__?r@.%2E2)bZ#^=j@;jQm1cQ7&)i\g=Yd0'CpA@E^i2ohCU*LTD<k+Ze1#(`&=NoIZ@#Sj_"eR=+-8:M)ar@"#14@V]fqc1]J/a"Tost;I%+kk%gM%f`mN.<]J5SlqOXoTS@qqhKp;8#Z2K>]W'0+ajZ(seUXZ]5Cb43cU:`I]]5hU%_njc_R8]Xh@@9pmY>]eU_7eulT%>c11_%>q,F7i#3qO<#6)OXFdJ_&NhMBgBJ9bb9XIJ>jkba,OGg#$e2.&kk#pb5V%-.qf&3k'.Y_?m4<np7U=O/bha;7.r9/A6!SVt?!JLf%Wd>0jMcWtSmt1.3Vb8BX<0jjL2FeesZ:p1TGP6U;1hQThcr_Lu]fV8A:0?T1q\<bHJ[9-(OH.'FiB^&A55KJsT/1_?>C`j@^oLgq%-^g;3FrCugHUf3&:\A]3e,>-/Y'2>gf2Sq`5KZ+WB][XiDsIJW+bBG5r>HiN#]Ws8+LJ5lmoLE!0b:;s"Cr]t]k4mUK+G,W:"o+U%$.B1s6bd,I8/=U+=9.ReUI>9l!2k%UYd1*Yes-JCm^-gu?(?EkFSTDI@r&DA9Igm\TAg7i\BZMk'OSumVe?/2,3D[iQ_4TtfJ'=7%!^VHeK5^l`"'6hb5bLbOjVr[RPt`_Eq.So,<uKDnR]flU3T)-K_]WUu0bHgWU'MUC_\7?)eHV<3,Cq0eL\?W?HB!J]7THKkS7_r+%?apYTI8m2S_n`1I8=Kf]:IR/NQ.8gL>_#+sOb<dqWonU?gBgjB`Sg0W)W'J[7JB<[=Oj*qAQI=kSIUHJom4_]1V%6QH7j/.<GhAG%+E02O5BoHGcj[2iCCr`CQ7#%N_LX\m"#:)PNl>*POI[\?olR#h;FkKO8>6h$K&^D8L5n=-;VTqml4PUpA`g1ps/T(&7tWen18Wjs%J/8QL0sjT:Apc;mDD5@`Q%@/bC>I7k-*L:M+7PmKab,-IT34Hc@C;fm<F`uuCoh*;\1nZ<RFnJ,[i28.,k6V(bE@CTXi;uaU.io,%I>0jTfM9t-<_o_HctZL[Y;I(O51O(='H(!L'[B?2;QB[fs(4!<:eb3i5ad72X^HHH!M-6Y$r8?OF9bI-hGuP?2.N-T=;9K:)NX15%S`,3q8TZ%jHU+p4=h?)P/!e(Jh`2%M.juSB94Yh4,Xp<0.s8"]cpP!#(O,p/E+uXJME$@8h;QX!E";j+0J*MX`11[8\I+Yd>t;n8%78rioA+L4]MdC_Ngks31*g$]S2U;PI#/LOHOZacB+cY;f#)o(Q*:I;mTKpC1C'3&4<iJ(ZE^GeV8!oi%RSKL,72IPZ/7Iurn1>P:%@DH'OERA]5Q-]e$6b4Cc]L$EX_is-d&<9R^=(=>#^,\V;cP=VZdkb,$M)?WlH(pfq(2]BB-d%JCQEI43oX$<Pa'@'XM]i7,?R(>c%?<&R2.VOjljh^K)k5c<Xr$(Jr`e6SQ:5VO#QoNfH=.#._I0?SY##W&8``,0^-@%FRn&`C$<EIo4m6M:\S"`lK&2OQ*mLEQuH*361%M!#sX]D)&N='9aP3X%SQkYdVmD4!-sV$><)-=\#2@I)d8<nD?[C`<Z1+#d$?AN,QW:;,U`KB$lp+o2E!AG"0tHT6E+i*gF@o9<66%,bs9'5P1O>;OAliHS\/.RE'A*OSM:g1U:AF>T,;sYdJ<sU,&Ed/.[Z?qOWJ=8H6'bU40qIc^FqZ&$YeKlPtZt0CZ1Y?t(IKAN1E@%K/^>J;^7WM^[T`'X\0<SIs"s+$[D/XF.)X"l2VoL!_c;rS^6l&MDsW_NB<MPUJRtqM-b)md>M>Bd/^S-paQCC3!]W<X[PBV7+ut/%0glX&?b?lF)7`a=$iu27VFFDj$8X`GCM74>G8C)nK]3Oc;9;C[KI@1[)kG^X1d*)Bi&jr<NmrkiNF/*>A7IaK1j)euTZ+]m,rl<r%opSj>b=33WQ#.U\X8?rPN)Fd%i*IX/]gh=?>.rW/7D=*(W8TIjoQonDAc]8F`K$[/WeYkbL#RDQc"LD'[.&@,<(fk?#AXIl9Wb`m%7:@gK*L4eZ8F;D=;7*a?aSM!7Dm\bW8D9e,dg%b\H(V3TQ[qrd9#V;>#W;R[>#-&%-,AqCX?Od!.ngV4^%JS2VV3G#966+1Ws3Zm%Mm&3;mUh@qlt/`Y.t$P4G#lc:G^F@hpE=gifmOaYm<cab&+92#s6RXkO36Cj](>HL>3/kn$+8L>9s>ae-t\9j160;:,tot(\3=+c%.>27SdI3(o;:o6,!S]XZ2ZWQ8+U?;^pMR:+/IM@`NG29[p(d<VS'2L(H;$9OS-Jm\q&_a\m#sgO5aphF*_DEs7TgKp@@m3r.Y\!^%hcdGmj]5)C*)\hDaOfU'E'%f$F'I\V5`S\!6iMnYb7ZAJUt']NRjr(i8hW]SCoRC9`Uu+3B4n3!rfh@KLXeE3B++AR"Jukno,suu%U!Ggc*>*^;;@h6EXeSTM+AeJP#n`*P63H"UhN*M%XUl=\#?Ag\O@)uq$U^Kt*"\Xh;)V<RZhNd5W;t7iaD0GRPq@&Cd5=mea34k/%6?Zt.-.D:NP?bH@WZ,]CX&aXK6Uk:&B+8!^1dS,NX%?^Ke%,.H<3b:q`,mcl%^)XJdTL]W%B4'P-CFMkCNO(^1m?u)=-rASi>AuK%G(:.Qj_U_1[X_F8=dH@4E?l<'K9$WsOek6V%^$[Y=IWV[am^TGJu!51IlI^r_ZEHWc5s2MMHY8K>=IE]/AFr>9_NOZ%Bio=X`^Qg%Ko'+5Ap/b9KPR\q'XZPbQu[?hNB9thU)/lsSf/fM/4iQB1LdgiQoVR18n:UR>6:Dc\gt_W%_XUNRO?DrJ<AJ:(M,.'d0`<F03TOJ%q,WuI>8'l&hMc6)g/siq3P>*ufX[pb)n!(!B)m@RG=W+p.kMsML(qtX_5n,Fp-`G_4?GMtZse/S@aK1^!ZQ<;6FFJFqcFGcXC=_+%a,6t>lsb:md6aI&5KF!`(/G=,r<2qi5#GBC>c1%qE1q\D)ha2LpH?4L;'B.plQ#(FGa48WR]q\r$d)E9R[X1^e:"Sh&i7"YD2gU,%Y0lB+>#d#/&-QT@Z%/+0"t:n2$*W2cirB3=W8]4b-?a#t2PX=pa,M#0/C$@SW2B-SpSel@U!j",4=FA*)nOK'Mhrl*78ZEa#TbSd%k]kC!aF\#Znph4kIut$YA`E!Y5mfS4'(05JJljSNYr%1A&f^V=Ma4("WE&[']P%k',]qaQJ,sa'=<BFn:rG4^L>bkK#\_c3DL#AT%M1OVc*]Xl+&.FjLZQ:4F!CR1p]+Ki_EAW0&G#N<@F]Yf"#26s>qo%2cZNE"!q1BGGYs`PP#ph(d[PG=4$i>Q\_9QV[kJErspa&)r%KZ/(f5R8Aupru.r-s.%4AP<9PGQP]a>BFd4NY0<](^[A5`!.#=DJo6=cJQ@$qA+\=HJT]r/CG\<*X1REL*l1tJ?mo1&SWUWXb5oc%,_Jf0;ql"a,TXt-XsH!J>.6.D[FgOT`j5htZB,7K6Z1^j(D@S&gdhZZd@*D;N#e#6g:<\1@5RGbf(uI-[XM^b1D1<nTa2@"n;*Qq%P1""aLpR$t)`9cDd,%n;1R#0uZ?W/ufi]sZ1eVYpW+XnYlSu@5I1^Es1pC'arUd2h'C8;/M<oUY>7M\VkO]gLg"r1o6q[^Q4:\4W%<G-T]\1YR52uuC//^S],8uUo!WR^-4CmR]p\RBnO5R:PNKPT41Xg;mt(km+`+AeMMf$CjYa+QnC_-=RVM]-0s79a`H\-7&9:=$(^%`G7tQVR^4aY2S^_A5gDD`M#8o'4d5:C1>SS/,5c4'-0//<!,t<f"I)T53P^Yh7R@0YctE)oQ^rubG'9k6PAmZP->;S1LP_B^Y'@1%^BK-X:N.G5:r/RWWm*#G0kb=o$49B"OS!2uL\#mu@QZS^(b@db#f5/pWSf`m.M`5O=R@$6<EdE$!hj:K#E7*Jj,#p`K,toLRT]>e%k"-ef&N3;*MCn?V,o;!C))a%IE)4LJRaT>2nYk3kS2nY^4mbl=Q&reQh^rVtpcD\u1@$?l%:j_l4l?&%4L7^S@cqo*E+2D_5f`;M%_#UCb2RW#qF)TQ]34Q,4W]>/`8'Zt<kV+q6%bG%EY49`ND*0tG:(]4mYL>5aEbiY"E+_**d9VL%H(GD%lLBdW*#!;)H@U0noaJ@i%.%c0^NLkJdq<P,^>(I!dl*\4#VPn/h6E@g#'(iufW?*dkO@'u9RJRF=BChu*L3dog[X(=DK,0/a&mqho$^rY<b;#+<FNO-U04GXI%=;t^b*8YC^Y/CStL1#]E3f_&;`YV*-OsreQo0as',NCoFKAZkc\VkS<Jg=`J[]\A$C;VJlBX[/?j*M>(1l0!%4f9ms84Zp$$ZCt_%d%Th5&3k#E#u"/<6!HA5L*7s2%m9JcO0&WOk]V\s+=:o<2qrTfCt8S3+[V^0DV5,h!g5f#oS5]IoW[0n_/otnBe)<`L@lT)7)S0Y%Cfm2_KTdDlGZ8=!VhP7<6YF*i@42\!1fT,ZR6tAdX*Tk_B&O)pB1H,@0R1Y!&NrOJY/`-d;9q57RjSAbT(gl(Sfh/Iq[(CRM&BTo%#Ap\]K.YE"5g[md$INn`i5^GlAC*rqLZ>?o^=[.,:"4obCcp2roSD3;J,IuXZe?$ALtEW6Vn,9;8.Zmth)W@4^i[l;jV'[F':k^n%)Ji8L?p0LU3aTK^UPoVr>;gta@obE7^]ll%HS%Y,H5LJ(bUGdda+Hb3]g=D(O9Y=l4\.Q/.B!8EHWdSnEN8jIO<-@`r\(X(JDCX$%JXk9dDdF-h!%Nf3rR%++fV0LQ_(LFNf;,@);j*Q.pl2CIHLM+i&9?s)0](p+_!`8SMgb2=iXIs.!C'Eh_QGdK41@$%#:Us<kuqgN%^d[bD2*8@c,\QgT`IHj5@7<8aFd^b#,LUg9!CfDH6>fe'i^k_1"jbSarTM4o?pn^;l'G440V!43\d`\"3j6E%dFF#^5r@Kmk4fEI%k$.8`X:Rd@;-:'A&ZGfcUdbF46k!<a*mM$Dq/Y.5]46I_42D52=4a4G*a,*EU^Pa(H5j<.J2lYue*KL)3]`DU@6G7;F\(3hN.?=?%pXKXng9?'2VcKbmCsX\_`kV=),-_.>Z[.s5V]G:c#JUc[_P<@e=j*plb%kL,Be+_i_SL%?3p$H(\CR-GF3GM6T+lTWd!,bHcuKR=%)S9H1;h[@GSQVWgIEm'Gb,?G!26@R`T4!HT3$@5c4TPp_jFRU1k<FB'#N!68Vb3IR]$03e2,rUQCHB'?eA<3]`3UN7i>?uB9j+Pd%?=]q&;pZ#+(3quqX'>38(-Sm!`^BD<rm>IV>>a,>2<;;YJ.@DG$g;S]0<>m]#h.6!#k%ss^G?BHg5^6dUcKOc-3?.pfY_Cgb[Sq8%oh+gl=BL4F@((-W-f45=M>]>9@giW*HHCIj"KUGc_:h<+pYtiap6L<J__F/PO0$9<>!aY,jgp0A=?Kg-fQ3ECbT=.F'@\aYX`\"c%[$u/e4-u<Rb^Q0@C]TK'Q"m<YRe:u-;6^iEgpf<sQ7adI?=4n^NL+jXhR8=O$g\JN0%p"$5Y^VXcLZ/C9EHn^5S%K/>0;ScA@6.X%C6*>rg,a:0P#+,.N#a[uUZk=B%A^[&[.pc*B2YR`6E-mX3uMq_ZrOsq2h!b&AA^8<eJ`KdSVcV)m"FMo(H]lYeunfc-0ZRjg;a`_%e!ru@^2(cOTpEW#/R"Y2&@J"L0&A1]9=QmHUhjGU['^ML"@+%ZralXo1UdYr%-F<rUZP5$?A#bE))PhiRCst`hALoZH;Gb[H7YL,%9gf9B^q=9j&:CCY3d+GUS"ZKpCFEqX^_+ED6$al&Ql1';%&:]^e=iS4W7mTY+>[DXX0._=#7G=pe7sOq3qBc6TrAcXQJ/%-57!h>%"PDk\h?g4.\7@E]91N>P9FS\(Gh$NA\rKXD*CA>"Mr%-X8ne+@!-=@SCX+/FSDM1f#PNf!F1:'KK=cmH/ScJrc%Mc*!tl6)=,]GK%S#*<(a!3/2<rI-o`SL)Qk'=0b[oq8tci=':-CDY_b7s,/_4da$'SR-XN$H^OCF1t45ZX%!h**TT$9'[m]!2D5l5bV)QhB-#Q^A[0%=YgiXPGQf_?nueC>gW)0OrYm0e;9n3,4o;Qj'+Km;5WODBETBcR!:;\6PW<#Z7i;Si42a-0d@;9:r+b/o3>C"j#ej>A,IKcMt"N#%XuM$JO\e=dd:kQAXonU1'WRh<(_jQ!E=:3(0If6H<.YH33__VIU]=d'16b@OLa?HL!!7C<P%!etAgD.DE.IJu@sbQi!p>mm!hX6L%NjG$>5Stn.fOT&J#(ch0#fF2>]iJABDb&38RBS+%7[CC0ic].;_8n/q(m"ml[MZ"rMIa$tf>%ImgIc6qb$;D3\"H/8%=-2"WFN5d%aHksm!VcbT11(F6gjrCS2Bpni(Ic%?T%-p]N`lqDM\si"GpbieQ4q/]!'q.3>Z6oN2)C<YYX)+3@jNqRQaP5qQj4#bY?A6k1greM%p"`&f!D,S@>'MSQ#Yc1gW:]"M2Kr!u>5]H]"A8aumI!Ch7o[9?(rU$S'*7a!O6JL=$LiZP2Ia>Q?EZ)LC'krG4Ug36/6IiG9&E@<%*=5k/`CF^A<La<u9i*ApO0CI[!&03u[V*+SY\(.@_aEHG>2!cC(FMq`o<Z!&8P(dj+^-(C*q[LRR$g]:5&#$?qr0%[ES<WNgD1?h%G\t`AR[f3>`QeN4U*UQ]9NZ?SGpaGK:=D]PPmp,+N@"T\rL@h[%>a;@![.#Mhs$QC$k;(b0QLf;Fhf9:eb>TqbJK\k_dSnUUQ)-n%4%^`efTj3c/c!C?L:0ri\+EYDN2J&"cNk^H[@/>98^a7G:&\"r.p0[Af$Z6&_1W%A%@Bb4daZ3\m=iBp.8ACTnM-K'dqFq?X[I]k%]Jf=kgep<&g3G^aNS"i:,\:h&D9b#pFVd[daD9r3Vkg5Ql.X_<`0=Es`rm_9@O'<,)GM[0'5eYIBkq3b.N@At*;/@bHm-?54"QqV%'gr*ee`m2t\u8J!5gu"N5-A!sD6d48"9Ui4gIcd!*,R!mIp>aUdb;6^N*(4EQ>r2BM7-)DBC_Cu6^aCmkX*\t@'V%\>t@Z-<ljBE%::/D1.(.CY$o8\JJ[>qElu`F;FI",O>!ZZT::?Ij$=o#d+;W;r:e'-8/^mnh$-86l*Hg.9BL2@dW<?\-/8..KPMP/b*FB?NUa4n3%BY/S.2,gX0&d4*?=^GO<&4VYZrqM;n<`5/er$VDEg"`;q_W2kDJ2*&XPMLUhTL'q)l\"o2;0a@G`qEV:WQG3;OqA7k;681re`&-k%cY0P[D6_[%jXCYg]8YHoOJ<#ZUXfP[dL\HJ1SdceHIZH@_g2_S3M3Ek:&FH:jr_!b3*Lkf"q>2rF06@["KDcCE[0`s=RN8/O[5M=%mZPX\qkh[1A:]IYWutg#qio>\9SQe/Y6&E=_(nn&8^8;L<6Hjt.lndUns4T5@gD-VYQD5;F;X=?'8+F:k*0P5GLFM2KK,)kCn"UY%O\UlQ*fA+)nRC1]e^6[EdmQ(R[J6?,KhKt<Co\)>@n(:Ae6*obPU="EZ9Wr83Pj45WAB4f/#i/4=37[AZ9N%+Q1sUY-Lg8W_&M^J%9m].q%CDaY-iUS`7Np`FQ4G,'_3,:$X!Qh8e%\)+h.J>1d+6j+21`J*(L^/n9HMrEVTI2`FM6$qX)D.bVulC$#iM3W^[NSUe8#uV%QmiCGl`,]6--dH5B5%ZcC]a\FS(qe/*@5eb:!i3?7H<-i?J;;=Oi#!J6"))SLK:D!"kDiMdgRk%lV?cfoUp03_04P[SH1$%E0LP]%@1AeP>N;0u%NH0$9@D6<O]#,>R&.c.`'!K<"PZgGZ&n:Gk%W(\AYF">@RlN)D1VbEl7+c$2.BWKaofoLl:5<P+H'=OH!fAd\4H4b%=t?NqYc?A[>j`H?Fm=I.Ah)MX=s0L"CM>lXc;&4.hE6H&`3%VZ6T?l:JeV?g$Zo_6)C;s*Q?:-4mXRbT?J/k9!H#3iK;a[)D/iPU%)Zb9Qk/tP=N3Yd'4u%Q-BMPnl4c9V9"DrTH6YY;$#%F4bY:$T,6:mc:JS5p,n3a22(U`R7e.rpT8+:-;=Q#tTK4iBddT5!S1'26`%BQs[Gj/Z@lNRbcqe'u7p%3I.Ak)O4lD2THt!-f2^oatCc-sCN>m'IY=/?h:I<]RQINMY.ui,lI@+%/0q7uOlbM`T&+l7/LVmpPA3%)hrC(fuGWPiBZ)E^mpZQ3+S@kHZ0(>Qk]l;6no6rnZ76qGJ0kG_[*_HqoOk*A8-Xe8t'O:'"2n&(/S\/_K1>`:NeoD&4gEj+/F(&%RUsg'G&q5'rP=sp1O8V5.9chr]-TDHplF-M$;Q\GQ)\Oh>2*2F@+/;jF_g/8U@=!4LCpuA'.ZJb\FIT(K_dE<h,&M0Rs^BPD9mN]%ILMV'>oGlG#[9s>Wu.gcfm]1AT<u#ua3ql%2bQC/jZ>gQc]*p\Q&F8CZcd8nhK]$lmJ!MR/Zl,0H2_RUrqkl.rk88Zl.(RPs)38T%r6607Fo*9VbN.4Nm11;r^>GN0puCcAJ0MJPb?%^shnHDgrrF#e]$^~>%AI9_PrivateDataEnd