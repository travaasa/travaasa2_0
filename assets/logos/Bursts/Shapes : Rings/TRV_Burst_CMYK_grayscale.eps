%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: TRV_Burst_CMYK_v2.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Bailey Buck
%%CreationDate: 2/12/14
%%BoundingBox: 0 0 288 288
%%HiResBoundingBox: 0 0 288 287.9986
%%CropBox: 0 0 288 287.9986
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.4%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.4 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 6912 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDC2FFA8FD09FFA8FD74FFA9A8A8FD07FFA8A8A8FD%6AFFA8AFA8FD05FFFD07A8FFFFFFFD05A8FD07FFA8FD62FFA8A8A8FFFFFF%A8A9A8FFFFFFA8FFA8FFA8A8A8FFA8A8A8FD05FFA8A8A8FD5FFFA8A8A9A8%A8A8FFA8A8A8FFFFFFA8FFA8A9A8FFA8FFFFFFA8A8A8FFFD07A8FD5EFFA8%A8FFFFA8FFA8FFA8FD07FFA8FFA8FD07FFA8FFA8FFA8FFA8A8A8FD54FFFD%05A8FFA8FFA8A8A8FFA8FFA8FFA8FFAFFFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8A8A8FFFFFFA8FFA8A8A8FFFFFFA8A8A8FD4EFFFD05A8FFA8FD1BFFA8%FD07FFA8FFA8AFA8A9A8A8A8FD4CFFA8A8A8FFA8FFA8A9A8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8%FFA8A8A8FFA8A8A8FD4AFFA8A8A8FD05FFA8FD09FFA8FD07FFA8FD11FFA8%FFA8FD05FFA8FD44FFA8FFA8FFFFFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8A8A8FD44FFA8FFA8FFA8FFA8FD33FFA9FFA8FFA8FFA8%FFA8FD3CFFFD07A8FFA8FFA8FFFFFFA8FFA8FFA8FD1FFFA8FFFFFFA8FFFF%FFA8FFA8FFFD06A8FD3BFFA8A8A8FFA8FFFFFFA8FD33FFA8FFAFFFA8FFFF%FFA8FD3BFFA884FFFFFFA8FFFFFFA8FFA8FFA8FD27FFA8FFA8FFA8FFAFFF%A8FFFFFFA8FFA8A8A8FD3AFFA8AFFD3AFFAFFD07FFA8FD3AFFA8A8A8FFFF%FFA8FFFFFFA8FD31FFA8FFA8FFFFFFA8FFFFA9A8FD34FFA8FFA8AFA8FFA8%FD43FFA8FFA8FFA8FFA8FD2EFFFD07A8FFA8FFA8FFA8FFA8FD37FFA8FFA8%FFA8FFA8AFFD04A87EFD2EFFA8FFAFFD05FFAFFD41FFA8FD05FFA8AFA8FD%2CFFA8A8A8FFFFFFA8FFFFFFA8FD3FFFA8FFFFFFA8FFFFFFA8FD2EFFA8FD%47FFA8FD07FFAFA8A8FD2CFFA8A8A8FFA8FFA8FFA8FD41FFA8FFA8FFA8FF%A8FFA8A8A8FD2AFFA8FFA8FD51FFA8FD28FFA8FFA8A8A8FFA8FFA8FD47FF%A8FFFFFFA8FFA8AFA8FFA8FFA8FD22FFFD05A8FFA8FD4FFFA8FFA8FFFD05%A8FD20FFFD05A8FFA8FFA8FFA8FFA8FD47FFA8FFA8FFA8FFA8FFFD05A8FD%20FFA8FD53FFA9FD08FFA8A8FD20FFA8A8A8FFA8FFFFFFA8FD4FFFA8FFFF%FFAFFFA8A8FD21FFA8FD5BFFA8A8A8FD20FFA8A8A8FFA8FFA8FFA8FD4FFF%A8FFA8FFFFFFA8FD22FFA8FD5BFFA8FFA8FD1EFFA8FFA8A9A8FFFFFFA8FD%53FFA8FFA8AFA8FFA8A9A8FD1AFFA8A8A8FFFFFFA8FD57FFA8FFFFFFA8FF%A8A8A8FD16FFFD05A8FFA8FFFFFFA8FD55FFA8FFA8FFFFFFFD05A8FD16FF%A8FFA8FD65FFA8FD17FFA8A8FFFFFFA8FFFFFFA8FD57FFA8FFFFFFA8FFA8%A8A8FD16FFA9A8A8FD65FFA8FD18FFA8A8A8FFA8FFA8FD59FFA8FFA8FFAF%FFA8A8A8FD18FFA8FD65FFA8FD18FFA8AFA8FFFFFFA8FD5BFFA8FFA9FFA8%FFA8FD16FFA8FFA8FFA8FD5FFFA8FFA8FFA8FFA8FD12FFFD05A8FFAFFFA8%FFA8FD5BFFA8FFA8FFA8FFA8A8A8FD10FFA8FFA8A9A8FD69FFA8A8A8FD0F%FFAFA8A8A8FFA8FFFFFFA8FD5FFFA8FFFFFFAFFFA8A8A8FD0FFFA8A8FD6B%FFA8AFA8FD10FFA8A8A8FFA8FFA8FFA8FD5DFFA8FFA8FFA8FFFFA884A8FD%11FFA8FD6BFFA8FD14FFA8FFFFFFA8FD63FFA8FFA8A8A8FD12FFA8FFA8FD%67FFA8FFA8FD12FFA8FFA8FFA8FFA8FFA8FD5FFFA8FFA8FFA8FFA8FD10FF%A8AFA8FD6CFFA9A8FD0EFFA8A8A8FFFFFFA8FD63FFA8FFFFFFA8FFA8A8A8%FD0CFFA8A9A8FD6FFFA8A8A8FD0CFFA8A8A8FFA8FFA8FFA8FD63FFA8FFA8%FFA8FFA8A8A8FD0CFFA8FD6FFFA8A8A8FD0DFFA8A8A9FD04FFA8FD63FFA8%FFFFFFA8A8A8FD10FFA8FD6DFFA8FD10FFA8FFA8FFA8FFA8FD61FFA8FFA8%FFA8FFA8FD12FFA8FFA8FD69FFA8FFA8FD10FFA8FFA8FFA8FD67FFA8FFA8%A8A8FD0EFFA8A8A8FD6DFFA8A8FD0DFFA8A8A8FFA8FFA8FFA8FD63FFA8FF%A8FFFD04A8FD0BFFA8FFA8FD70FFA9A8FD0CFFA8A8A8FFA8FFFFFFA8FD63%FFA8FFFFFFA8FFA8A8A8FD0CFFA8A8A8FD6DFFA8A8FD0FFFA8A8A8FFA8FF%AFFFA8FD5FFFA8FFFFFFA8FFA8A8A8FD10FFA8FFA8FFFFFFA8FD63FFA8FF%A8FD14FFA8A8A8FFFFFFAFFD5FFFA8FFA8FFA8FFA8FD12FFA8FFAFFD69FF%A8FD12FFA8A8A8FFFFFFA8FFA8FD5FFFA8FFA8FFA8A8A8FD12FFA8FD6BFF%A8A9A8FD10FFA8A8A8FFFFFFA8FD63FFA8FFFFFFA8A8FD0FFFA8A8A8FD6C%FFAFA8FD10FFA8A8A8FFA8FFA8FFA8FD5DFFA8FFA8FFAFFFFD05A8FD10FF%A8A8A8FD05FFA9FD61FFA8FFA8FD14FFA8A8A8FFA8FFA8FFA9FD5BFFA8FF%A8FFA8A8A8FD18FFA8FD63FFA8FFA8FD18FFA8A8A8FFA8FFA8FD5BFFA8FF%FFFFA8FFA8FD17FFA8A8FD65FFA8FD18FFA8A8A8FFFFFFA8FD5BFFA8FFFF%FFA8A8A8FD16FFA8A8A8FD65FFA8FD17FFA8A8FFFFFFA8FFA8FFA8FD55FF%A8FFA8FFA8FFA8FFA8A8A8FD16FFA8FFA8FFAFFD05FFA8FD5BFFA8A8A8FD%18FFFD05A8FFA8FFA8FD57FFA8FFA8FFA8A8A8AFA8FD1AFFA8FFA8FD5BFF%A8FFA8FFA8FD1EFFA8A8A8FFA8FFA8FD51FFA8FFA8FFFFFFA8FFA8FD20FF%A8FD5BFFAFFFA9FD20FFA8A8A8FFFFFFA8FD4FFFA8FFFFFFA8FFFFFFA8FD%22FFA8FD5BFFA8A8A8FD20FFA8A8A8FFA8FFA8FFA8FFA8FD49FFA8FFA8FF%A8FFAFFFA8FFA8A8FD21FFA8FFA8FD57FFA8FFA8A8A8FD20FFFD05A8FFA8%FFA8FFFFFFA8FD47FFA8FFFFFFA8FFFD07A8FD22FFA8FFA8FFA8FD51FFA8%FFA8FFA8FD28FFA8FFA8FFA8FFA8FFA8FD43FFA8FFA8FFA8FFA8A8A8FD2C%FFA8FD51FFA8FD2CFFA8A8A8FFA8FFFFFFA8FFA8FD3DFFA8FFFFFFA8FFFF%FFAFFFA8A8FD2DFFA8FD07FFA8FD3FFFA8FD07FFA8A8A8FD2CFFA8A8A8FF%A8FFA8FFA8FFA8FFA8FD39FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD2EFFA8A9%A8A8A8FFA8FD43FFA8FFA8FFFD05A8FD2CFFA8FFA8FFA8A8A8FFA8FFA8FF%FFFFA8FD37FFA8FFFFFFA8FFA8AFA8A8A8A9A8FD34FFA8FD09FFA8FD39FF%A8FFAFFD39FFA8A8FFFFFFA8FFA8FFA8FFA8FFA8FD2BFFA8FFA8FFA8FFA8%FFA8FFA8A8A8FD3AFFA8A9A8FD39FFA8FD07FFA8FD3CFFA8A8A8FFA8FFA8%A8A8FFFFFFA8FFFFFFA8FD23FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8A8A8%FD3BFFA8A8A9A8A8A8FFA8FD09FFA8FD2BFFA8FFA8A8A8AFA8FD3CFFFD05%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FD0FFFA8FFAFFF%A8FFA8FFA8FFFFFFA8FFA8FFA8FFA8A9FD06A8FD43FFA8A8A8FD0FFFA8FD%21FFA8FD4CFFA8A8A8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8A8A8FD%4BFFAFA8FFA8FFA8FFA8FD1BFFA9FD07FFA8FFA8FFA8FFAFA8A8FD4CFFFD%04A884FD04A8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8A8A8FFFD06A8FD4DFFA8FFA8FD05FFA8FD05FFA8%FFA8FD11FFA8FD06FFA8A8FFFFFFA8FFA8A8FD55FFA8A8A8FFA8FFA8A8A8%FFA8FFA8FFFFFFA8FFA8FD05FFAFFFA8AFA8A8A8FFFD04A8FD06FFA8FD56%FFFD05A8A9A8FFA8AFA8FFFFFFA8FFA8FFA8FD05FFA8FFA8FFA8A8A8AFA8%FD60FFFD05A8FFFFFFA8A8A8FFA8A8A8FFFD05A8FFA8A8A8FFFFFFFD05A8%FD60FFA8FD07FFA8A8A8A9A8FD04FFAFA8FFA8A8A8FD07FFA8FD6AFFA8A8%A8FD06FFA9A8A8A8FD74FFAFFD09FFA8FDFCFFFDFCFFFDC1FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic CMYK</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2014-02-12T15:14:48-06:00</xmp:CreateDate>
         <xmp:ModifyDate>2014-02-12T15:14:48-06:00</xmp:ModifyDate>
         <xmp:MetadataDate>2014-02-12T15:14:48-06:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FVKG6t5mZY5AzISrLXcEGnTFVXFUl1DXxFMsdqBJwP71uxp2H9cKo+w1S2vFPA&#xA;8ZAKtG3Ue/uMCuvtTtbNAZDydhVY16n3+WKoLTteWaZorkCMuf3R7UPRT/XCqcYFU5bmCEqJHCs5&#xA;CqD1JJpiqpirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqjd3UVrCZpa8QQN&#xA;uu5piqyDU7CYgRzqWPRT8J+40xVCa1qfoW/pwt+9kJUkdVA6/TiqVx6LcmBJUfhMd+B2oO2474VR&#xA;Pr6isIgnc8yCte5Dbde/zxQr2Glw26ln+ORhQk9AD2wJUptLihYzwVUgGq16A9aYVdFpcU7LPPU7&#xA;Ci16gdK4qqX+lQ3Cho6RyKKCg2IHbAqj9Z1FojDC5L8QoJ60X37H3wqhZNGuxC8zvzmG/EEknx38&#xA;cUJto2p/WLfhM375CFqf2q9PpwJRc2o2MBIlmVSOq1qfuFTiq+1uYrmESxGqEkCvXY0xVVxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtFlBAJAJ6DxxVvFWPa5NJdXkNrCeSbGo3BZu/0DCq99&#xA;Btiao7L4jYjG1VIrQpcqr7ruQexpgVMMVUbkKEV2/YZT+NMVVeuKtSq/pPRSdjQAVxVuNX9NaqRs&#xA;NiMVcdtjiqlaheDOv7bMa/SaYqrYql8toz3LLH8K7EnsK4qpJoEAJLyM3gBsMNq1oU8lrdTWkx4p&#xA;uanoGX+oxVkHXArqitK7jqMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVY/wCY5TJdQWq9tz83&#xA;NB+rCFWRaJcxSBlnAAPaoJ+7FUXawPFc0kHVTxI6E4FR2KrXglk4lNipBBPTFUQsA/aNfbFVwijH&#xA;7IPz3/Xiq7FXYq7FXYqtMUZ/ZA+W36sVWtAP2TT2xVQSCWPkX3LGpI6Yq3iqAuoHluaRj9kcj2GK&#xA;oaXSL2SQsbioPSpYkYVX+XZjHdT2z9TuK+Kmh/XiVT/ArsVdirsVdirsVdirsVdirsVdirsVQ1/f&#xA;RWUSyyKzKzcfhpWpBPcjwxVLv8TxFgFgYg7VLAH9WGlUogLjUEnl3kHQ9Og2xVNcCtNA0q0U8SCC&#xA;H8CMVRKRKu/U+OKrsVdirsVdirsVdirsVdirsVdiq14lbfofHFUMsDRA8jyJJJfxxVvFUqlUW9+8&#xA;0XwyHqev2hvthVV/xNCGKtAwA2rUE/djSpjY38V7E0kSsqq3H4qA1pXsT44FROKuxV2KuxV2KuxV&#xA;2KuxV2KuxVJfM3MwwKASCxJp4gbYQqItbaJIY6xqJAq8m4itaDAqpJCjCtAGG6t3BxVWgidkDSji&#xA;3dRiqIxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqE8TqpaIcj/LiqhHCq7kBnO7N4nFVO5toXik&#xA;PpqX4ni3EVrTxxVD+WOQinUggBlpXxIOEqnWBXYq7FXYq7FXYq7FXYq41oabnsMVSCbzHcueFtBQ&#xA;9KtVj9wphpXLFqFwPVnSkh6jZentiqYwyckAOzqPiU9RgVFRRU+JuvYYqqYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FVOWKvxL17jFULLIFQ03Y7Ko6k4qlxh1C3HqwJWQdBsevthVqLzFdxHj&#xA;dQV9xVD9xrjSp+pJUEihI3HhgVvFXYq7FXYq7FXYq7FWO6RFJHfXCsCAKj50bCqcYFXxQIziVhuv&#xA;2TiqvirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUJYFDmVR8TbMcVWYqk2txSS3ECq&#xA;CQRT5EmmFWR4FdirsVdirsVdiqlc3MNtEZZiQg2qAT1+WKpJPrtzcuYbSH4W2NRyYj9QwqrwWtzE&#xA;4kHGvda9sCo6BhKxUAgr9sEdMVReKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;VCTssTBTUlvsACtcVQU9rcSsZDxHYLXoMVQ0OuXlpIIbqGqLsKCjAe3Y4VTu1u4bqL1YSStabgjf&#xA;6cCq2KuxV2KuxVD6hAZ7GaICrMp4j3G4/EYqlGgOTBIhH2WqD7HCVTXAqIiTiu/U9cVXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVsqcl26jpiqHxVK9eci2RR+0259gMIVNNMh&#xA;MNhBGRRgtWHu25/XgVFYq7FXYq7FUs1PWbe35QrV5uh4mnH5nxxVD2kVyjeoq/CeoJpUYqj4H9SX&#xA;gVKkbkEdsVRmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBzuI5eAUsT&#xA;uKeGKoG7iuZDzK/COig1piqtput28/GCSscvQFjUMfn44qmmKuxV2KqdxEZYHjVijMCAymhB+jFW&#xA;NaPFAbt450rMlStegI67eOFCf4Eq0C7FvHpiqpirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVU512DeHXFVHFUh1uOAXKLElJn3eneuw28cKsjtIWht44mYuygBmJJqfpwKq4&#xA;q7FXYqkFz6S6k80IX1AaHieQr3+k98Ko8XSceTqyeNVP9MCo6Ifu19xX798VXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVsorG3sK/dviqBNyhXkis/hRT/HFUBD6Laik8&#xA;4Aeu3I8QD26+HbCqf4FdirsVSfXtRmhUW0SlDIN5egp4Kf14qt0mwFvD6jENJJvUbgD2xVH9cVRe&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVCUpscVQWqWK3MPMEL&#xA;Im4J2BHgcVW6BqE8oNrIpf0x8MvUAeB/hhVOsCuxVCanYpeWpjJCuvxRsex/piqW6XK0MXoTsBQn&#xA;ia1A9q4VTJZI+SjmNyAN/HAqLxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KoNpYubDmNiQRX3xVLtUmaaL0IGBLEcjWgPtXCqY6XYLZ2wSoaRvikYdz7ewwKjMVdiqE&#xA;1S+WztS+xkb4Y1Pc/wBBiqW6XC00XrzqDUniKUB96YVTFYog6ngNiCKAdsCozFXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhGjj5seI3JJ264qluqQtDF68CgUI5ClQ&#xA;PemFUy0u+W8tQ9AHX4ZFHY+3scCovFXYqkuv6dPKBcxsX9MfFF1oPFf44Vb0q+W4h4EBZI6AgbAj&#xA;tTAqOxVF4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUJWu5xVA6&#xA;rfi3h4KA0klRQ7gD3xVvQdOmhU3MrFDINougp4sP1YVTjArsVdiqQTiFtReCAgPXfiOIB79PDvhV&#xA;Hi2Qrxdmfxqx/hgVHRH92vsKfdtiq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYqtlNI29xT79sVQJtU48ULJ8mP9cVQFv6K6kkExXmDUBhyBPb7+2FU/wACuxV2KqV1M0Nv&#xA;JIql2UEqqgkk9umKsc0WSAXTvM9Jn2Svcnc7+OFU+wKrQNsV8OmKqmKuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVTnbYL49cVUcVSDWZYDdo8L1mSganiDtv44UMltpWlgjk&#xA;ZSjMAWRhQg9+uBKpirsVdiqV6lotvPymjrHL1IUVDH5eOKqNpLcufTVvhHUkVoMVR0CenLzLFidj&#xA;U7UxVGYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUJOgkl5hipGwI8MV&#xA;QF3LcofTZvhPQgUqMVV9M0a3t+MzgvN1HIU4/RiqZ4q7FXYq7FUNqU5gsJpAaMFop922H68VSrQU&#xA;Itnc/tNsPYDCVTTAqIifku/UdcVXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FVsr8V26npiqHxVKtfQm3jcH7LUI9jhCpvp0xmsYJCakqAx9xsfxGBURirsVdirsVUrq0huojFMC&#xA;U67Ejf6MVSObQ7y0czWk1UXc1PFgB49jhVEwXVxK4jHEeLU6DAqNgURMWFSW+2SeuKovFXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhJ1WVgxJBX7BBpTFUDPdXMTmM8fZqbkYqoQ&#xA;aFc3Ugmu5vgbcUNWI/UMKp3a2sNtEIoQQg3oSTv9OBVXFXYq7FXYq7FXYqxzRZZZbqd2JIIr9LGu&#xA;FU5wKuinRXETH4m3UYqiMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqhLOpcxKd1+0&#xA;MVWYqk+sSyR3tuVNBQH5kNhVkWBXYq7FXYq7FXYq7FXMCQQDQ9jirH5fLt1EeVrPXvQ1Q/eK4bVs&#xA;S6hbj0p3BkHU7Hr74qmMUYVATu7D4mPUnAqKilr8LdexxVUxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KqcstPhXr3OKoWaPkhI2dR8LDqMVS5pb+4HpQvSQ9DsvT3wq6Hy7cyHncz0PX4asfvN&#xA;MVT8VoK7nucCuxV2KuxV2KuxV2KuxV2KpL5m5iGBgaAMQaeJG2EKiLa6heKMGRTIVXkvIVBpgVUk&#xA;mRdgQznZVHc4qrwSuqBZTyPdsVV8VdirsVdirsVdirsVdirsVdirsVdirsVdiqHnlcoViPFuzHFV&#xA;GOZGFCeLjZl7g4qp3NzEkMn7xRIFPFaipNNsVQ/lnmYZ2Y1BYAV8QMJVOsCuxV2KuxV2KuxV2Kux&#xA;V2KuxVDX1jFexLFKzKqty+GgNQCO4PjiqXf4ZhDArOwA3oQCfvw2qlEwt79IZdpD0HX7Q2xVNcCt&#xA;NO0Qqo5EkAJ44qiUlVtuh8MVXYq7FXYq7FXYq7FXYq7FXYq7FVryqu3U+GKoZZ2lUlhxIJBTwpir&#xA;eKpVMwuNQeCLeTw+Q33wqq/4YiLEtOxB3ICgH9ZxtUxsLCKyiaKNmZWbl8VK1oB2A8MConFXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqkHmOEpcwXKdT8Jp4qaj9eEKsi1e9kkCrb1B8AxIxVE2s7y3NZD+ye&#xA;I7A4FR+KtPPLGFCbliAAemKq6zj9oU98VXCWM/tAfPb9eKrsVdirsVdiq0yxj9oH5b/qxVa04/ZF&#xA;ffFVBJ5ZOQfYqaUHTFW8VQN1O0VxWM9VHIHpiqEl1u5ikKtAAAe9RX78Kr/LsRlu57pu2w+bmp/V&#xA;iVZBgV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuoK1puOhxV2Ksf16B7a5hu4RxTZaDoGXf8RhVt&#xA;9ftwQEjZvE9BjSqkd2XuVaSiruAOwrgVMcVUborwCN+2yj8RiqqNumKukZ/TajEbHcGmKtRM5iSr&#xA;E7CpJrirZ33OKqVsVCMi/sMwp9NcVVsVS+W7KXLMm67Bh2NMVU0162Jo6MvgdiMNKs0SGS7vJbuY&#xA;ckFRQ9CzdvoGKsh6YFcFUEkAAnqcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUrm2iuY&#xA;TDKKo1CabHY1xVZDp1jCQY4FDDoxFT95qcVQms6YLi2LQr++Ql6Dq1eoxVKYtYuxAkCJzmG3Igk0&#xA;7beOFCL+rak0QmmQl6FqdwF9ux9sUqthqsVwCsn7uRRXfoQO+BVObVIpmaCCpqDVqdQOtMKuh1SK&#xA;Flgnquwo1OgPSuKqt9qsNuoCESSMKgA7AHucCqAg1EQmeBDzKhqdyG36d/lhQhpNauTA8TpwmO3M&#xA;bEeOx74pTTRNN9C39Sdf3shDAHqoHT6cCoufTLCclpIVLHqw+E/eKYqvtLWK1hEMQ+AEnfrua4qr&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqpxW0ETO0aBWclnYDck79cVVM&#xA;VSfUtBWaZZbYiMuf3o7UP7QxVG2OmWtmvwDk5FGkbqf6DFXX2l2t4o5jjIBRZF6j29xiqA0/QBFO&#xA;0lyRIEP7pexH8x/phVOsCqU1rbzFWljDMhDKxG4INeuKquKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:F77F117407206811822ACE79A4A5ABC8</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F77F117407206811822ACE79A4A5ABC8</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:1283F20F3C3E11E0B798DD78B7152E72</stRef:instanceID>
            <stRef:documentID>uuid:1283F20E3C3E11E0B798DD78B7152E72</stRef:documentID>
            <stRef:originalDocumentID>uuid:1283F20E3C3E11E0B798DD78B7152E72</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811822ACE79A4A5ABC8</stEvt:instanceID>
                  <stEvt:when>2014-02-12T15:14:48-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:1283F20E3C3E11E0B798DD78B7152E72</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.000000</stDim:w>
            <stDim:h>4.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 877 C</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>40.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -287.999 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 287.999 li
288 287.999 li
288 0 li
cp
clp
144 0 mo
148.166 11.3525 li
153.043 .284668 li
156.486 11.8789 li
162.047 1.13916 li
164.756 12.9199 li
170.986 2.5542 li
172.945 14.4907 li
179.807 4.52734 li
181.027 16.5615 li
188.502 7.0498 li
188.957 19.1387 li
197.01 10.1128 li
196.705 22.2046 li
205.311 13.7026 li
204.25 25.751 li
213.373 17.8096 li
211.555 29.769 li
221.158 22.4146 li
218.59 34.2358 li
228.637 27.4971 li
225.342 39.1343 li
235.787 33.0454 li
231.762 44.4526 li
242.576 39.0249 li
237.838 50.1587 li
248.967 45.4243 li
243.541 56.2363 li
254.951 52.2153 li
248.863 62.6592 li
260.5 59.354 li
253.762 69.4097 li
265.586 66.8438 li
258.23 76.4419 li
270.188 74.624 li
262.246 83.7505 li
274.295 82.6865 li
265.795 91.292 li
277.891 90.9902 li
268.865 99.0405 li
280.953 99.501 li
271.439 106.973 li
283.477 108.184 li
273.512 115.05 li
285.449 117.017 li
275.076 123.241 li
286.863 125.954 li
276.119 131.508 li
287.715 134.957 li
276.645 139.832 li
288 144 li
276.645 148.167 li
287.715 153.045 li
276.119 156.491 li
286.863 162.047 li
275.076 164.757 li
285.449 170.981 li
273.512 172.949 li
283.477 179.811 li
271.439 181.026 li
280.953 188.495 li
268.865 188.95 li
277.891 197.008 li
265.795 196.704 li
274.295 205.309 li
262.246 204.249 li
270.188 213.372 li
258.23 211.557 li
265.586 221.157 li
253.762 218.588 li
260.5 228.639 li
248.863 225.342 li
254.951 235.79 li
243.541 231.762 li
248.967 242.577 li
237.838 237.836 li
242.576 248.971 li
231.762 243.546 li
235.787 254.951 li
225.342 248.865 li
228.637 260.499 li
218.59 253.765 li
221.158 265.582 li
211.555 258.229 li
213.373 270.189 li
204.25 262.245 li
205.311 274.296 li
196.705 265.792 li
197.01 277.885 li
188.957 268.863 li
188.502 280.952 li
181.027 271.437 li
179.807 283.474 li
172.945 273.514 li
170.986 285.448 li
164.756 275.082 li
162.047 286.86 li
156.486 276.125 li
153.043 287.71 li
148.166 276.643 li
144 287.999 li
139.832 276.643 li
134.958 287.71 li
131.509 276.125 li
125.956 286.86 li
123.242 275.082 li
117.014 285.448 li
115.05 273.514 li
108.192 283.474 li
106.976 271.437 li
99.4995 280.952 li
99.0435 268.863 li
90.9897 277.885 li
91.2935 265.792 li
82.686 274.296 li
83.7505 262.245 li
74.6255 270.189 li
76.4438 258.229 li
66.8452 265.582 li
69.4077 253.765 li
59.3569 260.499 li
62.6606 248.865 li
52.2085 254.951 li
56.2368 243.546 li
45.4258 248.971 li
50.1636 237.836 li
39.0293 242.577 li
44.4497 231.762 li
33.0464 235.79 li
39.1431 225.342 li
27.5024 228.639 li
34.2388 218.588 li
22.4175 221.157 li
29.7705 211.557 li
17.8125 213.372 li
25.7554 204.249 li
13.7065 205.309 li
22.2046 196.704 li
10.1099 197.008 li
19.1357 188.95 li
7.04834 188.495 li
16.5615 181.02 li
4.52734 179.811 li
14.4849 172.949 li
2.5498 170.981 li
12.9214 164.757 li
1.13916 162.047 li
11.8789 156.491 li
.286133 153.045 li
11.354 148.167 li
0 144 li
11.354 139.832 li
.286133 134.957 li
11.8789 131.508 li
1.13916 125.954 li
12.9214 123.241 li
2.5498 117.017 li
14.4849 115.05 li
4.52734 108.184 li
16.5615 106.973 li
7.04834 99.501 li
19.1357 99.0405 li
10.1099 90.9902 li
22.2046 91.292 li
13.7065 82.6865 li
25.7554 83.7505 li
17.8125 74.624 li
29.7705 76.4419 li
22.4175 66.8438 li
34.2388 69.4097 li
27.5024 59.354 li
39.1431 62.6592 li
33.0464 52.2153 li
44.4497 56.2363 li
39.0293 45.4243 li
50.1636 50.1587 li
45.4258 39.0249 li
56.2368 44.4526 li
52.2085 33.0454 li
62.6606 39.1343 li
59.3569 27.4971 li
69.4077 34.2358 li
66.8452 22.4146 li
76.4438 29.769 li
74.6255 17.8096 li
83.7505 25.751 li
82.686 13.7026 li
91.2935 22.2046 li
90.9897 10.1128 li
99.0435 19.1387 li
99.4995 7.0498 li
106.976 16.5615 li
108.192 4.52734 li
115.05 14.4907 li
117.014 2.5542 li
123.242 12.9199 li
125.956 1.13916 li
131.509 11.8789 li
134.958 .284668 li
139.832 11.3525 li
144 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
142.12 29.2056 mo
146.775 15.7388 134.251 15.4858 132.493 11.3267 cv
132.459 11.2578 132.431 11.1826 132.407 11.1079 cv
132.398 11.1826 132.382 11.2661 132.367 11.3384 cv
131.348 15.7388 119.061 18.1665 125.99 30.6089 cv
128.641 30.1948 131.32 29.8613 134.032 29.6284 cv
136.738 29.3896 139.438 29.2515 142.12 29.2056 cv
cp
0 0 0 .2 cmyk
f
109.769 15.5029 mo
109.729 15.4395 109.693 15.3735 109.656 15.3018 cv
109.656 15.3823 109.656 15.4624 109.653 15.5376 cv
109.418 20.0244 97.8647 24.52 106.575 35.4468 cv
111.677 33.6895 116.958 32.2715 122.384 31.2388 cv
124.49 17.3867 112.214 19.2739 109.769 15.5029 cv
cp
f
88.1157 23.5854 mo
88.062 23.5278 88.0112 23.4702 87.9624 23.4038 cv
87.979 23.4814 87.9917 23.5649 88.0044 23.6372 cv
88.5454 28.0723 78.0669 34.4604 88.2485 43.6211 cv
93.0405 40.9521 98.0581 38.6138 103.26 36.6436 cv
102.797 22.9321 91.1597 26.8555 88.1157 23.5854 cv
cp
f
68.1929 35.3174 mo
68.1323 35.2744 68.0708 35.2227 68.0132 35.1709 cv
68.0435 35.2456 68.0708 35.3174 68.0952 35.395 cv
69.3882 39.6377 60.2974 47.6821 71.6069 54.9077 cv
75.9233 51.3872 80.5044 48.1772 85.3257 45.3008 cv
82.4087 32.1968 71.7378 37.9951 68.1929 35.3174 cv
cp
f
50.5601 50.3628 mo
50.4878 50.3228 50.4233 50.2881 50.356 50.2451 cv
50.3989 50.3057 50.438 50.3774 50.4741 50.4492 cv
52.4741 54.3843 45.0059 63.8037 57.1313 68.9722 cv
60.8101 64.71 64.8101 60.7119 69.0806 57.0186 cv
63.9116 44.8926 54.4937 52.3706 50.5601 50.3628 cv
cp
f
35.6582 68.1035 mo
35.5864 68.0776 35.5117 68.0518 35.437 68.0205 cv
35.4927 68.0776 35.5391 68.144 35.5879 68.2075 cv
38.2485 71.7334 32.5273 82.3066 45.3628 85.2896 cv
48.2563 80.437 51.4976 75.812 55.0581 71.4399 cv
47.8608 60.3984 39.8818 69.395 35.6582 68.1035 cv
cp
f
23.8931 88.0679 mo
23.814 88.0562 23.7393 88.0479 23.6602 88.0273 cv
23.7246 88.0762 23.7837 88.1284 23.8413 88.1826 cv
27.0869 91.2114 23.2344 102.722 36.6465 103.32 cv
38.6382 98.0742 41.0039 93.0005 43.7148 88.1426 cv
34.6372 78.2598 28.2979 88.6084 23.8931 88.0679 cv
cp
f
15.7734 109.717 mo
15.6958 109.72 15.6152 109.72 15.5405 109.72 cv
15.6064 109.757 15.6768 109.792 15.7432 109.838 cv
19.4878 112.271 17.6484 124.409 31.229 122.488 cv
32.2686 117.017 33.7026 111.676 35.4956 106.49 cv
24.7012 98.0571 20.2329 109.484 15.7734 109.717 cv
cp
f
11.5566 132.442 mo
11.479 132.457 11.4043 132.474 11.3267 132.486 cv
11.3999 132.512 11.4731 132.541 11.5469 132.569 cv
15.6826 134.327 15.9561 146.735 29.2241 142.259 cv
29.3047 136.734 29.7837 131.289 30.6235 125.957 cv
18.3535 119.278 15.9316 131.436 11.5566 132.442 cv
cp
f
29.2383 145.915 mo
15.7734 141.258 15.5215 153.782 11.3613 155.547 cv
11.2935 155.577 11.2188 155.605 11.147 155.625 cv
11.2261 155.633 11.3008 155.651 11.3784 155.668 cv
15.7749 156.684 18.2036 168.973 30.6479 162.042 cv
30.231 159.396 29.897 156.718 29.6611 154.006 cv
29.4238 151.296 29.2847 148.596 29.2383 145.915 cv
cp
f
15.5435 178.264 mo
15.4785 178.301 15.4097 178.344 15.3418 178.381 cv
15.4209 178.379 15.5 178.379 15.5791 178.381 cv
20.0605 178.618 24.5591 190.167 35.48 181.457 cv
33.7197 176.351 32.312 171.077 31.2734 165.643 cv
17.4229 163.543 19.311 175.813 15.5435 178.264 cv
cp
f
23.6211 199.924 mo
23.5664 199.974 23.5063 200.026 23.4443 200.072 cv
23.5205 200.054 23.6011 200.043 23.6787 200.032 cv
28.1069 199.491 34.4961 209.963 43.6572 199.79 cv
40.9893 194.993 38.6509 189.982 36.6763 184.77 cv
22.9697 185.242 26.8931 196.874 23.6211 199.924 cv
cp
f
35.3579 219.84 mo
35.3115 219.901 35.2612 219.963 35.2095 220.022 cv
35.2827 219.993 35.355 219.967 35.4297 219.944 cv
39.6748 218.641 47.7139 227.739 54.9409 216.432 cv
51.4214 212.112 48.2104 207.53 45.3384 202.709 cv
32.2314 205.625 38.0327 216.293 35.3579 219.84 cv
cp
f
50.396 237.475 mo
50.3618 237.543 50.3247 237.612 50.2808 237.676 cv
50.3472 237.635 50.4194 237.598 50.4868 237.561 cv
54.4185 235.556 63.8413 243.032 69.0054 230.905 cv
64.7446 227.223 60.7446 223.229 57.0571 218.952 cv
44.9312 224.124 52.4009 233.545 50.396 237.475 cv
cp
f
68.1353 252.374 mo
68.1108 252.448 68.0864 252.523 68.0591 252.598 cv
68.1157 252.543 68.1772 252.495 68.2388 252.445 cv
71.7671 249.791 82.3442 255.508 85.3257 242.674 cv
80.4771 239.781 75.8452 236.537 71.481 232.979 cv
60.437 240.175 69.4321 248.154 68.1353 252.374 cv
cp
f
88.1069 264.143 mo
88.0933 264.217 88.0825 264.295 88.0659 264.374 cv
88.1157 264.31 88.1646 264.252 88.2202 264.195 cv
91.2446 260.948 102.756 264.798 103.358 251.39 cv
98.1099 249.396 93.0366 247.035 88.1753 244.32 cv
78.2944 253.403 88.647 259.74 88.1069 264.143 cv
cp
f
109.754 272.262 mo
109.759 272.334 109.759 272.415 109.754 272.496 cv
109.791 272.423 109.827 272.358 109.873 272.292 cv
112.309 268.546 124.444 270.387 122.524 256.808 cv
117.056 255.767 111.71 254.334 106.526 252.543 cv
98.0962 263.332 109.523 267.798 109.754 272.262 cv
cp
f
132.48 276.482 mo
132.5 276.554 132.513 276.631 132.52 276.709 cv
132.55 276.634 132.575 276.557 132.608 276.488 cv
134.363 272.352 146.768 272.079 142.298 258.807 cv
136.771 258.736 131.328 258.258 125.996 257.407 cv
119.315 269.677 131.476 272.104 132.48 276.482 cv
cp
f
145.951 258.799 mo
141.297 272.262 153.814 272.513 155.58 276.672 cv
155.609 276.738 155.639 276.816 155.66 276.89 cv
155.67 276.81 155.688 276.735 155.705 276.655 cv
156.719 272.259 169.006 269.833 162.08 257.392 cv
159.436 257.806 156.754 258.137 154.045 258.376 cv
151.33 258.609 148.631 258.75 145.951 258.799 cv
cp
f
178.295 272.493 mo
178.338 272.559 178.381 272.625 178.418 272.697 cv
178.412 272.62 178.412 272.536 178.418 272.456 cv
178.656 267.974 190.199 263.476 181.492 252.554 cv
176.393 254.312 171.111 255.73 165.686 256.762 cv
163.582 270.609 175.852 268.722 178.295 272.493 cv
cp
f
199.959 264.411 mo
200.008 264.468 200.059 264.532 200.105 264.591 cv
200.088 264.514 200.076 264.436 200.07 264.362 cv
199.523 259.926 210 253.539 199.822 244.38 cv
195.025 247.046 190.016 249.382 184.809 251.361 cv
185.275 265.069 196.916 261.14 199.959 264.411 cv
cp
f
219.877 252.678 mo
219.939 252.724 219.996 252.773 220.055 252.825 cv
220.025 252.753 219.996 252.678 219.977 252.6 cv
218.68 248.358 227.768 240.319 216.465 233.096 cv
212.145 236.614 207.563 239.822 202.746 242.698 cv
205.664 255.799 216.332 250.003 219.877 252.678 cv
cp
f
237.508 237.638 mo
237.58 237.672 237.65 237.71 237.711 237.75 cv
237.668 237.684 237.635 237.618 237.596 237.549 cv
235.592 233.612 243.064 224.192 230.943 219.029 cv
227.256 223.289 223.264 227.287 218.99 230.98 cv
224.158 243.106 233.572 235.631 237.508 237.638 cv
cp
f
252.412 219.897 mo
252.48 219.918 252.557 219.947 252.631 219.975 cv
252.578 219.918 252.527 219.858 252.479 219.793 cv
249.824 216.268 255.541 205.695 242.711 202.709 cv
239.82 207.561 236.578 212.19 233.016 216.558 cv
240.209 227.597 248.189 218.606 252.412 219.897 cv
cp
f
264.182 199.934 mo
264.256 199.94 264.334 199.951 264.408 199.968 cv
264.35 199.924 264.291 199.871 264.234 199.819 cv
260.984 196.79 264.84 185.276 251.428 184.675 cv
249.436 189.924 247.068 194.993 244.355 199.859 cv
253.436 209.742 259.773 199.387 264.182 199.934 cv
cp
f
272.295 178.282 mo
272.373 178.276 272.453 178.276 272.529 178.276 cv
272.459 178.241 272.396 178.201 272.328 178.161 cv
268.582 175.73 270.424 163.589 256.844 165.51 cv
255.801 170.979 254.373 176.325 252.574 181.508 cv
263.365 189.938 267.84 178.511 272.295 178.282 cv
cp
f
276.512 155.553 mo
276.59 155.534 276.664 155.522 276.746 155.507 cv
276.67 155.49 276.596 155.461 276.521 155.426 cv
272.389 153.672 272.111 141.264 258.84 145.737 cv
258.77 151.262 258.291 156.709 257.445 162.042 cv
269.715 168.721 272.137 156.563 276.512 155.553 cv
cp
f
276.691 132.331 mo
272.293 131.312 269.871 119.025 257.422 125.954 cv
257.842 128.6 258.17 131.28 258.412 133.993 cv
258.648 136.708 258.783 139.406 258.832 142.081 cv
272.295 146.737 272.547 134.214 276.705 132.454 cv
276.779 132.422 276.85 132.396 276.924 132.371 cv
276.846 132.359 276.768 132.348 276.691 132.331 cv
cp
f
272.529 109.734 mo
272.592 109.691 272.666 109.654 272.725 109.62 cv
272.65 109.62 272.574 109.62 272.494 109.62 cv
268.01 109.378 263.514 97.8325 252.59 106.542 cv
254.348 111.645 255.76 116.925 256.799 122.35 cv
270.643 124.455 268.756 112.179 272.529 109.734 cv
cp
f
264.443 88.0762 mo
264.51 88.0244 264.564 87.9727 264.625 87.9268 cv
264.551 87.9438 264.469 87.9585 264.395 87.9673 cv
259.965 88.5078 253.574 78.0327 244.41 88.2114 cv
247.086 93.0063 249.422 98.0225 251.391 103.229 cv
265.102 102.757 261.18 91.1196 264.443 88.0762 cv
cp
f
252.711 68.1558 mo
252.758 68.0923 252.813 68.0317 252.863 67.9741 cv
252.791 68.0088 252.711 68.0317 252.637 68.0576 cv
248.395 69.3491 240.357 60.2573 233.127 71.5723 cv
236.645 75.8867 239.859 80.4688 242.73 85.2896 cv
255.84 82.3701 250.037 71.7046 252.711 68.1558 cv
cp
f
237.668 50.521 mo
237.709 50.4551 237.75 50.3862 237.789 50.3169 cv
237.721 50.3628 237.656 50.4033 237.582 50.4351 cv
233.648 52.4399 224.23 44.9702 219.063 57.0903 cv
223.324 60.7749 227.326 64.77 231.02 69.0498 cv
243.139 63.8755 235.666 54.4531 237.668 50.521 cv
cp
f
219.934 35.6196 mo
219.957 35.5444 219.98 35.4785 220.014 35.4038 cv
219.951 35.4526 219.893 35.5044 219.83 35.5503 cv
216.305 38.208 205.73 32.4873 202.746 45.3267 cv
207.598 48.2202 212.225 51.4619 216.588 55.0225 cv
227.637 47.8203 218.633 39.8477 219.934 35.6196 cv
cp
f
199.967 23.8496 mo
199.973 23.7778 199.986 23.7002 200.008 23.6226 cv
199.959 23.6831 199.904 23.749 199.852 23.8037 cv
196.822 27.0513 185.313 23.1938 184.715 36.6089 cv
189.957 38.5991 195.025 40.9663 199.893 43.6816 cv
209.781 34.6011 199.42 28.2622 199.967 23.8496 cv
cp
f
178.32 15.7388 mo
178.314 15.6582 178.309 15.5835 178.314 15.5029 cv
178.277 15.5718 178.24 15.6382 178.193 15.71 cv
175.764 19.4492 163.625 17.6084 165.543 31.1899 cv
171.018 32.231 176.359 33.6636 181.541 35.4556 cv
189.979 24.6665 178.551 20.1968 178.32 15.7388 cv
cp
f
155.586 11.522 mo
155.572 11.4419 155.557 11.3638 155.543 11.2866 cv
155.523 11.3638 155.494 11.439 155.465 11.5137 cv
153.711 15.644 141.297 15.917 145.777 29.188 cv
151.297 29.2715 156.742 29.7461 162.078 30.5859 cv
168.756 18.3159 156.6 15.894 155.586 11.522 cv
cp
f
151.744 34.9263 mo
157.285 22.5352 145.418 21.2612 144.093 17.1655 cv
144.073 17.0962 144.052 17.0273 144.033 16.9526 cv
144.018 17.0273 144 17.0962 143.978 17.1714 cv
142.646 21.2612 130.786 22.5381 136.324 34.9263 cv
138.871 34.748 141.444 34.6587 144.033 34.6587 cv
146.629 34.6587 149.195 34.748 151.744 34.9263 cv
cp
0 0 0 .12 cmyk
f
122.196 19.2451 mo
122.16 19.1846 122.131 19.1128 122.097 19.0464 cv
122.094 19.1187 122.089 19.1958 122.078 19.271 cv
121.483 23.502 110.152 26.8125 117.503 37.8975 cv
122.497 36.6548 127.618 35.7515 132.858 35.2197 cv
136 22.2534 124.198 23.0273 122.196 19.2451 cv
cp
f
100.975 25.1152 mo
100.926 25.0581 100.886 24.9946 100.848 24.9312 cv
100.856 25.0088 100.861 25.0811 100.866 25.1558 cv
101.012 29.4067 90.5444 34.5952 99.4419 44.1362 cv
104.212 41.999 109.158 40.1982 114.262 38.7544 cv
114.955 25.7109 103.592 28.4663 100.975 25.1152 cv
cp
f
81.0991 34.5952 mo
81.0464 34.5464 80.9927 34.4917 80.9429 34.4399 cv
80.9653 34.5093 80.9849 34.584 80.9966 34.6587 cv
81.8755 38.792 72.5835 45.666 82.7124 53.458 cv
87.1001 50.478 91.7163 47.8149 96.5278 45.4907 cv
94.8452 32.8066 84.2427 37.4258 81.0991 34.5952 cv
cp
f
63.1196 47.3975 mo
63.0591 47.3574 62.9966 47.3198 62.937 47.271 cv
62.9722 47.3403 63.0044 47.4063 63.0347 47.4751 cv
64.605 51.3755 56.7358 59.6938 67.812 65.6016 cv
71.6587 61.8594 75.7788 58.4048 80.144 55.2583 cv
76.2466 43.3218 66.689 49.6294 63.1196 47.3975 cv
cp
f
47.5127 62.9956 mo
47.4424 62.9668 47.3774 62.9321 47.3101 62.9033 cv
47.3545 62.9609 47.3989 63.0244 47.438 63.0845 cv
49.6675 66.6543 43.3608 76.209 55.2915 80.1035 cv
58.438 75.7432 61.9009 71.6216 65.6392 67.7817 cv
59.7271 56.6968 51.4097 64.5747 47.5127 62.9956 cv
cp
f
34.6919 80.9634 mo
34.6172 80.9463 34.5464 80.9263 34.4775 80.9028 cv
34.5308 80.9575 34.5854 81.0122 34.6343 81.064 cv
37.4629 84.208 32.8496 94.8125 45.5254 96.4893 cv
47.8477 91.6772 50.5181 87.064 53.4927 82.6777 cv
45.6992 72.5444 38.8296 81.8408 34.6919 80.9634 cv
cp
f
25.1914 100.827 mo
25.1152 100.824 25.0449 100.818 24.9717 100.81 cv
25.0317 100.847 25.0938 100.893 25.1543 100.936 cv
28.5034 103.562 25.7495 114.92 38.7949 114.227 cv
40.2344 109.125 42.0361 104.172 44.1719 99.4028 cv
34.6313 90.5039 29.4399 100.979 25.1914 100.827 cv
cp
f
19.3037 122.045 mo
19.229 122.051 19.1543 122.059 19.0825 122.059 cv
19.1514 122.091 19.2178 122.12 19.2852 122.16 cv
23.063 124.167 22.291 135.963 35.2583 132.819 cv
35.7876 127.582 36.6909 122.459 37.9336 117.469 cv
26.8467 110.114 23.5391 121.447 19.3037 122.045 cv
cp
f
34.9609 136.285 mo
22.5757 130.749 21.293 142.616 17.2012 143.942 cv
17.1367 143.959 17.062 143.982 16.9897 144 cv
17.062 144.014 17.1367 144.04 17.2085 144.054 cv
21.293 145.385 22.5757 157.245 34.9609 151.71 cv
34.7822 149.163 34.6919 146.59 34.6919 144 cv
34.6919 141.408 34.7822 138.836 34.9609 136.285 cv
cp
f
19.2793 165.838 mo
19.2178 165.875 19.1499 165.908 19.0825 165.936 cv
19.1543 165.936 19.2319 165.948 19.3052 165.959 cv
23.5391 166.551 26.8467 177.881 37.9336 170.53 cv
36.688 165.54 35.7876 160.415 35.2583 155.176 cv
22.291 152.033 23.063 163.831 19.2793 165.838 cv
cp
f
25.1543 187.065 mo
25.0938 187.106 25.0317 187.146 24.9717 187.192 cv
25.0449 187.177 25.1182 187.168 25.1943 187.168 cv
29.4399 187.025 34.6343 197.492 44.1689 188.592 cv
42.0361 183.827 40.2344 178.872 38.7935 173.772 cv
25.748 173.079 28.5034 184.442 25.1543 187.065 cv
cp
f
34.6313 206.934 mo
34.5811 206.987 34.5308 207.042 34.4746 207.09 cv
34.5464 207.07 34.6201 207.049 34.6934 207.038 cv
38.8296 206.155 45.6992 215.452 53.4927 205.324 cv
50.5151 200.934 47.8477 196.319 45.5239 191.512 cv
32.8438 193.192 37.4644 203.793 34.6313 206.934 cv
cp
f
47.4365 224.917 mo
47.395 224.977 47.3545 225.038 47.3101 225.095 cv
47.3774 225.061 47.4424 225.029 47.5156 225.002 cv
51.4146 223.426 59.7271 231.299 65.6392 220.225 cv
61.894 216.379 58.438 212.255 55.2886 207.889 cv
43.3594 211.79 49.6675 221.347 47.4365 224.917 cv
cp
f
63.0347 240.523 mo
63.0015 240.589 62.9722 240.659 62.937 240.724 cv
62.9966 240.678 63.0591 240.638 63.1196 240.598 cv
66.689 238.369 76.2466 244.676 80.144 232.741 cv
75.7788 229.599 71.6558 226.13 67.8071 222.397 cv
56.7329 228.307 64.6089 236.624 63.0347 240.523 cv
cp
f
80.9966 253.345 mo
80.9819 253.415 80.9653 253.49 80.9409 253.561 cv
80.9927 253.498 81.0464 253.449 81.104 253.403 cv
84.2466 250.573 94.8433 255.183 96.5278 242.513 cv
91.7134 240.187 87.0972 237.52 82.7124 234.541 cv
72.5835 242.335 81.8794 249.209 80.9966 253.345 cv
cp
f
100.866 262.843 mo
100.861 262.917 100.856 262.993 100.844 263.067 cv
100.886 263.001 100.926 262.935 100.975 262.88 cv
103.596 259.53 114.955 262.285 114.262 249.247 cv
109.158 247.806 104.212 246 99.438 243.866 cv
90.5444 253.403 101.012 258.594 100.866 262.843 cv
cp
f
122.078 268.731 mo
122.089 268.805 122.094 268.877 122.097 268.952 cv
122.131 268.889 122.16 268.814 122.196 268.75 cv
124.202 264.974 136 265.742 132.858 252.776 cv
127.618 252.247 122.497 251.346 117.498 250.101 cv
110.152 261.192 121.483 264.497 122.078 268.731 cv
cp
f
136.324 253.073 mo
130.786 265.46 142.649 266.74 143.978 270.828 cv
144 270.896 144.018 270.971 144.033 271.046 cv
144.052 270.971 144.073 270.896 144.093 270.828 cv
145.422 266.74 157.283 265.458 151.744 253.073 cv
149.195 253.253 146.629 253.345 144.033 253.345 cv
141.444 253.345 138.871 253.253 136.324 253.073 cv
cp
f
165.877 268.75 mo
165.912 268.814 165.941 268.889 165.969 268.952 cv
165.975 268.877 165.984 268.799 165.992 268.731 cv
166.59 264.497 177.918 261.186 170.566 250.101 cv
165.578 251.346 160.449 252.247 155.215 252.776 cv
152.072 265.742 163.869 264.974 165.877 268.75 cv
cp
f
187.092 262.886 mo
187.139 262.944 187.186 263.001 187.225 263.067 cv
187.217 262.993 187.207 262.917 187.205 262.84 cv
187.061 258.594 197.525 253.403 188.631 243.866 cv
183.859 246 178.91 247.806 173.811 249.247 cv
173.113 262.285 184.48 259.53 187.092 262.886 cv
cp
f
206.967 253.403 mo
207.025 253.455 207.076 253.503 207.129 253.561 cv
207.109 253.49 207.088 253.415 207.07 253.339 cv
206.193 249.209 215.486 242.335 205.357 234.541 cv
200.971 237.52 196.354 240.187 191.545 242.513 cv
193.225 255.192 203.832 250.57 206.967 253.403 cv
cp
f
224.949 240.598 mo
225.008 240.638 225.07 240.678 225.129 240.724 cv
225.096 240.659 225.064 240.589 225.039 240.52 cv
223.459 236.624 231.332 228.305 220.262 222.397 cv
216.414 226.13 212.295 229.599 207.928 232.741 cv
211.826 244.676 221.383 238.369 224.949 240.598 cv
cp
f
240.559 225.002 mo
240.625 225.029 240.695 225.061 240.764 225.095 cv
240.711 225.038 240.672 224.977 240.637 224.911 cv
238.404 221.347 244.709 211.79 232.779 207.889 cv
229.633 212.255 226.172 216.379 222.43 220.225 cv
228.342 231.299 236.662 223.426 240.559 225.002 cv
cp
f
253.379 207.038 mo
253.451 207.055 253.521 207.07 253.594 207.09 cv
253.539 207.042 253.488 206.987 253.436 206.934 cv
250.605 203.788 255.219 193.192 242.547 191.512 cv
240.225 196.319 237.551 200.934 234.576 205.324 cv
242.371 215.452 249.248 206.155 253.379 207.038 cv
cp
f
262.877 187.168 mo
262.951 187.168 263.025 187.177 263.105 187.192 cv
263.037 187.146 262.977 187.106 262.922 187.053 cv
259.568 184.436 262.318 173.079 249.273 173.772 cv
247.834 178.876 246.033 183.827 243.902 188.595 cv
253.441 197.492 258.631 187.019 262.877 187.168 cv
cp
f
268.77 165.959 mo
268.842 165.948 268.914 165.936 268.99 165.936 cv
268.922 165.908 268.85 165.875 268.789 165.838 cv
265.008 163.829 265.777 152.033 252.814 155.176 cv
252.285 160.415 251.379 165.54 250.135 170.53 cv
261.225 177.881 264.533 166.551 268.77 165.959 cv
cp
f
270.867 143.942 mo
266.775 142.607 265.494 130.751 253.107 136.285 cv
253.287 138.836 253.379 141.408 253.379 144 cv
253.379 146.59 253.287 149.163 253.107 151.71 cv
265.494 157.247 266.775 145.385 270.867 144.054 cv
270.936 144.04 271.004 144.014 271.078 144 cv
271.004 143.982 270.936 143.959 270.867 143.942 cv
cp
f
268.789 122.16 mo
268.855 122.12 268.922 122.091 268.99 122.062 cv
268.914 122.059 268.838 122.051 268.766 122.045 cv
264.533 121.444 261.219 110.114 250.135 117.469 cv
251.379 122.459 252.283 127.582 252.814 132.819 cv
265.781 135.963 265.008 124.162 268.789 122.16 cv
cp
f
262.922 100.936 mo
262.977 100.893 263.037 100.847 263.105 100.813 cv
263.025 100.818 262.947 100.827 262.877 100.827 cv
258.625 100.974 253.436 90.5098 243.902 99.4028 cv
246.033 104.172 247.834 109.125 249.273 114.227 cv
262.324 114.917 259.563 103.556 262.922 100.936 cv
cp
f
253.441 81.064 mo
253.488 81.0063 253.539 80.9575 253.594 80.9028 cv
253.521 80.9263 253.451 80.9463 253.379 80.9634 cv
249.242 81.8408 242.371 72.5444 234.576 82.6777 cv
237.551 87.064 240.223 91.6772 242.547 96.4893 cv
255.225 94.8125 250.605 84.2051 253.441 81.064 cv
cp
f
240.637 63.0845 mo
240.672 63.0186 240.717 62.9609 240.764 62.9033 cv
240.695 62.9321 240.625 62.9668 240.553 62.9956 cv
236.656 64.5718 228.338 56.7021 222.43 67.7729 cv
226.172 71.6216 229.633 75.7432 232.779 80.1035 cv
244.715 76.209 238.404 66.6543 240.637 63.0845 cv
cp
f
225.039 47.4751 mo
225.064 47.4063 225.096 47.3403 225.135 47.271 cv
225.07 47.3198 225.008 47.3604 224.949 47.3975 cv
221.381 49.6265 211.822 43.3276 207.922 55.2583 cv
212.289 58.3994 216.414 61.8594 220.262 65.6016 cv
231.336 59.688 223.459 51.3755 225.039 47.4751 cv
cp
f
207.07 34.6528 mo
207.088 34.584 207.109 34.5093 207.129 34.4399 cv
207.076 34.4917 207.02 34.5464 206.967 34.5952 cv
203.826 37.4258 193.223 32.8091 191.545 45.4907 cv
196.354 47.8149 200.967 50.478 205.352 53.458 cv
215.49 45.6577 206.191 38.7891 207.07 34.6528 cv
cp
f
187.205 25.1558 mo
187.207 25.0781 187.217 25.0088 187.225 24.9341 cv
187.186 24.9946 187.139 25.0581 187.092 25.1152 cv
184.475 28.4663 173.113 25.7134 173.811 38.7544 cv
178.91 40.1982 183.859 41.999 188.629 44.1362 cv
197.531 34.5952 187.055 29.4067 187.205 25.1558 cv
cp
f
165.992 19.271 mo
165.984 19.1904 165.975 19.1187 165.969 19.0464 cv
165.941 19.1128 165.912 19.1846 165.871 19.2451 cv
163.867 23.0273 152.072 22.2563 155.215 35.2197 cv
160.449 35.7515 165.572 36.6548 170.561 37.8975 cv
177.92 26.8096 166.586 23.499 165.992 19.271 cv
cp
f
142.211 34.6704 mo
146.65 21.8452 134.719 21.6064 133.04 17.6431 cv
133.009 17.5796 132.985 17.5078 132.964 17.436 cv
132.953 17.5161 132.94 17.5825 132.923 17.6572 cv
131.957 21.8481 120.25 24.1548 126.848 36.0161 cv
129.371 35.6138 131.923 35.2974 134.506 35.0728 cv
137.087 34.8428 139.655 34.7163 142.211 34.6704 cv
cp
0 0 0 .036 cmyk
f
111.404 21.6235 mo
111.363 21.563 111.325 21.4971 111.292 21.4365 cv
111.292 21.5059 111.292 21.5835 111.292 21.6611 cv
111.063 25.9263 100.063 30.209 108.36 40.6128 cv
113.22 38.9443 118.25 37.5952 123.418 36.6089 cv
125.42 23.4185 113.728 25.2134 111.404 21.6235 cv
cp
f
90.7769 29.3203 mo
90.728 29.2656 90.6792 29.2085 90.6333 29.1509 cv
90.646 29.2256 90.6577 29.2944 90.6704 29.3667 cv
91.187 33.5889 81.2104 39.6748 90.9038 48.3984 cv
95.4702 45.8589 100.245 43.6382 105.205 41.7544 cv
104.757 28.6934 93.6763 32.4326 90.7769 29.3203 cv
cp
f
71.8052 40.4946 mo
71.7476 40.4487 71.6909 40.4053 71.6313 40.3535 cv
71.6587 40.4199 71.6851 40.4946 71.7065 40.5635 cv
72.9458 44.6079 64.2837 52.2671 75.0562 59.144 cv
79.1685 55.7993 83.5317 52.7388 88.1235 50.0063 cv
85.3413 37.5205 75.1812 43.04 71.8052 40.4946 cv
cp
f
55.0083 54.8154 mo
54.9438 54.7866 54.8833 54.7495 54.8169 54.709 cv
54.8589 54.7695 54.895 54.8354 54.9263 54.9077 cv
56.8394 58.6523 49.7241 67.6206 61.27 72.5444 cv
64.7778 68.4834 68.5796 64.6782 72.6528 61.1606 cv
67.7251 49.6152 58.7544 56.731 55.0083 54.8154 cv
cp
f
40.8198 71.7163 mo
40.7466 71.6934 40.6802 71.6675 40.6113 71.6387 cv
40.6602 71.6934 40.7075 71.7539 40.7534 71.811 cv
43.2847 75.1709 37.8354 85.2461 50.062 88.085 cv
52.8149 83.4658 55.9028 79.0596 59.2964 74.8945 cv
52.4409 64.376 44.8423 72.9473 40.8198 71.7163 cv
cp
f
29.6123 90.731 mo
29.5405 90.7227 29.4673 90.7109 29.3926 90.6938 cv
29.4526 90.7397 29.5103 90.7886 29.5635 90.8403 cv
32.6538 93.7251 28.9824 104.687 41.7588 105.256 cv
43.6572 100.26 45.9106 95.4312 48.4922 90.8003 cv
39.8477 81.3862 33.8115 91.2461 29.6123 90.731 cv
cp
f
21.8809 111.348 mo
21.8076 111.351 21.7329 111.351 21.6582 111.348 cv
21.7241 111.385 21.7905 111.423 21.8511 111.463 cv
25.4189 113.781 23.6646 125.341 36.6016 123.512 cv
37.5928 118.303 38.9546 113.212 40.6646 108.279 cv
30.3862 100.243 26.1309 111.132 21.8809 111.348 cv
cp
f
17.8643 132.998 mo
17.791 133.012 17.7207 133.023 17.646 133.038 cv
17.7163 133.058 17.7852 133.087 17.856 133.11 cv
21.7935 134.79 22.0552 146.602 34.6934 142.34 cv
34.7695 137.082 35.2212 131.896 36.0249 126.813 cv
24.3374 120.457 22.0322 132.037 17.8643 132.998 cv
cp
f
34.7036 145.826 mo
21.8809 141.385 21.6411 153.319 17.6816 154.995 cv
17.6113 155.024 17.5449 155.049 17.4746 155.076 cv
17.5479 155.082 17.6216 155.096 17.6948 155.11 cv
21.8823 156.08 24.1934 167.783 36.0464 161.185 cv
35.6479 158.665 35.332 156.112 35.1074 153.534 cv
34.8818 150.946 34.751 148.374 34.7036 145.826 cv
cp
f
21.6597 176.63 mo
21.5962 176.67 21.5347 176.711 21.4683 176.743 cv
21.543 176.74 21.6177 176.74 21.6953 176.745 cv
25.9639 176.967 30.2466 187.968 40.6499 179.676 cv
38.9761 174.813 37.6299 169.785 36.6465 164.616 cv
23.4531 162.612 25.252 174.3 21.6597 176.63 cv
cp
f
29.3564 197.258 mo
29.3032 197.305 29.2456 197.356 29.1851 197.403 cv
29.2603 197.385 29.335 197.374 29.4097 197.362 cv
33.626 196.847 39.7095 206.819 48.4375 197.129 cv
45.8965 192.559 43.6685 187.79 41.7891 182.832 cv
28.7324 183.28 32.4697 194.356 29.3564 197.258 cv
cp
f
40.5322 216.231 mo
40.4902 216.288 40.4399 216.346 40.3911 216.403 cv
40.46 216.374 40.5322 216.346 40.6025 216.325 cv
44.645 215.088 52.3013 223.749 59.1812 212.981 cv
55.8335 208.87 52.7729 204.506 50.0376 199.911 cv
37.5566 202.695 43.0806 212.854 40.5322 216.231 cv
cp
f
54.854 233.025 mo
54.8208 233.09 54.7837 233.155 54.7466 233.211 cv
54.8081 233.177 54.8745 233.14 54.9409 233.108 cv
58.688 231.198 67.6567 238.311 72.5835 226.763 cv
68.5181 223.262 64.7114 219.455 61.1948 215.379 cv
49.6499 220.303 56.7681 229.277 54.854 233.025 cv
cp
f
71.7505 247.213 mo
71.731 247.289 71.7017 247.357 71.6763 247.423 cv
71.731 247.375 71.7886 247.326 71.8491 247.283 cv
75.2095 244.754 85.2808 250.202 88.1177 237.972 cv
83.4985 235.219 79.0942 232.13 74.9302 228.743 cv
64.4165 235.593 72.98 243.192 71.7505 247.213 cv
cp
f
90.77 258.422 mo
90.7603 258.494 90.7485 258.569 90.728 258.643 cv
90.7769 258.581 90.8257 258.523 90.8765 258.465 cv
93.7603 255.382 104.72 259.049 105.295 246.282 cv
100.299 244.383 95.4653 242.128 90.8374 239.542 cv
81.4233 248.191 91.2817 254.226 90.77 258.422 cv
cp
f
111.387 266.151 mo
111.39 266.225 111.39 266.306 111.387 266.375 cv
111.424 266.312 111.46 266.246 111.5 266.185 cv
113.818 262.616 125.375 264.371 123.544 251.439 cv
118.341 250.446 113.248 249.08 108.311 247.375 cv
100.282 257.651 111.166 261.911 111.387 266.151 cv
cp
f
133.029 270.171 mo
133.046 270.244 133.064 270.315 133.071 270.393 cv
133.091 270.318 133.122 270.25 133.149 270.177 cv
134.824 266.243 146.635 265.978 142.38 253.339 cv
137.115 253.271 131.93 252.816 126.853 252.011 cv
120.494 263.7 132.07 266.003 133.029 270.171 cv
cp
f
145.859 253.334 mo
141.422 266.151 153.352 266.392 155.031 270.353 cv
155.057 270.418 155.082 270.491 155.109 270.56 cv
155.121 270.485 155.129 270.414 155.148 270.338 cv
156.113 266.151 167.816 263.844 161.225 251.991 cv
158.699 252.388 156.15 252.702 153.566 252.928 cv
150.98 253.156 148.412 253.288 145.859 253.334 cv
cp
f
176.664 266.375 mo
176.707 266.438 176.744 266.504 176.779 266.565 cv
176.775 266.49 176.775 266.416 176.779 266.34 cv
177.008 262.072 188.004 257.787 179.715 247.386 cv
174.846 249.06 169.818 250.406 164.652 251.39 cv
162.65 264.581 174.334 262.783 176.664 266.375 cv
cp
f
197.291 258.681 mo
197.344 258.736 197.389 258.791 197.436 258.848 cv
197.418 258.776 197.406 258.701 197.398 258.632 cv
196.881 254.404 206.852 248.324 197.168 239.6 cv
192.598 242.14 187.822 244.363 182.871 246.247 cv
183.311 259.299 194.393 255.566 197.291 258.681 cv
cp
f
216.264 247.5 mo
216.326 247.547 216.379 247.593 216.441 247.645 cv
216.408 247.576 216.385 247.5 216.359 247.432 cv
215.125 243.391 223.781 235.731 213.02 228.857 cv
208.906 232.2 204.539 235.26 199.943 237.999 cv
202.729 250.475 212.887 244.956 216.264 247.5 cv
cp
f
233.061 233.18 mo
233.125 233.211 233.193 233.249 233.256 233.287 cv
233.211 233.223 233.176 233.161 233.145 233.096 cv
231.232 229.346 238.348 220.377 226.803 215.454 cv
223.299 219.515 219.49 223.323 215.418 226.833 cv
220.342 238.383 229.313 231.268 233.061 233.18 cv
cp
f
247.246 216.282 mo
247.318 216.305 247.387 216.329 247.459 216.357 cv
247.408 216.305 247.361 216.248 247.318 216.184 cv
244.785 212.825 250.232 202.755 238.014 199.911 cv
235.258 204.536 232.17 208.942 228.775 213.101 cv
235.633 223.617 243.23 215.051 247.246 216.282 cv
cp
f
258.459 197.264 mo
258.529 197.273 258.602 197.288 258.676 197.305 cv
258.613 197.258 258.557 197.208 258.504 197.159 cv
255.41 194.273 259.086 183.309 246.314 182.739 cv
244.416 187.739 242.162 192.571 239.578 197.196 cv
248.225 206.612 254.264 196.75 258.459 197.264 cv
cp
f
266.191 176.647 mo
266.264 176.645 266.336 176.645 266.414 176.647 cv
266.35 176.61 266.275 176.573 266.219 176.533 cv
262.652 174.217 264.402 162.661 251.469 164.487 cv
250.479 169.693 249.115 174.787 247.408 179.719 cv
257.684 187.752 261.943 176.87 266.191 176.647 cv
cp
f
270.205 155.004 mo
270.279 154.987 270.348 154.972 270.426 154.96 cv
270.354 154.938 270.283 154.915 270.213 154.885 cv
266.275 153.211 266.012 141.391 253.373 145.653 cv
253.299 150.919 252.85 156.1 252.051 161.182 cv
263.736 167.542 266.039 155.961 270.205 155.004 cv
cp
f
270.377 132.885 mo
266.184 131.916 263.879 120.215 252.023 126.808 cv
252.424 129.333 252.736 131.887 252.965 134.47 cv
253.189 137.053 253.32 139.619 253.367 142.173 cv
266.189 146.614 266.426 134.683 270.383 133.003 cv
270.457 132.972 270.523 132.946 270.6 132.926 cv
270.521 132.917 270.445 132.9 270.377 132.885 cv
cp
f
266.41 111.368 mo
266.471 111.328 266.535 111.291 266.604 111.253 cv
266.529 111.259 266.451 111.259 266.379 111.253 cv
262.107 111.029 257.826 100.03 247.422 108.319 cv
249.094 113.186 250.439 118.211 251.428 123.379 cv
264.619 125.381 262.816 113.692 266.41 111.368 cv
cp
f
258.715 90.7397 mo
258.775 90.688 258.826 90.6392 258.883 90.5962 cv
258.814 90.6133 258.734 90.6245 258.66 90.6304 cv
254.443 91.1538 248.363 81.1763 239.631 90.8691 cv
242.172 95.4341 244.404 100.208 246.279 105.167 cv
259.338 104.718 255.6 93.6392 258.715 90.7397 cv
cp
f
247.539 71.771 mo
247.58 71.7134 247.629 71.6499 247.678 71.5981 cv
247.609 71.627 247.539 71.6499 247.471 71.6704 cv
243.428 72.9072 235.764 64.2466 228.885 75.0181 cv
232.238 79.1284 235.293 83.4917 238.025 88.0879 cv
250.514 85.3037 244.992 75.1421 247.539 71.771 cv
cp
f
233.217 54.9707 mo
233.248 54.9106 233.285 54.8442 233.326 54.7808 cv
233.26 54.8213 233.193 54.856 233.125 54.8901 cv
229.379 56.8003 220.41 49.6841 215.49 61.2354 cv
219.549 64.7388 223.355 68.5469 226.871 72.6138 cv
238.422 67.6924 231.303 58.7188 233.217 54.9707 cv
cp
f
216.314 40.7793 mo
216.338 40.7104 216.361 40.6411 216.396 40.5781 cv
216.338 40.6211 216.281 40.6699 216.221 40.7163 cv
212.857 43.2471 202.791 37.7969 199.949 50.0239 cv
204.568 52.7817 208.975 55.8623 213.135 59.2563 cv
223.652 52.4023 215.088 44.8003 216.314 40.7793 cv
cp
f
197.297 29.5737 mo
197.313 29.5015 197.324 29.4297 197.34 29.3579 cv
197.291 29.4155 197.24 29.4756 197.193 29.5249 cv
194.309 32.6167 183.342 28.9468 182.777 41.7197 cv
187.771 43.6211 192.604 45.8706 197.229 48.4561 cv
206.645 39.8071 196.783 33.77 197.297 29.5737 cv
cp
f
176.686 21.8452 mo
176.68 21.7676 176.68 21.6929 176.68 21.6206 cv
176.648 21.687 176.605 21.75 176.566 21.8135 cv
174.254 25.3799 162.693 23.6255 164.523 36.563 cv
169.732 37.5552 174.816 38.9185 179.756 40.627 cv
187.789 30.3501 176.908 26.0903 176.686 21.8452 cv
cp
f
155.039 17.8296 mo
155.018 17.7549 155.012 17.6831 154.996 17.6084 cv
154.971 17.6772 154.947 17.752 154.92 17.8184 cv
153.244 21.7559 141.431 22.0146 145.686 34.6587 cv
150.953 34.7305 156.139 35.188 161.221 35.9902 cv
167.58 24.3013 155.998 21.9917 155.039 17.8296 cv
cp
f
gsave
258.82 145.073 mo
258.82 208.568 207.342 260.047 143.845 260.047 cv
80.3481 260.047 28.8774 208.568 28.8774 145.073 cv
28.8774 81.5762 80.3481 30.103 143.845 30.103 cv
207.342 30.103 258.82 81.5762 258.82 145.073 cv
cp
clp
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 16.0.4%%For: (Bailey Buck) ()%%Title: (TRV_Burst_CMYK_v2.eps)%%CreationDate: 2/12/14 3:14 PM%%Canvassize: 16383%AI9_DataStream%Gb"+`#t#B<oD^Jjmncsd<6F&&4qB%U;%NlC%kR)lQ."5)^?=t6s"d4nHZY<b>G]=0Su'YC-^brqAL:Pbgh[L)og\9%B)B@9U-ek.%*!cHX()NT#NkA]8F1^MEN_'Rp[;1CFYLPl([VK3Q=)KtOh;3HtZWXD9()AiPc-o:[kuHHnX(oDJW[.h!Wcks6BJf$.#?PPEGJ.\#%.Y.1jqYKMaop`EsUu)2hTC-"taKa@cPD0Y0"NOtss8@j`SZHhl^QMH!52:C.Eq"+]kh('`]L#6J0<4rbjc;pg[mmRYXnE_$f&mcS%Dn"Q5Wcg%BOZn;.-f.k$=m^RC#?8ShRH.;ETAhpc8LUF3<lq,rWhsN"6e@3mVQo<5?[4jThS8BqB3r"6F]gY?FSj+<s*:sY7:DhT%ajHdGF^MTrI7F(QY06ZU^KpT&lU=O\?YNQUoroZ?s-"0WWHQ%%I57VcjoB(%0032;)2Goj0+S7^AJH2,][f[O%;k4,lDTA4h$.o-%U8g:ed5FQ,=VSPArmu9iX,<MX2';rWLu0PSEC`RjT\K7mBW^mWfr$pf7bo.p>:Vc$K+_"$!rlO'a'))kme=C1D`O4gjo)tg;+g`+%XFcWD1>,j]#3djBF6GiUjI9[<['m"5.\283)3Y#WS%nf+YHXse+'jXtbCWOAL!OcWTt1`KFWI(=3]tr8p9[_K\(OuO"f3aXrj"('%AQ_jPZ76U-l+0^2FeOaeIc,(pKi5&]V;N;?6E+uC8sRThB"8=Gb%2u"WPHtT`NnFh8d1ef.dS2,@b+l:*`aM4$?+pF>q[bG-^4\$%i"J]`9h6^["r+m$PQ?["'BmH-@.+.kn-ORF7IUVN=?eOa5S8AFh=)AV5SMYhHBZkiV1:2nKJJf"^i4[ojfFMG0="o9:\H-1S@+rr%S[FI-%P>^U_@l2?8caA0$(0?N190"`2Ic.p8ca?"_Q6hk]0IHc_I#PK)h7Wn/I)Q/67JQ<51q?i=i1$#eIOOs*.X@8r4t*tm:3g>%V-(K@^G*f5l_3FA?*%@e)97Z#^`Os,eD\USlJQMK21#]&_'bIVo,Hn'IDXip:FH=p'c(e$j4[p)a(f"g)s8p#'qB-fE]-kK>ekK5%A'4Y=[>so@X-`JuZlDR=Bk)"8;HQ#ucJE3[fahjY>FB:cZS?*@__>'R&"C?5C1luL(3-bY.gu6rTDNGJj1P-L+2%!e+^F:2-t=q-%irC[JSqOTOhS?R/Ha-n3QbBAu$N5P5N%:q+8(6*(s#9fUf`aV>Dt[+31ee2EJ$U6OAq0]mfoP0t^E!RFG50D'#(,A0Aj;cSlu2n_%q^F(6D)$kHS,I/AZbQIrlphXPN1\#?_'^1'p,DuiIM;Q7UMQ<_XU=\Js"%rNb(`jJ;I&qM2TTf\_kAb'@-fu6!ZUbb<n`4N'q9S`%56Tu\;;&63nKtH/I!>*6ps&fC&m,BH`U@DmIj]0^\",3BrjRfq.[@ejf!6lK)dr/Y\5q#&kkAJc[S-cWOhN].gDfohM7t#.#P0sQ%eP;pZ>K4,86eWl0PJ8,Oh$0dD^JU$"-euJ`kJ<aHp3cGgm!#\qU<\b^=S_Om7p]3o\,B3Z&ZmFX-R6;_r%EniXLEK@NM4d)^em#F%R('QsZ9Q5?H>H6V7,&HXS%NT89UfI:H"g<'?j;Isq&>?V8F_u]S[3^'%F)11SZc5rXl>D+mZ6N"Ct[7e\:1>sCeGR-\`*;:QD$h&%"RXtcmR>OtJd0!AB`!_ta51FsEn]/.,/4RE33O/P.P,>r+=.U\L;q;Q)11,B"#II(H;,>^?$m]o@6.M_@pa!jIS#a4</]o[>>XY4%LkY_$$hFKG0F%SQhqleG:oR'oNhJ>K3Ap%YKt!;KJLuSbP2V@hZ%hI03arh$T$qHN1OTO!O:(?^^h@CI%"*3VpkLjKBt5[)g.&<b%Q5Z4>*2=MqIjRg%Be.t[iXI\+o<H>8/(!i=MfUeAbK/W[(9L`\0o?9KXM>K*8'E)gWWY::00SrN\:3d;2mC;(h8).,H0LV5S9^CX%gO\l$cKZu]$'!K$jnd:;5$R#YPSrho9(3jk>Lk.!]AhEu4KH].a=OLps(&H)jg3FijO>(+2HY9Y(<slm[%;fF&9sAoLC0YhXH%=T%o1ikDG`H5@_Ru@1s)Oc.KDh"LT6sfD4>lUt"NqS\%]eIm@Xtp<JWbD.\#_0R\tQ^ciOZq?Bt48S&pZP]%=%4:T&TEtg71DgkG_F<%OO!nkYn\ttOl#]M+f[?;oQRMkPqX7WGMKik>pmObchKMiSUpT68RA0>IF<T+Db'Hfp_b!=kB'u8rB.I(ioas-E\b+DI7p`h+AZ!h%*19EA2`R#<r?;0N4sp\1@)3ZP!/<JY.c([/P2PH,>WKr..q+HS"aVFk2Mh4STG/@aR37P[m3a)b$"%a';9:J%NfT0\b=7lm:u,C)%7X?IPs4cIPS]s%GRL0uC/S<T/g-U%u'?rl`VC+Z:@$h"9OLI?VY(ZcdklDm0hb-fuf8.L]ZlHJ-Vrt`*jD3Ig3uQ$]/XX#B/7^/D%L@JN)51@!8I2C;@3$/pIHmSPHf').TRqq(:2jOXi".L+0=J8(ri]:[oL#*;u)"tC%U_0;$&@*g>9rYaUn`Hs5=\\m_$u%(d.EH?I%2aG(6LI3g3r=73mX@;4CE-kE1$eru:p)qfH\(=udh!R"/7kF?U[S"A:<2/CndlnSM;`:(1Y"i%HT;+l7AJN0&rU'4+XP[G[aO^jC%=/'1t4X+d&[t_'lKD&MX&`c-\S=0<$X>t"'%*rP5?bRfWI3<.[m4HgH'l/'.DE)<:"QpYp/TKg)Q>^05<.+(fab_UuU4#eg,'q0c%U6pNaNm'POWE+OF#0%liV]#?CJhVT,?VCBUVHRPE"UYb`\(-is;1q@@Io.:u`Esu9J#1;tiSo$]%Qe1e>If.cH^?nN1HXs3S*b.\%RJ9OL*..WML[G)g^JA4F8a/\Pp>cQ6knE7PYW3heG.R',B=E$?/hCqjgLjj_NE>GT]8ci9p#<g@GOidHELH7o(/MNl)F6Xf(1g+g%7V="^?):]kH:@Oh]Li.Ahq;pdH0=S_Q2`mtDRY(@c#tIb<^<[eHLYj[gW;p5fW;N]h'.O\b^5>Aj@PX/P`ORS8Kd];]aj9Hq?eee%W?A$&i/pDrec&!WZg"m_4b9+$)/_EdA`GkT_&dL'\Chnp/rD%DG#P%C58)U/QpRMEFOY;$?YCIe=9f;e`!\tKg?A7.Xqjnr\H_VD%R^&3[c"?!?\(\B+eD_s6GqNi@cgjc2?WUn-AtsS3c_gd(YhJJ'C/+0l=0M'u8Io]Y]A=Z(/n#WqQ9"rRg94fK29re`DSo+QI4tZa%NE2UorSp2=n+e!R^?RuA:\"4Sg@6R/rJM"7Gq9MqVhF^JRJZ8a(>#H[B]!hK$HoVWXm-X0pO!gXrM$Pp:l64Qhn+@GK*"NJO?\5W%5G"&lh[/N(U/B]!If-8]lVR/NYj*Wk<H9'b09UfSaYcf#GZ@kRad80"fPU]%(BH$4$NaN*,"N?^!_J="Hr(r^>Z4_s+r"*!gOq4@%q$KD;[dIgh>.ioE/5'%FKiZW<dt$QmYg"<%TfPVCb]$O6!@d#Ioq\DDfYoVS8nTs\9#]k&D-Je6:j#a<(gD9rE)+$].]J(pp:r@]%K6NbidS,Y/68*&1Tb[[mPUsVjb3HQ,JSrT7'opsI>o/rA]9Z>m'\D;O;cBs&DXbeB74YZqWo7oC/VQ$O]s!`D7<)E3<78[k/GZ;L%)Ct.#%O466A<I#H2ho3^(o2umDldPR()qDu-EX\.]gI<\/nba`?IRJI%b+Jn)lq[.`sZ8q4%q":1SCTo*35c8Ld6#4luUd%I0?E!%#2%FM=kgn2(lEr2=*:_NNksV^8rBcZ;-.6r$./,DQrFKm=p?lM+oRB+F:ETEY[![l%*T[6jZTcV#";se$r,\:bg9&7isoc(&n[U[%&k9Z%3ZCXl7g,u',1&#;"M35>T.m2(MOEqe)Pt8N8t'MbH/uK:<Ap6b)GUd]d+S:!Wc8*]qZc@R!:&2b)^[auT2.)f.*E4kl_\CU%PZ@7%b@U.+W\hu]5SlJQ!H#-Z)$2Rg1dk_52P'Ft$kaKsSLeg;iBYGfCu3d(AdJTN7cFuX/n\0B<20!L%#q$4ARXmq/aI6T1_c._%<`^9ZX-ZN'iN$+$'HaO?.(g:LbLRm=\iS+^a0HT0.&j)$#],FF,QJbfVbJIqQfBq/Ta#G=B"AIB@DJ6a'W,bhTV^taau*It[DK=+%Zt,F_V@i#K#1NeaUl:]D2-]/O@,-cn$-25R<E.#u9lLge@+F>E`[$65,AA:6(?#`_&;3!HZ=MZ.VMgY#;sP&KXs47MK`g:s2.5AW%dqkM?[7pgO*1/em3]=,q.tGFcOjQ-LD1JAmC)pX1JX+K1L5ER\F`HdN=B5.MG9&SW#`s.u5(p`"OA.a8@L<7FM/;E9N;X?]X6M1[%"30[JQ15j/[i#5^7M,la$P<@W\9&`s5m01(U^IGu&dWSb#TSbQ):1-U)`q(#?,O[i/%U6r'hp5!2W+^/H5!n``C;il$=-0@=la74%W\^_/Rmi>Qi00BO18*_if\%C+&:s)?fI*D[:2U=!NfZ.;j&;bL9gffd=/&Y.=\4m5Y;3,"lkWu)8/)`(!&?F%/@L*)]NYXf!nLWb%=0g+R$j!s=HJuN_+cBQKgd%>G!WlD>>b%go@p'8mMdhf/oU_DWM9JI]_srm9V\rs\3ZLU+19NRo1or;R/.$Mg[,QKI3[5nuS=g"m%/_(UB>Xc[j:DOHm92m02'8d2sGmI6UD-dt)rV67X<9i*9c/s-\Q-%RN?"fG<FS#P`A-hObDRm8bJC-0GXbaBe=;D,[8k=CS!_[So%[3dSu4UsB,m`*cWda9$<"EU;lV$alDcra8P3!`h*V_#u;`t>>WY9":K9'-Ya8"sc>_KSi(Zum2.g57'K"7KE[$n4q3c!T<q$d]oa%FI$M-ZC6Ki*0FS<,1'.",FUNW*X$9u6E7luhW&"aYn:f?L]V^1@/`i<,=#>O)57;H!\Y-$Hnjo`6G(VkC9E9>hG>*Q,='*T*L*TC%moocR[M``q"53s&NQDB`^`:<ZnYOs"Gb6Nrll"QppO1Gl)B-&AbYOHe@Vf9a\0.pndeQ<A,dJF&-j\<B>6$6R+Rl;=in@XY,[eMj%D-n;n0Lo(75US=[V;[LT+KQ0WWMjERBV;GdWW<uLK*)Q,IScG1*J)"(O\_?L[idq;=#nWZ*!H=o,)h]-;GiQ"?r^287)4%.!&`<D%Ahf]?J;St/&(T\PJRQ($$W,)j6'e3*B-R_9)?]lk!I^.TJ6l]5?k?Yfer:'NN3(mc)4LW!Y$k<kXrA/qDK7F>d#8)P+=g9b-:$$F%Sn;[DNWN))C_Se)_`0?7j^t#8Zp=\l\.TbrolgJ7M@(T[[9R%(0J-V!8c"5F$!YCbkdE&S\@ROgJEru5.?nRD=&"k\2:jOdB2LZ4%@,8YQ8%Y>pF^-(*=7?3jM^u_$:]VqOnsq"u_uS-k0PbF40VGW?&.-1@%tM326!D(r4-p3WK.SE**4c.8[Y@$VHb^*s9F(@e*X<WF%EXjS=(sk1f#]U_T"IOo3gR:Cn#a<ZoN@.%#\X(.c*dLh,E<=f[>p<\,5p_',"U6ehQa^;+piHaDLWe<cHkY3ZGcYR@Bp!-R!j7Co%TOsoF9g'`RH;]8<5cYt<Qq4p,PoGTG9K&R_&[8+kTSPVlOQC9:$paOE#lS"@g+=Lf1h=ZcW82e+f%K%*6mtanF$Zn\_-UM7Ks)?2%f0fWH]Z+;K$tp93L//4q@h9dA0%^0A;?[+h.(G"ND%SH:o*fI,=mWF[%1e(1i6i)h%E(p:RBLqn2]tB)eE/@f!8<1#<er5lg$4e-%b&CE*P+SfXIrZ/6c%*=`pe7ER/HSD2#UVL7!WjY,a)I/2;G2oL%C+o/S#L'8m+[USFf8-0@ljlq7[Q+72.j/h4H^j1?j6?9[CI,N%&aGn0*-M<\E@*^b1Lf&7/rC>NGRXai@c9=TT/3/.if%js`m>UU677P`)C@+QRsL0?1Ec@pEC$EE!q6c2-l$0)F.d:+.-`L!),SA:%`9K#Z!o4Jue^/S=F?,MH[7j$jYV6f')Ft2.53ZSuhe*9J7:;T5;<SQGTF5e4f;+;u$'Q,G.F$pr)&`PsMmnR7)=D5AUkUK5=K\#r%^h*4!Qrp"04^<_m8/,@M)65PpWWH'"I09*VL)+$E-rHp[c%*NG6a]bq1qBka)F3puNkchYc*5%o+RI_,puJ;9$O0"?h%u:alj@dL%$cIS(cs\J?/5dUQ@Q:hr<u2-99uhF.Dj+\=OIK@\D2T1&Id3l#)/+RN-G?SPZDM*+[R#ml##qk0/pJ<IJZ[k#APNaCF:>ts.GnPZ%fVl3HQApM^"Fu-IQ#?*B&lG>N-rn(gc[b6$J-i2h!eI33@bI0*J4qD.J^2l6_^o@_%<Uq=_S0;.<>i!mj'[N*SHe\#0VIR$9?cOi%H2n:pRYjkYCC!;FZj\L$\MuPq=S3)94,P)HEtj04^3?8HCUf.n\3aHr/!#qf4aSM5.O\-B;%9h@N?;5F&&D^5;h$P)l7TA<k2iI*%;o)`C'5TbKlYE(?(n_<R)AQ66nu@A\Oc![;T]t)h/ndki"[ZP+e262;&.?qUh`!*.82/;R!Z_I;Co7&,T^Pd!\,eq3.cIDk:p:t,%eO>#"+[d7gEr\6^.R#1O)[]%Pi)71V!Y*VoZ@"/n"lHdt7jfM^'/:D1V];aqmU4XY$lFL]4.m!]+A`e34@:P!7n<V]1eU2JNIEkp%2I5rhj*7Oi+U;>V)]WNA6MCS_#2cnC&92Ol)dit$9P#HP8OnKiG'sG=?)O%aILh&<237;G!VU*-BWNHNr'2(pD?Dp/Yqk%O&-Gph%`"mB\RW]*qSjA">H5H_QU_oUp0Y<kWI:n'<1QhbZ=0Z^b];@jO=T7r9>u$dU7h!U0n5?g6.PWs-cs3_d.[l30;%JIa3b8jSDR'j.%di)1KW2!5%L]Ysq!D3AN(;;:i(h9s'Hpb_8R3O5\Bu8R8l6$,fnmq_I$:8qWR^Nod-4!\EnT@nm-q(h=_F8As#<DrR!d%BT!\i5%%87u?=#Z/G3Xb&JAJ<nRH%CX$m&.jam'tk'6!!$l5Zr<V`S[K5g]3o"rfZ7KW]YnE]]W4Uq$_8G!G+d)@K/7cXH[lAk>nJ9>BtaSS%d"XFAL)1#..XElJ`T==0i:'kG7=cka%]`uQ$N%e3AX%]Sc/J8bF>foE($]lHkaTc0c:#ItG30f\R93M=3)JYqlEZs62QhE<N"m)5%dWKB-bHt7m3*\jd]>><CZY5\>pS+fR%LpVjOS0Bi&J8jU\q*NORf^uP2V9K%0[7$<X+dSn^^_,K`^t]l,.OVpA2O>r2(3#IJSDZN%Qci>06rmddX^_E3"!(#nL)C'FAeE%bTlR_D2GlgL5m,DlCL/gLjFEEKB+[Ff\i8t)1A+r%`9]=j5Fqr(kKENSL&cB%:q\XZ3,43#%K/8lNRK3N?_Fe5B#aegRcnIcfUW`jJ)ig<'Qo?J[$6EX0N(7Qc3N+-.gYrkT&6NUNl8hif1b]XQA4WpC3!.o&%8kNkqp`a/<=>\N%C9ReLhuku5I,>.ObGP=PTUO"DF;t>Ul57_bA3d0FEQ3Vh1P!$5*U#pbm+7@80O'7HHij*B4bZdH2=GH"?`0Y=-GU8^<pgPe"THQ?%!c*jLEI6,@Ud2$N'j4ejLUO5HqFAjpX3S]/=;m!HG_qTAHY/eG!FFO`U:\P6FURqI*,thBP@#\SePQc3=R6JKW!MG7n68?UEu5'S%gRt>LI`@@<!ef$g3)J/qI9XclK6c9e;+jSW1#5AhRa<Wp`tdoaKi?C9R:2"e*-COETWVctIA'1N?jl"\Z%"1&kd\46<Me@L?=4$R%7K_ZboioSl(_ESfgF6Un<#(asNY3N"FeYI8<LSp?j8P5S*!'MdC<32Jl./+K3GP4h%&g/X/F#9-#TU,6C%.)iL=Hlp6tMYp+:*(_%l6B,B(T!kO<u8,-D+-,kI%Mf;fDpC23'moql4Dda@6f<bF)-R39c]L:9uqGY[Y<I'jo-OM'jF#_]gn0:P>)^VVFI,Ia>"BH&/$D"%$'tWo\gZdqhAHL^!@OQk:h#B;_'@8Sd,hU&RZ/:t+Ce8#4stHk7n<RnXu1hlr#&<eE&Q'?_hq_9oaVn*'!<(B?!:&8n9m'cf6&*L%+q0Tp"F=%?9cD;h>Dr]8%HR/s%e_m3f?u6'PoqiEDi#=JOJh&p=;Pkt0X-FcM`1<F!RSW"iN.gME)Rg&]'YCL*<kgE7n?:D-k-B@%*V*_hl_(=6\C6b.,Vp-c?o&s43/\']$L1?]1^u;"]u\+q<$iqKl90Z!83>?fSjL5Gg#A/oQjZK@%8&pi,oT7j.lh1>TFe?P6hq.&%=#$AEq?#"(0_>km@^gr_'aB2&":4TN'8)e6Zn=M9jlp/V=p!ns]<m*W`aTE+:j6m*:$1N6"a*"j<q(O^6Fq"$P,BI^-sG!'!i3]P%CS1h5YleI`);OIJ!uk*/UcTq4BF:UJR,APULJnEUP;IpteRoXq8q;:BT'NPFhh$C'DE46AkR]'`N*GdalsXT?@Y^tQc3)+Sbes/F%#VCgW&lH;,=W9Nc)KuNS#n`k$\JG>d\qi?8V`;WKU$KP&1dp9#W(s=^@oGULl1i0;hD^*`-no+"5fKGR<X(t,>%l(RY&]/oTaYV&%a:Kn$0fT_'_n^jnZ^hRU%N4q2o#aX2jXq?qn5VcTeT[3R"G0Q$9Glt]rO$Wi`>U\f%Y5i5$Uiq:.`rc3ODFYu?:P[R15+\=n*%'_%Q4\*M;"YV&bih8][cml3!]/b.[CM)?5X.BbAp,Q;<-4&/r[]1"7;-VNMZ)r-Q>i`Ub8Y1Od;fF,K^Tk[Gi(A`?IY$H`9f9"[!JE)%LtrC>`pb&kNl?PR$8EHB_I:MtEA*BH<Dh+@Vu.S@Rhg$Z#_<e"%#m-3LPqqcHcU"5>%2E08(4f5/.n0U@L4b%ZU-qYJp%l:FO:S0%.Z+^:&Scb5O4g>4A"TCsL[$`UTXF:#*>F"QB.9:FTf.]MqTpGSpbGr&,"Lo*6cX1pRP`ts&8W:8Z\=U_dQ*D,?a:E^j39"i*BFCc%:Sg<H6[9qXJ/)0:(n*e,2Bt=8Q#5KOkL,q&/K6e%'&GDEX1mY'4&\38N^OsMLt&\Kr%t)nl``,*7!ZEcfK:mu7gj"lbCXhej#R6m%ihFWNiiXA$QK\.]Ja*?V#(sZ6!^1$C@Y;KO7<d_i%p-(<k.&'3J.%K_3?ea!`YYm\3U"p[;hY3K9(T\%U];,q%/jW@r"')#rWAgE%+UeB(A@%k;?sUV=o&IYjZjIfj?\>(=#n-hP02q5o4.KkB/6%gk6Np!"22,>7$GD6t+KC>/F1B6Q0Q1KH+qqZH`/aMeR2Z^de,j*p%JC!*7ZG[2C*T$rk^pk%lYi%;Ae5RUN*#0(\/hp;7_uP@@o+8C,TIc/Oo'KEW]#'^7/-up`]=CmknCBX<Pa/i]00!OsU'2n?Y#Ged%7rP.E&cb03\,#8h07D_SfIjTGFF*/R#TM:tLOkUt+_W&L_>k+@.HVceI"lQ"kU6fI<Q+(i]gDEV3;%5'k^80'd+DM2.9-SJQ=-MA%mtWg.^j\*U1j*%,WrKME@(_DLU=90-Mhjmc%L779_I\N]\A:PU=Z_=TD?Mgfb+MjWQQFMQFHnR?K?da7O3Ep!!GbU"7AK#UMV9tC%C%J\@<`h`k.1Th[6^MeF)LrUO7K!XNedn9K30,umVB9Rh=37,2J^NA8Mn4rMH3hOc>'tt>!0nIDDeMs."6,V&%j,Ei%$Bko>J%ql%IcQo7\.")5_A69WAlB>0@0dTOE'jWkQq'XE8UDHDcU6tW&RZ36lu85Z!$+GFcs+^o8Ut>nOYfF!=pP,H0%5)B*<iJjAgWr$ZUo\E%a9:NC'q214dY>XQbSXLq4/MG;F2J8CeJ)$U0%&\kJYMuHOAeM[\#i03&T][/;gD>o`j/SU!QN/F8cdt.ciUp3"OZ)=]--):PO,5J%N8ofsQQ!GMTE/9tC!=-3JX.bm\uu(Ia<mUM(OUCn2K+*MZ"a]'qsIY'Iq4(6"Ja_Nb/u*,MBV'1qggO;o+Xom*>rrD`>ko%cP^6W%-u:Ud38B'#J2"m`0Wp!-0u$Clkn9Man0(Ucs(tc@N53qP5Vdr(9pY'RoqmVW(`9O#b).0)C=@3rL$P$oEH3DFpXPq4Wr"nUdrDn.%"9q&&Lbo+LB9Xb*%;Nai7es6]"bq2]K/F^oX8+k4#SaULA\M(I'KQm.UCc"(:8`p#r"+sI8-TbX%tJM%MU^/46Q*sT=]OAW"Mou+%)sBd<5ZKKJ\i#8#9V<I99rP4"rDskhAO+_`^84\cW"#1JVFt?J%p0pR5iDLI[V\%W<nr6-43BtjVcc'A8YDq1Y"!u/HgTJTT^qG>%E,.#U)tEbT&,4XO!F](N1d=tmKiOEFK+892PA=VHNq-Xk5sZn%f<@**F/VcN'.t=I#t-!i?/^[7aiP7@K1NfNAM](6@K6VBoQY$l%mmH`GBqd?k$iuunK'?ukHNo!-dD1i>@bQFO>ba@><?:^uP1@k@Ob8sj!rbWa9*@G0bEmR(<8kCipGL8a,IDFA"Sg(r'77n6S!LKZ%4B,p*Y-NHn_mHW]?*WA/h;:?!<GW.ch,S$T3qK]t,2u"%>H"T=LQmQ'WGDX>dX>2`D]l".g;2$5Kki:jF)Kng0:JW8Lp>HCbB<.S%%FGfcMeIh5%/,o[lpnY[\k71=rCMX1*pcfU\3paT@mgok9AiTWJf'$n"f^K^,j`ZX(@NoKXj\BoNIuA?LY'%&cVp6_]ZL<i1eoQ\%6,7^Kbc=Uo^?$C@;pm\>4H]ku%`aKN!T8+*"ob),`(Y-H:1[bL<>r7'Y8`BQ>_qJ!8SY9?_*O`_N=u^P8_"Gk>f@4`+=\""JlPsd%.Yb7UQ-%DD*<cMO2/Ifc*TR?:nO,lV%G6Oj&?#p[^b%kkGiS'K]m,'h+UeI<"[OgFL9OAXQlCI)^n3:^`=T?`q&GAK_HBYn!>;Y(%E#4NYNI#(?1m+$*#]?h\!Posl#=QPi]$j(BX=L_s<M:K_%T@q'+0pu3n0d-T&6a_G-]+cQ2Ihf#%A%jIL]@Fo'`MR,*KS!dL1,')%6EQ!HA0&4Fau?O=s(DM':<R'f1g'^*aLi[LZcWbr?pMRPOI<lo`[VGL-BhEQ+los0G&_N#(dP0\YWe=DG7Lus)cs0*=$I1#AYDu%%1qF\j\Gk9:TR.a2^pE_P!g%c=B'@M^!ttQc"*$t9d/rXT']Et\f0m9[b'`o?.WUo$S0nDB3XU6H"/.t0Rj4RgI[Dnk5)jgi<3^QR%>?8gh'La:;Wd_+.bL.D5G8WLFaUYaO,iZC9@+cJC/I3#P6!88Gb[@_q&t._j".I&Z@#G@m#1PK*JEN1%;P7"JUnD+RHWPbPSdoFj%'L>9`:e_Gla2$#<KmYDb)56o[8X>21<W."[LdOJJ96[tj4GsTB]$q?g%u/:\'.#>jp81);UdQek*.*5,SHQ)JlkM5?c*:*"ZS[)3%(D`+TFaXV85^LsFeGq?^D-S)<%%ZSZnr7XC.;u7D58n_GPs?Z3,bFTi-j"SFe:</UGRU8iEcZ(^Q!%Ne*bBg"J]l@B:dmu&!#=if%9f)9<"\e>a=b\dXckO=Up]2D4aLP2;!\,d8+c#3K1IK?V`X7VkAVWFY345,F^jnPA9G**tll6D&$%%Bpc-es80KMT6B*[(haJ)R#%TK!+ML9$-K-3/(a0.Kg-JKpP],$I6dSt#9XF%5L>fO+oY_Y-2*X=6+=if"AqUF*G$G#W8[mN*cCTr(>Sck&,CAnh`;(<4`1Pfs!?%#riiYa)3=Mc%:I'Yq)\,;g"@sXb2W_KtCgY3BVDEP4u)pHd$SbMa/"[c__/o2t%_*:C$G$<8p$7bg0G/*E0>lj%^V@"32#$F,I>T%o71rD'aIZ;Kp>^jF@s%IAtW*%_b99>&;2,R"(4bj1Z&fm-#&CZ%7HcMTFA<&baPCr.#<\<"t"YM?rLTpn-F1%rtWAl]P.@&0ec)e%2d'F@NIeWE3oIdG"1\DF@5+D7LM6JYl@s7Gkqj@`UW-THOs:Y`BoXklTOhZN>p7k?m20XB!W)<u)@nNWI/j^d%Wk/+fFQrsitYaK%Y+VB..h9!V33R2YQAfZikRc!H>3-\lRY="kh>e>=WL/<,pN1BO$KKor)c.;%6_fU\V-qJCM\/gJi!0hP]Xl?^:^\gZ%$M75G\gjs%[i',udh6<+(c:P1[XN$0Uq'r"0-,To"KU0/>JV-Yc+k>uZ+6cj-q:dXMAEtAP:9rrGcHP:@XALl;2A24m0\TKR(Q:hA_=L!X9aaA%<<SC6bogFh59^t(3e4>g?kj>"PZ3rJ_&A4Y^RsTu!E*C]5MR_Pm:bo1HC-.B]Ad5I'r_n?E+#--J$]:M&F@@\fjdOO\XGM194p<8%'qR#8MMt2.*"CiHT])">RW)L-WNZf5KcA3Wa,qUSr:E"e.E48r+7eQ]J\4%DQsV#h'k^$%Y/263*VA.7DgV"FJF;%UAA@M44`mja%.-C]4$@?mmAuF'j&i>;"n[5l5=F7NlpTe*!i9OF=#'X0M]>)c84=i,bGL^Ml8#rFgh8\-@n+B_=%gm(kh/5)JU3=ptf"55rSnl<Q%h,`E_"s<eNE"_/__Qp0iM^ucSf<%N%J<(#nf!fVGT@N(SQ2S0hmpDk,L>rf</85GErEu'C]'pWq0)F!A@IZQWP<;:KUl"n)eTC^:%9uhb85Y%:bk8_!,=I-%0])Lsm\'bD6hYH3-DX<s41clN(;cT.'7\,dfTF&b'OD+0kYfZm;HT#P`XdUWl$g^m8+i\j-0NG7KEPKo)%Aajf6VB.;u2abd7hU"?6T&C7H<0k,%C<rr&]cR>3bjoR,o%"n\&8%djKjCl@BZc5p/H3\(dUWZ!%B^1UrT_]Ko.g#t$jTC<^REUM%GjZ@Z!o?M1SYS2(V=X`VW5+8LEl6>nGhm,Lh3B#qs+N[$f8eU<DU$pEkGLt2\;[Qr9"NT<1PJ:KA%@;LdB7K>d"C,#oP"!C7IrSZ%5kVA*]%=C'oA[Zu[5WLJc)nZnV.4E19q/P'r6<gLH+-CF`9,6dUGo[VB$B+qG#QW0]a/?(B'r7^R^p!'#=i?Cm`j"i\[aZRk+6SQ%be4u1c&0'@WneAA0+TAXD=S9#B[ckC230Djp%H.MpYM7DHIhE6\%J>m.PrQ/]b#SURe-VqoA10ui2er[:rObh,$^=,YYuS7HAuZT%PL2??]!V)BWlm3nqK6b%Gs^TfHi5uBI%Eb^m0gXVIbs\mRl>TF+&E;WBYcVnQ\6d'>.`JUY5`jbbSWo+qPu(69&uiKpnX)`X6:#(%kLH#F>c["\.eM/Z4,cHuYN+.C"rW>Ip7-lc.QPj?BNDb,G,s5u[cC"!Idn>"2tKqXrElJYnj];#IrUcjP>tU+5<$N,2KOs8h<+=/%Q=j>!-V_eaY#,EaCc>Pr4ml4Z%Y(9uba7T9="\)U+1dl0#rtH?>Z8-J9jo:`cV<1?R20BW/Jp)rg^Sg3J>1MnK3mj6K]l?/M#=io%e?4@aC:DU*\FTLeHb6U0Dr_^0`de8K8\I$JI)C-dRuRDU[?5$Hc(=jWXl]I\Z?(2*jns#Ugahf]#'/VeIe03[B1N?Ob:RVk=T#l;%bX7+SeHFEJaNt?K%-=-rg7=h`KM8kuoC#9a.C\'Vc*$7.:O6+6-:UJT)pPD\^@!OTRVGDT#J43B2[8hO(Q6Uo)fWA?:3f1knq>Mj%R?1PZ>hO%>3u@9rqqJ:l1/6nID2-]sNF?Gi)(\_3b^P%jhOL"q0pQWKltqasY:3iCq9g^hH)XG812CZRjs"^+3W"35B'+.-F0L:2%B5H#Mjg6g%7:&i_c#XT[LMBkuBr(q&kGK`PRG0-SAAg1H%Wdi3A6.91%`+>n3o^b",!@p!Hl5B)PY/;+]h__DW4#l9o@Ri)[64Gq%i>;MRO[miHGbYm3r8P-+Trgefe#_-5/$IL\YBFMK(gU,J.d;r7=g3p,#c25OYPCrKRqD1?:!'Jm=/C`Q'o0N'Ts(bddr4gR2\s0J%:s!=]]8u;g<qr55Np$nC>`s_J9KVR(2I35Pogr*Q)u[V%ZMMjf`<VqmRa!tb:X/3e!uW(?i"UgETB)POXRr-Gm$D=25%UJbQaH^S%'LprJ?KYG*/[+`RYCVdIUZGLP"8I_t>MF)Jji>Jm@=!"AcF`HoGtpX5s7uI;bphp\knq6RkJ;9XpXSE@eR-bs&4tEUG&p55<rS0/%eb,jY0?s:WogZ^d1C)5>03lDl@8!2p>&A49aH$$&;AON=RS8lZX)V.Q[\I8Doc1PCB-%I;A]@O5`WX3#;_el<R0UWg.+`?_0MDt"%0^Xhd"pMp"oLgIka(eX[p@9Toc,3uPltmG/DG3$K4=.>>piD7_W=OcH[b0a$0ZA;sbVdJ8GrSLApfs#2PX?in]6M"Di@sheb_gYi%Lk1tL_b;Mo]@#Rk3>fcCZb@@l%O4ckXEfIH[Jr$Ed6'F$A`!*&9k-/@VZu8hQ(*iOmu*"sRg7pH2;joQTD_+r2g/!+ka=T3q4*UG%3lC<?W1/-OOh?Hm7SYQ31C&G;(H9T[:<oB)V/nJ/cI$MR8!>"F3CfQ[Zl?m0[^u\3GH5BuFMU]4B6+N!cHlJbIeHhnBK)6Lc1SD'%5Ps41=`@=&1gg0s%:a2%`(spAGW,9bk0$5+g":fGZB6J_^23f>Ab1-%(3J4(cYFR[X1qF$,s+k39T,ka:$K/Gf(2Bl6JDQ[bS'+)%H<9L8eG/iB0@5gH3pT4T.aIlV0>.jcO<R?X9V%4g59o?(MTjB\R5eo1oLtB3]s`g`6VT#0-M^VujPN>qSc!q-*Ya*N&GmOr[aD+%%kD`M0IUeeiC9Q@Kb/%'ZDbU*11"2jarE8IV>26;?lLr3'4?'68H),m1>5m)TrBJT)DrSK/Y!k/.%%u1clEkn+NZJTaQG`(Npl2dh%Q91T8RWq.:LMhh`K!a.o11U2.0FCYKcYM:`KOdL$":<JRRLo:;EHrR[9N8W`rl(/SQXB$a,]i#_:<%egLIn$KJMTqco_0FM3"&d5%?R8'PB8^8qM)mEn7.UPsq0)>qD("L.@WEA-0D"Sl\6bSA-dT8cVd_a`#%+hohbKb]-dT8cJ"KPm%:r7ZQqP6@[ufcWaR_"E8NKeI%g\E_a6Cr*=s%YR"bmjs6F/!:ek;u!ko[4hRDniqsZi.'YL!@WHM`uF#>(`S3V.kn&2V"jCg::M&EIL*5^Q<']).$'YAnB:Tg:,>k%0=P0(4DMu:2Y>kuP/mhN+'T/e1O$FTSSjY`7`c%C\`[gE4`Br8@HX5k\``?=)?gYdFZlr$OQb!H_a^]`pssohZdEZ:rJ+[^rik4\%[_>?-^t^4pGKGi`m2]p0DtSU>X$Ju1Em*B5_t&;)Z<>U4Gtmj"/h^_mNGJ.[Cc//*Z3U6WF[a5b0f*O)l[6#qj_qN`M278(dqNuq%:;)Zh,MG]_#3KU?hf4OEOP<hmr8KT$96mMlri\[gg_$LW?_%"1k'if1he);cC!Z`9F2,uTDt>?h(Z;,uIN.^nU$eD\he);cRJUhJ%WefGprV*i9lM!B6Nk&^XK3kLGH%*a=mYn]3AtK&"4*\[@%#s9>SY73&aHW<j+]$2W%#o%e47Yn49_fPEJ*%f65H`W4&$([@O8&"_%cb'k-F4iPgS9i=hkPY7W\a5j3Keqhr1U!16'sW&EcCGlq9CQ$)cIpn-cTOk_B27Q&^bo+U5BCSJcC?r0W7K`'rf6l6Aqq$kT=-UA%?!o/3Rs@L&eCi3s(MhTOaTiCU\q[aA:Ip4F#SQ^cPV826?h!ISo:FQh-.2DN\QIOd/cPoFl/,nLN'=7#d1Vh4;7YBSM9eo&=Z4N(%6WoYEP5dH*3C;>Bks+Y$f&\?ln?ShE![M4E5>K\-C.cr#Y74fn173h0H$/U;[)'N*WUUp&d@MBGb*kCL``#a3fNt%)X(Fhl)U;&s%C<.&DGA>?Pq)`B8J*th]>A`S<)3qa2A+%j6<i<rEAt&Cn3MPJMU1&6%Xk*@!k0%p84ogt`/31^PdiVBG541B+[1&[3d-cS8-]M_u%D!')+J"4C0mgE.le!/p7ND+>tXAY3F7d$l,o."&7a1uK@j:/Q=>>mX`ZP(2*J%S]qE-4Ejjj+nd,5B;38VNXXfMR[j2X=uX.4+3d%CAMdm3SqIS;JtnW7l_j6H+/2J^V"7=5>KN%d&%e7DLQ9JjL+q*I;%+-kb?u%1ccLrcN[+<)pFHenReB+P/A3.Ek?LD0$/$:ZEs"7%<L"L>5F-qr=c"5aVeEZ:a5lKPa,Wm?#)07IS7\:SE3m#&qEb'r^.C%8RhSId\`"TLR$fnX-S?F5o`na]F*$e^RsTG3ceRHJ)gl^Z%04nh?%DKBh2`LMLR)(/P38[,VD]Y6']-a0BW>0K401+C#=a\Xb2RiJ\i2FjO^:D3A\+jRgi\PMC`Ku4O=g@a&eXL%>je64&ohCLt%pU8n\J*U.sjo%n1q4r/[ff^S>L0]Ut.fk+A;g7@O?;-pc1I&l8NKEsm(Lq1sGRhZO?siNs4/S='SMuCKa"F2q5AO;8QOeu_eF$:O%NW--S*$3R8s&W.Ua3@9Wq%.G:oqngl>f=k?@]I43S>!?41HhK.f#s<$eK-mAY^DX:^blDLRA'+^]!J;ghatigoEO.CC<\iC<V,DZ%TpPcRV#0m17oEi\hi5?"_(5[67UMXS9OlG4pS-"`BBqS"R2'$\I4c)/^YE`"qUM\E#(s(6k^1cO+rc2_>VYlr/32'W?!:K4s4=b!%jOe>ajo>*P;[.\\%Z%Ed:E/knjH!P-*.^&O9ukt&:mS?+2h%qTC4N[BZDTi<q<-Jg>hb``H_VGKq6.9@E@MUp6#I]Wpr.#>cH&Z?%p4&WVb8Z")s2DO_1_'<0>[<f!9<rCok%f2Goqe.g)_f^JnoIgjRT,,h"Se39"_j*=RBc'!(^2>ak7ahj$->.F-:iqVeV)#IMbEFU%#cVtdrJN0Za-?\3,^6&DU<ALY_-p6FN@!Jd=PIG_IopPufk.Q<5P+:lc"6';E9\m=SasF0b%7J5+`l=^NNuK3iCpfKbU[;f@e4oa%k"&7!^IiUnNZWRr9B.ko6GK')cG3Q[^';g.7$o&b`'qtq*CY&P04quhkNST!53[>n<48d;C$rHLp6e$Rl)I?P8KTT?$]I7K&t4!H%[mOKhAI#il+AXC8r4fa[![:8qr?fiIYkU'oHHgVW*uEk:E/_QiTTU7j1]7bcnM>L0a/ZL)47-[.XPT=355p?_l4;?c0L$Ug>$8Yc%%-#I4Ytk0'!hVTVT9C4=qXNe)i@iqaq:!oWr$C%&W+qC!Uh5HX87uebRZ*e7Ac"s>Uj)!.\'jL>Ia?C-lmMP.BC]Op$P#n5..''n%[(j`G"q/+cI7J8d>.(+Ci[-U%QBgg2;Z&W=g!4u:?/n%Grt]ddH!MR?eC]>*jHFJheN9,-7:LT*qp"bgN2!>sK)3Tt9E'_K3ZD3Y%F+;:")\O&L\']$;D4NE5i&k$r:BRc!nm'd2/T0pTb3=)M0!9a,O9q#tQgN?I5sZ"c>%QVdmouP%Hr,(@Tf<JSkkNc[=h@g=-DT>p%GGUrH2oraXrtYh25G`U$:eHbM.]uWJ8uAI)\jI]"/dm.+`k,U=O6>TIG67WMBGC3!+$V9p3aauuXI:HicrI-FQ;#><Xl>TVZ:gKp%.RnE]TP5^-4=6=AMWO%;!Js^TIPDq!fE_oCNIqC"d<=jkc3oQ.A7#!tbBNJuGnjK`5Cl,Rgt\jY#$4=^^@7jLSs&%l/\E^G`T<BE%]=4JPZ'\6L9h><MLLbgYh:</UKjMMeOe2%[ZZrJaf/DCNAuOd6$hW8G6)2_+jPm-sN"->rl1TNn["[-^J*sO<+(aFkm)`[W5X#_B%j[E_ReD"VBEO.aj>nm%6Xm.jK><M-#afJ6e<b)`aeRl/XN<s!!nq9iS<]#`*I]6F`<r6[F.-]35(8:DQPZoT>(7+p9jbml_eugp_%<f/3S;F4QcSJ.kZU"P)O^YLCOqIGch@%k+&J,\>tC1XWi!_pVi=okhU>4H_C3),s1+iTAZ=qUdeV7otU+6:2"(5Uat^Z[("nF*$o%APWRHa)K+LYH[_pec*$Hruc)lq3[bj9c!"edXE[DaGTlZiU\q,rX;tQEFg1fhImX,JI:SRd-`btKQ?ZCNF%7=2F'6\iOE6s?08r,%=m\(]_:Q<d92GP8NBV"sFSUh*_?pMk^"kpDC2L8TlL9lMj#p44jO:+AB%41Y]ti]&Yu"[8i'@rCW[0F!\9;!Ap1#L$[p/MkUG"u6%&BjiY'PReo=,sc=H;eeBf0+'LVq3u.Zh'l`$GVK0$97o]"QOHVX5OO)3$l2+/b#l[]2QXZTI,l5$jBeE;ROmq985#n;VL/hB/tW\%mA/.UmN<6+W)IP0K3Ki<+hMpY<=/#ifBih9UKXj*K>3\7D.4Bm*<]cIJrk;dHO5ea+KC?CpO>J.B?aJo8<bs[E/>p83L3Eh3CN.b%?3,P81HN3QPL=*/$jR`jN^8UEXSB!H+l$m[Xnm^Jl5E*WHenQ5qX5f[<*7oSc`7MJ%J0\9P;LLI58%Xp=BM0tD#(S\eS,B!**k9h%"Uk]d+g"kHI"5o$>+dTLBFlWQMi:??F'*:*7"(eh3'<t'iP4K861+"pN6Jn?+UTe@ecN30^SSu#qEPdGRrBBCY[kj(/g"uD4?7Ys%?$'np=D#JMNg(!*iLRk\5m"JOO3HB(N=?AT&=Psl78&YO:+/DL!mpk;YULc"-[V4c$#f`BRqUP_X1q[%=$`7o^Sr9f(=B/b[eT@0%7$Eq:kfg"(r?s"C5Jd'cm=71^PF+.M>J8LXeSahaJrM3Q;,S1f]aS+E[%nN7CIWZKeSZZNrkXV/[VM49edXsQ'j1%Cp!S!6BYf\6%WW[0LEZBH)Q^!;BqLYOk2#LkW7%3j]nPkDF#2%K^'0gP;B5+'Cs--jT;"U2h1ltcXo_RsUlfDZlD]Z(UWh:YhbTfbSFuoWrF`Eoh%BDj3IEYDJfn,2&lQH%Oh%!p/fD:X!;jp2n\M9LGgFaDDXk2>f^f?8S"a"Fp*@qJS\iCTR09O!&oYEpjfMkFE4[/?A=1:$IG=j>Pm%L2\IcO`At?'D]E+SbEZ+NGioc1R"itGG[XV;^TOCF>q&1H0rJ?Lns?S_Ni`VeqrfNDEHW.gMsjNSII?\.o?",b];*b"1(q.f-@nS%=4Q/=AE*>Em=(j1[FsIOe&Kp:mkdWFKNj>A2Y0\l2Jqdr2[95(nYk1-Hel^A@WiL:,.>+.fch2IHdFEpla@%he=qq/]34NJ`A?ut%2W,#B87B![WHPplZ.HK(1]oh9r`5k"lpIjXVqQiW=%JmA3[t"l00Fr]>d`<NCKJ.@U:B9=OK07fP?=]\Od=r[Aet?rol.o]QL1D8%DjdJ?-C7[6%EL(=BL$04d/__F*F4mt[og2pqH<2+#Q$50IYV44kB29#`=q^TIW<!VkZ?(Kbsq^LNo-k9E!^R;DRB8E8sU"$/f_S1%]4j?;OA:j!(snoI.cp)fC9,ao+>\P6B5"6=h9jV]T7R@Ps'`7fo#b:F\c#lBX<*'/QM^s[L"!IPpT&^;XeWIBd<5t!^?1W&-eNN+%i#$_NCf75F`*q=%#9]2G&_DTBCW^cBaKg3l2e[MC-N/*lFmm(TYL[UAo=\(:FF+nUd&E-i9M)DoElK&'JS)j*(%2YBX_k+Z6OP=%%7Q.arQ/['&Ji-_b9m1Ja[XWVZ%f!kekqCPTN=OnRi$J/Zn:Y_5_4k`O"IB8KkY`;&qNJ:L0Tral+g;_"O)h_cg$!`^[WOcM.n2pq%B\RECK<m#@\)9=O*Q>7@oHVdoJQW_*`)`YbBi]`No=[@4L(S\c-IgJI8O`H$\8gTa?9rHu(tV@VLt0U:%H8N;61h.2bn)4k`(Oi5%&&G-k:?0V!\F7reK<+!o7tg#TmiY'`T^5hJD&dp$6&3I>Yd'sN]3bsXlYhr<Ph>_V(IH2ABcF"1]qHsM2\$&j%[$DJmjS0/)J\&6%[InB5rT4h*gDs6/L<T(Ird=&iT2kakc!J"_D#u<&5W:!R-1uW@h5t),i8YL?"[T9'Y>qX!P`1.(G.Fk^))Ri8pbu`SOp7)I]N6rE%ZI<@/N\?i"A^Y1l[#ZebKG*&^_q8u7SSClTB#@:o>H-2dNRkS9QW4q@;m`cmfT%m"mpFM&m+/&&Q]mIOZOjYYqoaEpDei&7E3aRF%4u9b6Zs/,+0r6FC9!G7&3jt.tg&eT)D$JCnrliG7.PW_m\^8RI/58iR/.`S1X6I-SRSkt)M,OaR1mFH^_00FP`)#o2bUoeBW&\Eu%-23P"V%rWf?nJpWce='L[9LrY4t&"6nG&s+TSOo&;mXmBMLD4)&!sX)-*+.sUIaa^C5/*GN'/)2`=!Ucqgciqi,u4-<R@+jHeqQ%%.?$S_p.hqg,lWqX))Q\he1*Qq;'Q\H*=XL?I#P+Kc1ds6&Se\jXifm"\(^*)S68%d+OZ3N2Pd*#]OIG2$q2rLYkd0,rd3V3MS8:N%TW-WpmP^O:)Iu.@QLdS0]\!<?Mg6MfKi)#'^@"j_j>2b]=*mah3^p)?A/p`Nn:Xied!^NXZUUmf#=VOYGdZWF&r@>t:t3-eUCW'Z%7A?Q-X\9"92JPp7p'.o4B\mWBbNh%"[<sg4[MBa<!GPj:gonH>.h5aL&2mH*edCF5P+\t#)]`9XX!o&b=E(<9oT>EG+]>#pOnT;a%Y$PYD`YI<GOq&YHF_^Suah:101;!NQU.aj]cJ,Yt"+QFbHfQjJ[+6:km[`0;HB-lp[4C'=b`kAP0K>s40iBHq:X&j98!fjO"@@WC%>/_lF`YFHsgAl<$dU$<T\C,5$&O#jFG5(Q@e/-*jaS/lBQW,8J!0.:sn7nF@kcjdOW7l7THoB,Hm>tJ5fEaHD@Z.<m[TiX'JX5r6%ge)0>35is;K4;;bQrrC]iH93MiB_.lr$IJ*r<VkDEo-('G2)1BF>OdD_T3!1Y(l+])D_c6E7cL2pK.&=FIa$WIkn]Ei\e`7\2h9#%lOpb]hlHbI]"RIaGYd\7C1MT[W_8`'l0:W&AXOG<2%S0(QToD`<hDdVakhf'R2LH\dc:fR[aFgqN*K(5jltX8+sL[[XGrg3I&neC%IhJgCI,uX3ksgrfb$Zc>LA^S'5<Po%K[,cQ$aYlZJV#<'pO)t*p(C_00lQ<UDd@M,O9M3"W>*0"X7j5jMo!qHX4h7\A9s4n9toAV%P_AlbmD]$IX'N=[;o+B%r^Q2,K6NNWTHR<ND""8Tq66[;[qrqM7[opJdt':9F[66m$#].QY#(b%Zs$;N8S?CZ)FDbeFOM+DRZ*G<%lL]4.N)9AmKG5A9G!\DdqJ#V%PpgNR9(M\;cjM8"gWWbL=$(5jW8[CpGTJ$dX`ju`,N5jOE2Ha&KcZ_`Z3B$X>&e%2bnV-TZ!kZd%D!MP7X[Tu0c"i3?$j*NS"kZ[KJ.35Vhu`U3-t&=9;C=eS#Q=/!#SUKZDqMjC"p\1g'Kq9=!bD%g>22;(QL?.KSC(+@UKg<oZC*ij%/f*>EXGgCkEI>l4->p*=p:"#:DQil6+@u8ar%8ISo^D1R;?uboX0$:h9T9g?HE5;&HE#b4UN8mq9JMa)=P!X4en`a1g!l0m/W+t_%%!<Q4j">B_MXV?Fg5tbW6Us@ZT7JS$oKDd`*Nd<1<kBi4p^$;Y`Ke9AZeEs5Pl;%)D"fTgqX:N5^T'Wrk]Y%OK%TmBF]ga-'>JsE%?9/H2Yd+$M/UdlO.U"rp]J/nBO)Xe2FXII/0Y7!$Y.e5W=lTFj%[5^H;[?^ij]f#k+FU.d^ES`./a5`Ij=G+lKggfU2r]S'e*6F4%.76ACnCm]B&f)KHYbYMH5gsli9*O>r<@=bF"8&Zm;cjo?-2ZnG0jQ$;ACn$A2A9<:ap'6W17;p2DqBn[^PZ7O`_S8M*2Y-M<`&c(%=&b+M>&p<EVkp&$#IY4BO@>$9EsjBb_irOE7%Lo7A&=^E\`Ocjmn:Ph$W:8/U0P+H(mQqM%h6Q5e]ht<emj#_)YL!"+[.K3(+:U7%mhsAr9J5)%QeL7";7!=@HdC)kk<pK0'OX/j/R#0l2sJe'!j2-".<XqG1-YjnanSd+Qs%@m=mfo`NP/MnRHCAUASS>\(f%G35@Ad_%dmlm,=m]bo"#$"hFt0XWH9=b;f7d*cbV%22\$S-Tdf-P6H&#)g4s[;/43M>8_Vd^+%<J6XBq/%tenoUdMLb]Y#]=k)([D8\N3au;%g\ECK9-UH51t/p1_M.jfP-W5R1U[b08s%p=M8K5@NJ2?)DYgffH)k;P2q&Wc/(<aS[p*S%%Z9o`B=K#C4COd%+]N:%`f=Mhkae@h%V\Wulhl;-I<^NLKmifh%7taSe*EQ1A;<M5bJ!ZDc>uZYdP3*m;6=(`r*A,\t0eflb_PL`?-NA3\'&F3uWZ+t!j*bL7jL5tk5HYum%Ja&2@^DujiVjD3X;HO,P!"f=`OKkBRYhc:TE"uQLQSRR-5^eaZG=^]*jRmU@K,C#iC`,N3SI\o3PZblGE/t7LPRPAnhl4%f(gA)#%i6tS,L&nP-IGV7,\o_1,^@fd/jYej+lbuZCa);Iu5HPWL`WRk')5[Fg05O0t@)7@B*V?:tITYH8j$0_mk]P4b=sT2@YM/;P@,gTT%?jU4#+EKU2FK9O\_MZlESSts4`=T>Ap:ukZOOKP0<-cWHNc<\4XbsfW?!#m57H#^7MF))YUBqK!75!<o5&8Z'h.t']TADad(E8pB%[h8=sN"A>)BO*NCIDSQDe.^,hh:?-L%abPUNF:=*K`"TQKu3$3E6\Ar.H0kVTH\Oh#P9r=.o9Sk&-C?t*1(kn*HTDVW=E&!5;p:1%pRf)Y>>s,@mm">^jJ&iq2pM-\e[d@S]Fs,cK89;ePQ'^q\[uqYm.Si%lINN:rip^Jh1'NW>qE)@cQ4[>Xt:Y/()QC'^AMVPjlH_k%iP@s84SjA1>.?e!5@/T=s))U\<S>ug[7B\PC%^UTH0(==dsCneEEedLPCp'"oh@r#X:Nn4LOW@><nd7O?)d]sQ"R"$\Zj`R5(7U^%nY#LEq9p-tn$2KNT=:Xhqh+EN]DLiFZLsp^rhT*uj&&Oa[pcaj/c)#>pWKW3N_"SF<YDs%TT[%PhB>$?<+rJem69m-O@gS\.Vm$Y%,K"G&c`-QoBOBJ[GEr#1Q.C?@U[<M2HN+Q3cJ\]^SV=\?E&oUUQ_h*]ZXYsZ*e#JdmPN&?n$g0!Id2C=s7@eTdN/4C\\@s;'O0gg%4"p=8MihcQ9!-*kS]1@rs&iIlp=.'!I&2V`-f^N$Ia>4)Yio0C>C*NgRS]u/Z!:R\^E$[\Z1@/Y5MESk8oI_D(kor`Y<1"B3*MTi%k)6,DQ!1Zc[(7cK&h8>07B)fl4SC9OZimDb=nq0_qY]t2[aL^Zg.>cJC*+LhI&3*k\TkP'*n.T/-@ZprhLfQEL.?C^^&G:9Y)l88%p<Zdm;`8otLJ(:&8knpB[,Y6QcX^)DC%q3flQi1PVcCpCgehQ3rUT%8;,X7:$B'-#jbKJfC&M]'F78gVG8+EKX7FEn+*Xm]i[VYA%YdsbcYEXu=GUhNro&8h!I&4j[pI`D)?H-#lX7FNLF*+6!`)TuC<%=M)<t]2SDD,>)p<-$m<gB3\?f/e'\ta'mH->o.>%qD"g;3aB%&"`8_hleY&3r$fiit:b:m8'(6:o,95;>0?V'e6m5WO/n^]CjB`>=[4DNDs\;U@WTtj+hA9V:KM\Z<m?i<9]^SJ+'^:.tou!Tlp+M%qU=ohQUe<G*^<oX'.\Li*U?=&V82ndO/pFnl,p+f>'m_b4S)m.r33IH>NqWRf!iRiO"Xgf4en8X(5HW&\>-]^dJ50(dQN$KFlhjP%O5_\W4MMV4.H/BFm@2Rq>Q'3brck*KII^ht^=)u#gS\CbIJt3jl0!]B?!8\uQXO(4^GkJDKM"Hhb3*)P287M*h`FmEY+nK:-+2*7%:NolEM&kAW4MJRl;!Il/b')h1H#0>&bLKf):Hu#q5";PXrt/NnK2_Z3=*gaI6l+%iLV;t9>,et&GkkL0dQQ^X^%Di5oRU?uW<K:J%BYXR4VZ3S6XgH]oqhS>-Ir[b?l,'@``t_Y>k'M50bQo;4H`nMEOBP2_V.$O6]1Qc`Q'V;7XROmpMcKUAIBa]!KF^,`9."BF46tuE%Zr3iV=*pk"Xe)qn;C,4T\%CV,EW/./LfE(a^TV]Mo47f".FPo=g>:GF!nSO,lDYM9e?dbN^U2T+T>#fO?G/pVHD*Iu\iB2O%WQs7%HFN;h]M6E(menoLlape"Sm%/#HGZ<J/tJ\9BsfR2]o.6_R,[)mqPV90NcsmTC\#r4lB`gEA&HVO[(@DpM,3m6\"79T:X9Nr+8SbX%4_EM6\5bV;QLM?Sm-_30?ME+$o;*OHjPAG^)lT9uX1-Z8HL1=XoA`m,F2m=MmU(,NT>"Sn>?aXIqIsaD&b]>No<4'ZloU&"^\87#%cOujV^<niGq+lclm-:nIpe0&iUe.a2RYah4CW>CYaZ[(7CRlL7-,"_NiU6-3H\kP-2tkS1`2Cqh-b%Ud*nsfDm]<K;4>i`[gQ1bG%c0NO`,>[d#]]qZ=:WoSaU9!k<ak*)1)uaoRB08-\>@;$=^@\\Sq9R[3-9U[7F0ot&1=iebm_*/g6@;JmhZ4+k]Wh7fI8;E<mjIU%%!a'$m_:DI$52K379iu=m8+?AT8"7Tq]!o&C7u+.8T+a:6UlR[QXY5eQT3p!R!L?Jg7BGl<XX.Gs^)IX7HL!2_n,+8)hsIhkUU(]P%SSi:g#@C-)+a2VR<ESmoV3XkCV:KLfF$@TFC:sS.==Fh+hpmNH(8R4!3f0,RaK$Ue=q=YK*"s8O:p'>0o/KQ\rU/LrI\g$@(R=9J%mKMub:qG*a<P%am>-GbW6QQ(q9<=@mrs=r'H]Vq@?i3M&/Kn:^-WWi#\7['g$JKu=V1h@bs"EAGrF_gg<pAI=@\m&%n104#+0$)u%MNcDcH7i5o^[ZkW.=\:'acuZX\7u3!IR6Wlp5^l]mg_+rR2:8-EGi$QB`>BT\`M2drOR@[]lOm,coeH>\t$=d4an;PnS=-=lOWoS%a.;>g#rgFd-S]uJEG+C*Nki.u;*9#oh>'fMn^u[n\4%69FW5)HIFc?;J%WJ959B1#Gm..N`X7B:8_QOfHdlJX,2O]ap,:MT]WFWm%E>6oi\^0V-']+FFG(Se(IK"osPXq!F*tl@p:hU+.Y]lJkcIm2fK#>4Z%MTsCdU;1I\[Y0p?p_R:>=igo\o`-@N=%T.FKe01mf!<*%l%p&BUIEsh[*&cbr&iVZOk&^c_&L^Zq&&so()#j^/G^(/O2MXKnN4IM4asjDIJ<LVMk^iJf@MIB,sQiq3^9$D+k^!IaOGR+h^aP^%$8U'N46tj?Y*nCtX,o_]1Mc1&O8M-_g[@P@q7pY6fKHETIW1pWpNn'oZbieVAXN.<fab>04d#COZDR'`Vql6p"%AD@*I*pUT(p%s%Z4/i'n)/lm4P5+u5'YtaXn]VW^UfNJ[Za`<ouG%7pAS*AdXkAU&uRs>F0_FgeN5GPo%euOL2>\,:_f4(!NNfMdTo'56Ypk6eFKK-%MkE$>6fnk5kM?C=<\2/H4TE!5QSe-d<l-ORkc!#n9@%8jR%JlHN_tt9oL8ZV,FgcFR7s/4n]4[4A9"P]^B\q-mL?A3C.3=%V6;p(%/$$/9%8t7;[eepiq>`]Ch@FF#$r%,H)4.g>`!n*YZ/C/L#8p@q&Nr68#^q:4%aU,e=/&9;G#;H>40^Aa]Q;Xs,4__moj=m3BjnnH%i`gg-pP4O"^6>CIag.L2VcQto'MK-#UL0C%1EZLN@]?T!B7+or:S-\"T&S=MI4*7:@leD?m0hd8-M<un:R%+L8%^u?.NN5$Z9j=6%='1\+6"8rR.Mc/JIqSshMlDS&Nq(ja]^eq)R61\Zj-E*FaJtIk()A<DgP%`%*8142,:3q`6*5%k*]raaYfFU#/SD[V@6_t;]/sQ5%p)j#ue;con0;LbWif(]!Kf2ssCRacF(,GYe5f&IfQ2N)>-FPB_hu1'KcVS6NYsTc3%(8k'r4W2)4Fch4^NEW/p^k#J[!*ScKNQNA%,K)*ecQZ%+G.hDse)OcGM&0k3T?4uFal!4u%>j;7U\.3uZ4AdFfuWn$7+A\Yi4AoT_^9#cP2RN.&_j(/m[]UE%W1cR(ZtX=NX?Dh%)FP6D8C:jTfgim\fhGO0$B'0JFaHL\&E]:_j?E;Se&AUD"5*8aJ?6GV9])"$QP\^D4esT=q_Ot8]^P1`^'gEVD^R9=[ef:_kMD6F%)+(TIZ%c&+9hsjMKe>GOq2SHYB?;gs7'hYP8Yi\50(DbNM'YpSd-nK2CZ,Hr*,#X3nQ;hRgUfjcm4C=/8X_<kH.4,ZD,$Hl2W>mj%H61Yq'9(peQRj:3Y`SYDkB<%OLU`"c=ndZTP+kZr4p[).&_n=9*rOA55r;JNBXHj@.O%e)r'#hR1b[\8F4f8r5F113\g?+_(L[IR%rYju@955dYph%Urcj?]":Bs`sR`pCpB-QN\'$<''nr'FrSYtqD5"=;5R,/les+:72[Cm9B&HQ)eQQUYfd=b"o0C,fBdRhWRk:_5A%-fiGVhWW7CW8(#iW3DXEe&gAO$b]CS^m!B.Ag([.jZ;N\_b"3kLq4j;QLmp?ct1=mTJ"E$$&CXpXBGtNDZEc?-8QMP=']2\QUuNr%q0_&:1qu,4PBPnj;<]Z'Jh5%$)WtsKQ:6tO'p.NZI.?nC=YtiOYr=,qW25EbJi'('+doMkHr$9k)0Z6>/AdkJYolifK."Fh'D?k`%ZHs(i4s:j$+'bPo`Im9V``]0IWY=&o.+@,'_IE3oPRod(9Io5]j%E2m+I;Vj<*':Rch/A'.2M#Y]uuZaNn1h$DW"**Zrdi1R<6[%%+6.CKf02\llSX_-+%;L?d0c$u8:YMuN[@fgcC=M13#W[B30';Om1VVX3SKS`K&IT>UB-\NpKf;?Phhu;S',7WB<ABTV[\<4d$o3I%"WcAZN7Upc#=m`t94IK$q8NFnmKP5bQh.$qa_XLG1FnZ3IaF-[bfg0]O3J;JD\d@Jftq2BRiO6[+hX3":g5tkM3"C(OAUo=2'm70%Ccla<I3KHlLEUo^%tUBU&e+'Hc?hI@n><gnHT>[sJKgS:YF<R"6Jm4<0#H%u5Zc"RmfSc\HL%Lg[`/"/XfOH3i4DOEL2V.tpZXkD%5W6?*s63%D/BfW`@+=bZ["bCoi#,&"%q$!TE-*Nun\jYcEEIneRXdn/)Q(\Eb$dL4(g@o5ADq6ET:"1rTG%W%!r`iPLW*h9.!WlF%_ar8\::hrB'(!aG'"`)NhMpQrNqiDVZ>iriTNs9f4$D.UV8oC]>oZG7--7>T@p+suk:+$@A^[2hel"V3'&dqp-7-qC)V^Id]V:"W%>Zr-\9BFTjP[,^]R'b+^ou-@4jN+_3H_7Z=PNtht`HBb$>dQ(KQFM,`]KNP$o`U\3kM_?48U*csO4j>.N.`$9(s16iPRj''93CQL%;hK#AN$tA!?E-kc1Lb$;EJ_o*XtS*BS,9<ibCYcUc'I[D>?GaU3aI""k0*J8lA#9Ao&dC@1?dB4/`Z$@"f9jj#$iKaB]L/EoF*e'%P:)GZQWP]]TM*KEbaChbSj=1:(*"]W/j4h>V"K_06^OB1(WmL5,DRm7K.\HS0NS`iH3PD7(7[W"?$\N&><R->h9a"JA^Cb,@a#h'%oF*d\O(IM$K`[E91<^5p.WO0cEX[>9-;Yu?7A<AYT&-U9_!QJhq,3K6NBD58lrI*_NH#HLH?qenKr'43TaU5WD++Ob7dd10pHm=d%S1?("r3B!OR.oE`PN>1=n+!4t996uRUQ>9JZ81U=l&0ehL=_?2Vm#3#;F9MUL?C%g8T?2#5YJ8U3@S:@*=2o>@sdbm;"\m`K!>$T%fO0g=DW<"?0g-CjCk("4e_B>a'dT"!_NBq**J8G\P;+02A'C+lP.#5E<`2u(>I&[G^>TX]QJ8CT+<f2jb7*'aA2AloL#nDM6a5)!%*LekP7oncI*7(WcEZ)Q4<@4-IB6nS(AZc_GResNHR<=m6gQTp?gWLB/fWaZmbAhdkF<YT8o'YhrT\0p#XEG6,Y/DlqJ>O%*"3XZU%V"=?c=Y]D+o(^M9nm?9iS6!b2Burq#l)OAp%/ePKMq^g_H5`-ER65qd1%<Ug"SJ=i#;^Q$AFoSdDH9M+g11IZVZX5]AVbO.SWBSj%PW[$mB=rVQKcR7)p/kpqW'$2+7iSGJ_N%u?oA0;oE1k[d876j>-C:5T465uR2RC>"5Do2>VWZ,k:a@0n]G6aR0dsbN?W?gqR_$)&%8Jlfkila%L^-.Z<p6#tT@h_EuO``Jf)/!rhL0Ub680`5VABPcgC#YH_Upstt)%*>qBuin>0]IhaI9MY9+X>67@`srJP^_[b@E?)R%d3I7i6_XG$>CD>\&+#6#c/e?*q:n%dV@q@B1(rZ&\5%'6<'OEPO._R$b-#u=]dN)Thfn\&GEUGAU(Kd<pX;QcVkFYV-'G/k:6/)I%8YLNBdO6].q]hq/iPh<=`DZQSODRmAFF&+.>[!>cB6TRara1tS1^T5eF6\l*1J3X?_KR7f145-9,<b58HKjiW*gqPls*T3T$ph+f%'&AZp%;cf?bYYb+p`:;D6]62"OtoqAo(.fF*gp+ps)X%h*4b,M8C8Xi/peqgL$uiX*D0F:Ic2g#a`6>rb-M$-p&3VXP9E(:Z1DE[%OUNorl`ZU$j4#6JXY4>*oZEu'N>TGPPV8+`QL%o"OZkZ;\e(>_R$Ca>4(rds6C$]`8]L(mk1'W57oM0sZ^maB;@f`6XPSJFR2W)L%3.)Jj^a'((k.E&F-;>g/%VhD"9O2s.>lO?87`gFDMh4.*RWLaK(jQlWo&8"@<%""C#@?^N=.hrF>g/%tM+LsIkJN"JU%"VL8a!u[%cQ-R7EKe\'b<.(Y,5H2O*@ltCbL,n>U:+1P[LQiRNLs>a!cDI%OT\ZD-8J0%P_k6Ee!>lJbZanW97:&&TM,G5`m7,PGTLCT^*Fbf%4H`)`9HU$S-BQ>,'ZlFL"/!ic+Ls,X+Z:>/*4X0=+l[e3a1\1&kG97<!te[hM;FhJDoPq7Ie$@OX"`rs,filEQ&4O2M9GC:7s5cI%B]IIsq<Z)QM)LdNJ17(;b9nGTRGaK(,37=DS.s/bPC+Wp_J*1F@Fi=d!b\*Z(A:?j:2=*[0^Q]/jKnK2SMCXhOcc[#)Dsc*5]bAi%_BWWf<c=O$,`t]2UfME)ag_a7;Z.r*Oo"=_A27$`cQk8D+^]'`N)[SJM2YEL,BjQ<`$CA$l_=h5q9[XH5t3B*I.Y>"nD2a?0TlbZ%cc7B'$:j.P;^6T8OU;md/e_$7)r5EMm]glg4bm<'7Oh[4$mM,KpKLPS@_<&_+VcWd5:1*:]h_Q8K<-2?IWAWOdm[`IWm$=h@=>4^%atS`a"2+]".HOEkE$,7gjHJtOl7bS\%-QGO#\9^FQe]GL4.V_Bni2cpf92][*6kP]P^"0C<&gOp1e'V&lPFGuHOs7#*s6i.jl:uO%S`ZF,l.57u@(YFTH2=@Xo([2$kurRnE;n#%'Djr+2LOi.G5(7@1[F+IH*^I#QT*N&^a0-(*>D#%c#AlWa!mO:'pj%I<YE_UqO!ds%k.Fk^$r4!FZJ3:N_1'c,*2qB"\@;7Z69?X6c?T@A/_R8?Q<:+a3S@*LYZj5'lrTB#rL-XKcDhh^1n'?1I_Q]g_F9[EN-?(bib$%u%$J;KBZt),''WEp:+5au:U^T?Np?`sQi)<OZgW-\&Z`E^,]Cs?<@\n;C]Sh)6V-a"HI';BQ=1\A$j%a(XhJ)3b:Qm8V(!a%YUIl:Q%Vj`(po6aiLgr$XBbc;:)BmeWu_J$"jZ>s2lmTD9%kY&:G*`iQjW'F)K*D;(@L,IW\/OiBHO6H(NHSVQ`fb(5]Y=\:J<^.ju'\F3p%BiJ,PC0$i0ZX,#)P?cnN,;Ei289gKLDN`3)L&8A+*?po6%8"m!bRrHnFbs@<>bCqAb.'hlOhS>Phm+jROej`.Xo[c^cama7EgGDr%pW(CZQQ7aT,,3"p=4muFdQP:=ACHP#LWQ#[(M=!2?(@,%VNX+aB$>)&31jT#]o8RX(RIcRC?B#H2I2h+5!IDDS8>c5\*u6oHiDZ"%flV541/8)m+e*@;M4?Ak/oI:NaNB?Ne&CFs"mu91ACJNZdRhIPjN+3Vo<mTfm$#ViM]5sel()KG?(>pKN#eH_2I0Q??,C=I@q=$t%2sK=FZDKHn2I2hn>$.;:2I5,5`C*(QR8"JdQ$K:s8D/)V]&dJ/l/[2-S8>bBWp$&LKX0i3lET-tFK%9$'?d82c`Nd\2I.:(;Tja"%l/HkZ+u/R#aJOl*%q4dH'%q@E4!PE]VTY8YPK9VZlO7,>T2[^S<[QF/ZK^@hkn<IF)rCX#oaS^`rF3<tDG%X^C\X(8khR5AM,->k%(43"ONHW`U2P]/22q4Wem.*jH^:IkB6EZsWpQopnPM]$,84^hDbZ$,=Va)Xr+X-/3WDSd)ag(u)gZ?9k;^4.+HAj[1f<re99o9IW%8E;HRrKM?iEWXDe.2K@JSuBt^&W92pj*!112Ga(kM;,>a0"N#!R_-?q=->'/.+d6#hCeOh.T]44R_,@h0"FA2W;qeIpgjE!]CEmU%kC#k_QC1]*Q..[8R3"f\R'Ej*j#Tm17<`6KF2r=Y1+p/%gH=c6R(t^`qNKNGqB3rD=hL,(Lf3DiYB#\ob<ngIZm%Rr'6e`[K"B1Y%_lWY?Blm`FVg@9t''WpNRL@ddL<2_$deSTmQB\Vk*'n,^4,L,Tn4].[@>iW_HRYCZ"G`j$dN!Hh<766AcJd<0M-Zfg-o.bWik_Id%Ta7[BpbD#H."Y,FU,tNBRI\(KA3Q$g'`p<$VAoid7pcmieD79I=9=Uja-0VV'['<"HYfQuFtPjF-C%]&F9b2jZ1b[bS61-nRbXlm%J8?DG):LT8=t@M7K!Ho3.o5091@r63Zl&(T_cs^6M)QD?SSF!/`DCopbDBc,Lm*nkCD+O`p'-_l_2pc=9\ptZ?MgpI>u[B%qZ[k?%NNGr0/87tP3Uf`#PQ6GNgtShH(0lN4-QM9,<IHH]aH11mGNF:t141=/a<9Sq+8^dSbca^Oj)0N](_^./lFkaDDR`?_HlQW6i^Dfc%geHk,]ZbaI\XW00bpO,_jc."`;f9)Qk9\72LQ$8k?.s_1E5u8`)t%6422COrnIo\&rUA@-,jSGkZ'HNU<c\U'M@R7fDR@@9B]c'M%Y5\du$hn/[U%=gr7Ic>P2i#\7!'Cq:kM0/"Cp?YragnX<,c3oZ0ba2j]KH#WECij?>u=u@%u-D/qJsS@8GKU^hD`P5-CH-VV+4me%Q=rO@aeUYFM9PI[qP_?B,c3;u02#lTVjd!^<N\!uX@em+VPQebW:E*O?26*S&lV[2&_rqE,&-WtL@9?smhhtn7hik._\1k?B6QU7%,0.)r8j65`m$G@DdcJ(.O`k<A55'GG7oR+!]5JA*EIFI(1f\uFk,ap8]#Tc!o%$:SE=K!F&V_HkophT58t%#roph?.aur!D&:8SJ%IAm!.`nRgi-X2pPH#rBKgTB5eoAd^Ies$!O-]ctgmp"l-c6:I#X1\=/WG>.fDf%5F6X@;)h_G-H9#>rNj=",E-m,UrfXq+ErF+&Q%'u#H?^&7DK69a0sEY;]&n9&"GoAiF\SoQJ5pWpF!a$*]&S<S^$.Buc;bH4B,:S_"D\c(K0@\l`0B;KN<pTUdpQ&86f^Om%k/Pp.@%26F>uht?FMe0A+V/'C^P2WH8=/4'S3n!jc^iDlY`J&1Q$n]tW1V:P$&j5ninhZk+FLc\>1FQ\[L>j9P7gE5E)V>%\acU+Urd7TJJ%mLaj:-FqRlmFRV"A/D6=%Qo4`^@<Jm_7`?SiR(FLVjE[eEl%ZGjm0VQ%1/!ffA$7@?VD*$h]#Fh;f($(DbjJ[Q;d_"6I8;Y9p/7/%=6ONukSCMk^e"jc9Q34R-8oF]8<Qo7L-r!SRfkN-\PZq+e>DTNVV\+dAt]^jN13s\4\8lBTiHq:2fph`WSfa3#[1E_?0((g0s]4_%+uEFU($+LUACE%^IDTb/H$?f;=\NMW:m>"&]h!?nXsgEh@ToOirP\N#7(?fKS/-%h:i's$?#>(;HnW-X]fgaUb%RXT_7_@=oQ>m!%p<30*%W?a0\fc46TgUe:Wd@llQflQc3%*,M3Jg*n`f65L(;FFOlWia/gEV$1_l%07(>u]Xd)MUkQ^BFlA[Mr='piA0`V[]m5pJ*g%XOTqGq[ScL9P%ZkEjZPA0Ve&^Z\5rdF\I"\ZELG>[4LV+cZ\!hqtLf;.`ROC!.mkARpR7/\GL")dC\Ja_0h)M6ha`BE@kC@-<%&e%.lZ'?#D"3jnmCZDBtiV$D*6=D5c?m(XU_GdS>h%*G9g'HKBHL9U]P.6Bq-o,rm#k=-Tb0qH87nV23,@]-3piX>BH1*fsN9M,#W!b%*m;dhOXDosF#dinA_s>KX2jpm:C5*sdY6_g6f);tAc^':!(rkNP*@(9PlmBdSM$$..%:;ulqboj"XoiB(d-b2Ihn\n%NtFJO.6@j%ROTa%Ai'uU?P];N%NtDrkZNFbJ#;gsE/mrT/3ql.5[bmuPQdH$UnJdDi-ltfcS/AZ?cjaG,MP2Enc`_&NL02FGnkeOV0lE)Z;'IZ%5*e!fY+U`'.:6L<7Ot#(V0p2T,QEcsq3(2:T&c_q;YO7QF"(JCWrS-b&f\g%-n@/7q,Y9#c\?a0M6im$n+Dl*)f"_dr;rchi,#?f%Hi<NS.?/YW?i$mR,Fo8YF0Ar^=")o<c[W-*r8^L6)et%QrN^),,jt=uNslVlX"j)9bKAn7O@(u"<klL\/r+?(]mf4A7=5mrhs2(n%aO%&<,MW83H`pd;6#dL:UYP/ORuWkZWk!Mt88$)bScq9o]mf2nIu->Y1%4d.'m+":`?oQ-?b0H$f*PD*p\L_U]!5,Z,M_T$QR:rM%^%(ONRm>8GY'^,qZ%/Hr')27!Dl=AGnVi\,*mI4roj5BM<ASTp?gr4CAW2!7,0Ndhhs)"=ZR^6GMB_K]bKP=(aM!&e\,(rL4Qa>+%klKCeN7>-#p%.daioX_2S?%e@oh4a=WkhHg?GD`4f"9EZF<BDRF=bl7nRYrQ-[d)o=SMXu/@!AGD`5Y_]m_DU&"1hR?J^&-dPZ;0%nR*"(qBa8Q2o@_6UZHDcW:RN_R'd@/me'61D[o8LN..s;\@86aii)VAjU9L-^5m16b=C@Q2u\5Q1.b/BV`,%)C?3!a0:J"ahS"@]%a7dl^IOnuBr-SB1W`7]cU1<*HQ`fHrbd#stqPE*72tj4Fr*I,mI=7:QqFTb]:>fHnoNV97ho@ZR(2ee0%c?S2H89m+<kgmOA)6H0%lq.cElBcV8=l+N(d_i[@;JbE@rR(e=,!Micn+DSVQb]_Pl0#q*hs354h_Ntsq/`,?m)h'Np%'&&goZ#M7h8)Woh1hfJK$ko]@S]A%0kAl$q"OW]-cC%^4SHI;@3VJUq@2\!dO/1On+B=SJs[%3EKZUJ]m`j?bh2[d"\3TX"",D,2IV$Rhs6U]*)a+&-^G=ejSi>AGkdAt%UE."-O8+O&.s8['</emj!_mk*V?bsJdM>3V$0R\jHh7#0-^Y.bHrI\XjcG-H[Jc+_edaf8o]ODZ-+_]\gc)?ZYs?7Mo7d&`?f"Z2%hHej:&EHbAgt@1i>>gbk$Z!/2*CK:%4KgkbIWf)3^:1b$[Bd18@oI[HmH)@T++m:'iD[.ePAag#/t1)'B6X(\IN4b?0&M.0/D=^X%W&aa?GGQ+PmXi!Y@sm)p\pXIPI_9U4]f>OgRQoX[HfoV0DQF[Zhf#&*]sq<crq!;[4]u\$3445eG+Z4EQO@_=5$>Il0CN#$k9"nl%<sBJM58robhE#$@1q3)Hl]^?f$`3`-Sh=^6I_<5kO1t6cWGK<$<%@(=kK8g-pScjFl7R:-cJ.13m4[$ncTM)L-o*AMmQXlZI9Y.o%gfp0>p3j'tqp^ADk1n]B[sFEsK^qbXIb6`)2eoNW?r2b3+Q5N+_,kdLhT"$XkAd%]4+iXL^C0(rhcWLGQ"Dj*=-pS;gM]9G4MK;0%Y#Xn)`j`eOApp?_RAA.`3HS^!TOYWfGd[Jcbt20mW19A/.X/Nd[J(3d@?nM>=[%MG_f?l6cM+dP80_q&Xre]hMrd65EU-!2HUfa9%/:ZM:H=soBf5EfXli6SSkut:iYi=NR4PYD_<<#:rXn?q:q<$M2NG$hZ)8Yq,#GPe]B.g7Z05X6kI/i<m_nCaVV/#%j%5W:i`S7l"%pUB%mHNr@5_2$8J,jdd'B)Q62I@",4b$'94U(L/tN"`C_V'Z&:/lUX^kn1Nrrj;.AXC&h`G!"d27h7#'\\1D,fZ,TFPY:d\AZ`8?%m5kI<1ZeVeK>g,fq:Y2=qI&RI'H?mX-2>:C=2fgh_$>>]CP>4IBJoSKMsZ?+CV^7Hni-)(%6W;=s4Y2/4cWagnd5($79^]WZC'8W%J?5;F-sP8;Xk$7pZ7Jq[[ct>PqUm7AM*PYg.="&CR]jK?<Wt:AR6Vm6:.-4Di<+6>>X(E;h*(Ip(N]5PY>>2j3kf@r>bCV86aqL-%>_aWaOPAX%*:O1\QK\9O[sds.IbpO%rUTUfo^&]&]k$;&4upR#`"YPO0"@I3dgd12@c,V*gGsTqh0-u1h77Zpc!jW;WUJ6h-a:(I%bL.QK[Ln)iJ!kD:?TWW&#CX`*#^G7@nE9`Bnae\`I_0dnVlQkB7[4t%@r<k2f<;I)$[usinu7%sMN7Z4AoCs:4Z%L/ID0u?pWA[i%jn8F2?Ojc[o]XiMNoT\g)`?;5q==15esdJFY1n@!1c.Yu,u-M[in:unL@5$F]@('![=u$XraqW"pH&CS:N/q\I5aQ>dXA8,n+!S8%r$uLqQ[[TQjl[k(n_"CPi6c/KpJEmICSH#DOF8qMfV:/!e&AeO0($=M:qOu]J#)ciO6iOaDXC9br1A0C?WsXK1<$kPLSdh9kJo-^%WZTaiB2XB'4EkGdPPP"#E+J?*#FYM9_u%LD0/rgP:TsZkFbD;pj_][/?%.7kiRYs]AaT'M90_;a[_@4I9AT$ZP<F#1*Y+`%p&+Be%[9k"MUJkN(aDLI^+SbBC-%dE%\I"HGj5\g?o]2//5$kgMiPRg`S&[1RW%"<Q(A+f:nqWie]_LU-bo?5/dq:>c6apE>4o+XFm5#go%m9SIR_P"mCdZ8`e^#XTaMSJrSa#-W&2QHL8^`LeKbNQ%JTCCIW5rBb-chroKPI#e/P"3.+>rHmNgBR3D?j!%HD/dra'%7#PXktqP%]R)H,;V:p%h35U&e]I^CdrUQ\N^!FF>J'\G1OJ+3(3W&>.h0f#ldM=>Im!D<lSd'oSoZL"V`b?AlJ"NVr;#0\bAQ@ee_`ldI!q".%TuQHA[I<8Wil8/L]$2bg:12S#-CT"B*hRd4ZHF3daetJrd(.mQjQEqq0"q/hG2mm]B!f>Hqp7)oQ%ekle&*.%T]fi__3&HePA5=b%b[<&hrMS/&8c`4fhY^kK'&271GA2-:QB\(b_6*.UiHH+"if>Ia=GL(*lKk'5"'6SJcPIO^*]nH;fl7#PgRj$Pmk.S'\Fp4aR5!78%(PS;J*r-m*G[%H)W>f=L[gk=cja3RJ4>a<kA:"Z3iuK_0!,WFV[sm.CO/i]eqXt6nCHfft#FUOoqOJ,s#p3/Q]4:G&'?kr:"CO2K%qg$(^VgX2"K$7OB])>`Q5@3#mE3u#eHr+'p$:MF>#=r5"FD$;KE><tL8?cf`GQ2s_qNQfWWl]8.j1!',*k1nAe,?n([7%ufrl03>%o_qdVO&%t'f8nnPf;a_89lXNcDuY.BORLM.54IZ%`rt.O'8rcI:QC[&Be^^!(uY.P&UEutEq#Fa>)uA6H9T1CMsnoGg-D=pa-1EM%":O:?I3A4mK8fe2#6JI(>8*'q:&M5>HYDEThi&gq'Xe4;E*U-2`8<!GI'ru-mi^M.TS[;'s5dn+r3WXX>E=3/1V_>Un)"tAl+-*+%rPrE/4^IEZI>W:@ff'UgIuCqVb<LA2?8pGX)%c/ZpT*1fnXiP2O5CD-g7(3>qr`_r$e_t$*^1W%lf$mg90Ls7oL[in>PNL,h87Lo%cO2u;>[;a"c$KhbhgG3JiTJCF$U9,JB^Fm90+0H2m&pT=eX;1G5:l_\GG29s^OKG^q0&J!L[Q#5rj]Q/o?2?9j7;F2n#(Ybq=:_C%T=YIao()O/(O>h"iC.(e>Bl9s+22ELJa@7r;sPbqVG96!a6R>D?%;RJXKMU&a0jHW$P+JU!M"\[VK=O29$q%#8(,]i"^M18KYJA<%^\hp+M`9NPFF<7)5q0"`-lu:oqt@W^mhV.npDHWRVP:0J(XJ,p^])l>A`$hCkP]Sr_[3'Om1Ug+GmlB?Hc(;=Mq3PhYKmZV?0t*H%,V8t:[F[O)f>^&E$ec[tb>Ta;H?!WaFSjP<`qTdgiR-Jfm138WVm,KBfB:m1DReX9:X',`jn/'Lhg[\8p6DcQnabq.Y?[V#`Z>rM%rqHW$J?1qaLr$WBg[So9HZrJ=hE6"0B]*$kkOOH$niABa/dpt4"g2,2Y6?V`aO5)rN9AG)S%uf)nph7+jQBf,HX$egoB*5boB/2R%Yq5io@R=j;*LR9NG^+(8dUUVX;kD1JpQ%3bDSA)QjQ,WN8+0bJFXd;EEVQN"k/r<\dl>V(_L)8cQ.LDm`R/%-Z]/+ldBt(>X]hk5%90.9=pQpe>?_(L\`IIZu%@ksEM>Npk^,JK-p`^2Rn7&D205k[RLLVBnQZkAK!AH,Z+*?r4[B"*6Y@!hTR?p_JR<mDAnU1-V["#cH%Cr-DPm;9;A_5N7hI'@>Z^AYHTs*ErW3qguD4aZRT^!GG7@<g1dron0B#.!ueJ,]%p_i<78on41@64)b/h5>&'D>i<u^2`,XnpU<P%0"6dqao?%Ch[&U658\[fNiC:dVk(HZc5i*u]l<@GYP`X9;3&tP7.ZC6h^<idGPV$fR32"5NUM>1r;>`qPr:-4H1i\25@-@4^k-pn%Gn7LTM5V1qEC\9"SM*JB?8l29o=ahWK=>UTA6M+oUc.P`G;kQk2X=9t1\7Bs>KeND5NA3<8``e5j9[3P)!5a`SZejLnlY=j#?nl*%B;bgB3Ta:>GNJ'/_<^L5DknguGD!ZmaM^^rUekp@>OUE3T6T=T)cbZSr,RmeO)+]sS#\dA9YS!Lp&+4Q<suJ(>1XVKIa9"Hnulu1%(JZ%@n3+IMq"2ViD;`C-W=3JXC<(#$UpL%sC:_)ufr7nfCjYfu%3^H*5-n.uQtI^u1u#\Ajj2bD2a4s$rT;pPIH?6Lc1>#-]DM$H%qo^(*GCS<Ehk)R9htaReqsO(BjD=GcSZSqo9=hXFoD[;.CgF/6*\>=B]rL>i2#=IB7+L1;n[Ei+mIp:`:VXF7>PIX2A3+Z]>moDb%=#W$uhHi4$OMn-K_n5=aXK-R7o<JE@Fe='3rD#_%r;2Da+"r#PFQ2J!p\25`aAp]]0/%a`pulaM*c7g=./s#=Y8<d;pNQ1(kK^6R%c^g%b)r^X"#W,6W,[ZD+#UTFsA9I:hon^r(LUS$G[!LqFfj%fi4*M1_+'27nqX44FM4OHbr8I#-`qf+=FoCJ.gT/@ZHnVPBM\"p=%5iJ1d@HHtkJ\j?S!qHnh"r+cX';c&p?NZ"#_M!XdQ3%c7#nr]BYq2R;9pi/*pff9FdD&i3%q:4,7gPPZrJt1\)Edd"i'7jl^P)pm%!$!,bl<hD\IfKu>>Q-3:p]o_b111$YnDGC="$mLUKEluK4LBd,CF?m)3&E,XjKa_.m/;Reom9IfM,Cqc@!1l5ULRmp^RVqCPI`?S%o^"63CN'27Zb#\pemm@\MT+Q$4tiH9f]e0+l=A>55K4!g7R->=AJ`&TYgHp5n^n['*5["lQ2QQI4CQeRI^k6BZj$B+5C.5?$&9PP%EbiD76Da\'QW$sEh`UZr=2=?<rT"7h#/lO-qXJ@u'>rLMf72L5qY7s6F1O<ZWcm`c9n@_9Q%;R_WHbaZn@?54goq>_lpg=c&,kf\%Z\BjZ7Y`n.K8\3-]Q3aK+aVNA,(\++f.gF`OFHRakF,WRb)K/UkJUh:\a)6eninKK$/e1je**tN@m7'0b,k@#o![Y.h"NVL@(>hc%m;jG3hH]_?DbOHX46<Ag?Kfqicc83Y:#%khKoX3WbiAEm^#gkqhbNuLE0kM@4M&`7Z2-.*\BFd<<tAXtFKm^.F6%kdrPI]m!I+@U%(!!P/qBmoJZklFa<8W(Ek3aOI"";k@l?STLqp8ja5An3Gna==,ZhfM.[fH$E/,3u=jPTb:Bu9@*q`M^eem<ZMij(UVnX:4J==DVQ%6E=J`@5%J/f364.4mVF9D"Ht1!?sRI*GW:N^[kmK/Ur3A^%ZfV=Uo0*jtmVBj*`t#VkX4;,6k&1s3$57fon?Zs$$t2^0q"/jX)Zu%ihW&#EUNhr(TiPi`]'Bkm43\\%ZD8&c!/g$4TFOa:*)b,a1lA@ad2tYXu%3tod9*uh#(n#nd^.DFFUuQrd'V7C1sk]nBr!MW5ZAd%j.A`"f)OIh`qCraI'B7BAulP!FnVaagD@k"Tq=MBXqMkhB(7'jWB]0prM@s\q+U2nBA49GVA25dET]^'GkUnc7HiP&CR7hh5Q)1P%<>nG]7VPGn9p7F=IcWbE^p+2_^@_'Y.9i?\m(P9_p>G=mJ%#;jSbPI@),EHpcK/"A3e<:Jl+5bk0]LsEf0iDh-4gWX$pt<=?Kp7"%rd=9NQe^Q`BSd>b*clY)Y6ih!Qs9+02#V$YIq%u(]5C1+q.W%k_s>dd9jkd3#DB`;=[Ho4`aAU\aBH/=NN$913ZldGY"s,)Y5EDT%/t2)n`X(S\8Gh*.YJL-BpVn]qnfHN!F[@a-q3T!(]X9KHdR0`1a&'80f%e]/qCT'qX$`/OO)AV-#(LsB-@-s$?Q$\tb9p=#&+iI[%MdPdG%NY/ar-sl^EZdk\W&5bNDD%j+TtP>[:NXftIfJZ^M7Z!"m*FIHf?`V-YDubGdA&e(NB-qu@fGPcHMOs%YMKcb6L3)gU@$Es%f(\>c0)jk*X,?cO`LRsirq5G[Du]\)lVg,.Iqe;h1]*Mg%4$0_=jkZlF(k*k*/.bWqe(CbdtBLVm)s6_=e>23mD4kgnS%25If@6c%5DDD@+nOdVjBJ55?etP`l!KsGM@]H,rXSBidL(cE>TM2]P>.V28,QZ;A-kbTpbga>0"uQd>SjK^_NB1lkP)a;NNHQZ>e^!rG<=u+%s75sKV3`.am__qn@UUft+J8]!Q#.qS]DO33\:HQ!W5T\QX?XJ+)fP'af,d)$qTa(RGnfU69*GUORAIKEl%L%Bh&"Bk,`$,b`5pqu%X_lh5c/n!"gLO%ecp^"/5#@m]B(7VE&S]])L)c^@X%SO,Dgm-#8@mM4LB4+T/X.C-,bgTif_0UblI`A*c(B'?T5e[^PL#b'<t_:J%o?>`.Q"JF<akG:nH)=oA<fb]LX/D";T<d+S8NP0r0)f=sBMHEkD4:,QK![&!qW\_76=\cF=%M\F-.@>>mkZIY#W96Zgp9ZB?;8,5%.u+XnjNd2V07Vr4o^'H_lSn:8^%fqA`t^P^s6JbGn@uNZS1c[jP5Ik4?@05'N7ZA1g?dP*Q,Cp+c[Yk?n]fAB2t,Y;q"UK78VeGc%I-p@PMmJU'^%Rk!qnqcf]M8,oY*M;S_3OmkhXK2j2`i\ms5:Xm^;teAXE68s^UG_a]nlUV5P!i)q8XR$qQF%lrB0uM8N2!MqeiUI%)!>2VV3ru^?>E-=4cu#?lhd*rrOe3im+R=i@G\u=Mm<_UU4+.V+*a&lQ'_/M0'fQCf?[*iOg6sm.>]URH'\oBbMBi%hNI"U9#Hbd%H&W-tKmAgh.BE'giCuq3a6Yp!`Q^KT7]ph((c"NKmdP7^1`K($eWa^\06e)CE6[sM<<a`3Gq"T:eUF+%jQ*m/c]oU7]/1$.4d+j\%f;(1tVb#nGI*D?gn%q3V/\8JC]Z.L-8l;1Jb1t1"OEid/WHbkD9&sRSZ3@ETI@>MTH!-R0TuZJBng.%LQ.LgeY*76]4o<;*H-;B4%F]4ON$]ZtibrE6m9#!fCh<=#ng?-(+#JP/=Y7@:jqN"g)Sc$%enI41a4_8:r*l3"_7=:Qr^-4c+]2_<s3WSUd37N?Q)*]H;IKMeH%n&CF>DIQC,+4rN7msuMfk]6B*chD"kB#r?Jg)g.+Q^>U7kcGi#.*Zba]KIE*Unc]9:5jJcqO)(a@;eIkqW):h/8Pb6KRSV'<ZPo>%R1-!.?K.;L+6>YbTh\r)HL'X%<KjD:Wo$et6&g*$Qh*HH7qY<RX'iZ72g#<nG*L9&Go+]3g1bo$J+DPZ+h_1$mabOA=31V$N4%5j%$\H$l%c5Q+)"hQeS.*'T^[\^BOJr90fCqSN5\7iG3pBp_h:B0TaUM,?D<SF2kho4J\*HIaF[!0@W)[.mB4W#5&Tt@Cl'PM^\onHK%?_(rN6pZ^&pSBL@Oh?^fKB\h0CGW81V"@9<3c7Z3Hg)5<b_^fCFWR*e!TlYIo:Y5aQm_IK54r>FSW^WT=!r&a#20<qVTm=54mQCE%:>dBNgNtlMk;'?MM%aqQG!.1cW`b;]S]Q"h>i\?j6<UNYH(LmV8lW`a&/VF9Qd<na2Qt8%[<'SHMC+RJX$SV6nePre_TJ^cj#`9U%(k%RFk1[r?au`@W]#.1=WTDH.G,Q+mo&0@il=ihF<@#kRQbf1E2GSRt`43#uaVWY$e!;U6=7^co"\q*&'Mc)F*L*]T*.kV$G&s(-%SM#/qU<5>:-,*>_G<>`\b`nHbr1,WB<-$\"B4d\uMXrUre+_7(R3sZ48L_Ygnn"2P1:*k8O""4#djDcH)(G/flq<apZ-#%e*R=Ht%dUZ0.*D=Y@J`CPTBcLC'`I9TAS;H'$8N7H].n2\]<"rUYFcA13:%T%hYfh<dZ^ck;,c]C^KtWk4;=?LO"nmn=6YBhqbTKZt<$p(Q%F&:H<EA$g#1,e0G`Vm)s9P-/SdDp7dj#*R`\VY=I;!9mD+T*#>lA:MZkGG4%OtOiaedC4[g+g!Kd,d7>4SHIiN>&XS[h?20g.mT7%-]?&Z@,!)j<Z%9%UoR!ah6]W$Vk@bf<0iFhG$d,1/h@NB">SlU70G[<ja/=i%5bc0I_$eE3XE6_XB_,M4d9lj_JsV8aYMLC<lt'U%@1aMa(m`n73TG]R]Zms(&+;V`hX/3M&28M1L_YY.)Bm)HP9]X3h)tceD+mD9e&H53G&2+FR&F`7"?Dm1N:<jHd1h8%Y"c0i.HCW[%26EDn5?$qU5]$9]!Kh5Z9X&,u8/"PJB%mHu[OF5Q[r'ts?uVUj'=?OG^][Uq1GQ`&K-;*UHF#LC,X5D,!UgP"CLdUn[#NjL0Rk=`%0G?Gi+bLLM\OnZc'2$a?nV$]pUHR^/c*U8K<*K@"A?2gG;c5M)-PQ(%(7cnrCMVC`%(6me8fHGV2^Of-6(Ccu"%;h9b&=)hr4dNI%*P6UrqCae1?^_]IPHD51J=(<2[rSP$LLCUek=BT()J#eX9L,5M6=HM]85Uf`UZmB/FnJmE,"p8KXAG4_^0$]Kf;gTR+=Re6!KsV;%qZp$-G[ICW?dl&Bn_+^<po'A4mM#9bI%Jue=PVt#A\*(&\6dDs]9t^AZ8>\Z1sRf<-nATE1l]=O<C7S.kP'/9.:!CnF*nm4-0nQZ%8!>F6A(mD@.:rh]E_Am\X+$";h7P8kp\if^o?QN[Dr/1!*P6:Lr6ETS^"`!?^VHZZ7u#YHXQo`/=@I$!<9.%)-qp3aK"d[AArm?4%-9)-.VY/N_U<J1e9I2.[ekkoeM1*F,mBF=A%.p9$=TFO#:RV)&jd6QI(Gmj)kVBf5j5\&bp0%5*eg#9]9<m2[L1*kgSpL$sa&'[%%,1\,O&2?RT!B>3`Gtj'FPn=c`kKM0l[X*Fqln#'<AY"p>N=V4s&C$<N(/Y<d!@1gT)S_hAJTOkY@FFg&h@NZNK<5lET[Ai\q+T(,%B?^Xc[V2IpHB3/pOS8udO-k*":9/L'/E=SA7^8X9Ln`'-@WeOAAA3hhUHGJa8\iQ2=kABX2^M.T=OFD3#\&:0fVq7A9g/!?T/k>)%as/*LND)IIT@6g'5X-g!IsW#1W+ghmQX8IB-t'?=8B+[AT6runM@)+@-$h[u$Aqpcq#lLeb&L/HFl=Z*$pdU6PC.hB0Bge079r,D%k3u'q/'i[#SX9EA#I4'0[_WP$rE;9rUKHpKiQMl9+Nc+MNC==E#=Ii$O9O@5Y9IR^`_?VKY%6gCksU0#@C%$'?(HM1"!+YB%[Qfe%h`3=^4eU+B7'a*5'kNg"&EkKM<Tt\1+XoMbM?1DB6qjN8KD3;I_:fHF_r!K>Es0<FJ`TNu'VqWNn\2(sE+_W8=OBPl\Y;af?l3WU%/IZ/;2BVCGA[9DB-jjU=%%,]MgiipP,@Es\/HSVbOq=OIh3j+BOVc)l705@AY)@_4UqT:pjS8<Bi!"IhU]NsH0PA@,6K%(X'7nLq%#_4)nS#QJi=3g%^!gL)mYlGIP=:Z#)MQ%EG`#&;"F4STH3D=Pe$9mk!9LT25=D^`KBln,ZFPML-$*.%$/CU5ifS_J,7DNb4Ah&>-%jYLihloJa@FFN+=(IH0#;ln,E[(d-;e?q(.V8BbkJ?4J8C'tW`![JB?<IeHW_hUJW(BfBm'EFA7i>u8G+S'\S_'1OaP,T*;L>!!N%`X]e.=*jIpdY06P(a=c(RZ"_5ZTt;iZ6A]o(Ha.^,uieF`KQt]%MKe`6t!6e.&ZnRnXtQ\'i`Q_??iPW,QJ#1Vt-!ImH#+0@7e-_%:c0bQOs_#8PR#0!77GWn1C+s_^(WfLdP;*:GZ33u45cV?jPF&@@D\4;crM-"_@AOBc&](O>Ot:mK]*4F$uht5pH$*>q2NMF@Jpo=%p@Nqn=r?H5JY3fhlZHNBh$<sQ*T'VnN/XtM$)kQSo,c8_]M&AX5L9qal<g<5:8X9R"07lHi%guOWr"9_o0n4cEli&IGY/.Te6=3P%T\L*tJo4"%cj'ghIj_h[n68is]dk=(cnPS7#fIa^"b<*kUnA"i+$GoiiQXE7[_PfDp.`&MCLk/0\8n#<KupV\'3j4<\?8BZU$uLk%6D=So%-V"='Ys/NW4;"<0)!/fCdSA5%`Htikfqt_c]LnR".ME!),/"`cOj2,.H0j_N$D4'2\ZB)nGj2`5Sp5S8mC5Nja_T:^*NZm%jH*ucc>JJ!;ilnLPb:\N0,L\Z$3V/!2qWLX<s:XOb!?q:I>=[$%E$?*VZ>bWe3o[<_!bUFLBuh&nb=(9aWcaHl.&^gDCU$^E,X'l%(A_lNF9EL&P[S*i8WJS2!3hPYgCZOD3Pd&@p?GVT^h'^h,\$^N&VE+8[.l.1AqN2+PN=t):9OsmDNu)8p&d?"7L(iF-l&Gu_ItpA%"c,\`)N@%7JH-.1#,$=B7pmK3Z#Q)=K$=9%&L%>?D*ZEgeP'\#i:E;E!YSUd)8L%*"Y]tI6fJD3`R=G%2\6C\ht/Y][jT#0'`n[i%_-bQ$kELGR>OYit3+XX]LNI52KW6g4$SiqFZ&6PRHN[2j=iL4_SIb"ZY_$bX0E^hF[_k.nj=fF3E8tH-b]*B1G5-YAQ-QKpPlXu-%%]3R!3NruAqn=^j*a06D7qTQX%+1LPAQ!7C=1BgM]hnr\/:PM3Olc;MJi,3?K3.PX'.FW6&F0tQ%-'954ZdVsof:GF/J!oKBRUmS%%Bs(3d:?j>%rc=gBffEATcV&b&>fGF"""hQ_(YqPSIdfc$suESF`A,5!r"Oq<5?\u4+^oa9XOi3QU`SnV,okf3)Wp'-<Ae&PRG6[%L@W+SO9@L^=&eU?ObtR0`&i[&i(ehrr,8JiKZbFI7L$:(["mZBe,gJk2tSF"QjO7>+?^6EdFCL&+<VfLMC'?=-Pl^)hbbUC\2"?r%_4=\#\)9TTYR5&*l_?KY+ZpYac[F]a6lmo&.H.X0`e%Jd>a#f!B`TWA<&'dtWa_6gbJ)]Y3tergrK#k*[\*d(dCuQKR4SUk-T%Vh%YS352:k,9BBCt<-,2.8m1sXR#63jjP5b/VT!$-b$(HO'9)Cbss*/K9K8_G*9%VUM<0?.RT<u)AmkK3@sQftbQdOmdH-$.a=&mTuF%@-HfJ[5>EmmtQACWg3nY4h*RA:dj41S%)",?o/i5C8B5[obm2Eis`U&H,+ZmET8j'#=p$CORj#!;4$0D2"hJsQ%oeX#el0jm/r?P%JE/tj$T#K(!h:a+*+h23.24`p1PnJ^U##b1bC['&g(H(h&7ZfN__G/f$%:<7\I%3=TAGbm?d7DoCSsg;:?l[IML";>3q_Lk[J1lm%*A"P^.]aOsj>m^q"'>Z\03G8d-?AX"Pr!u/G6#p#)6r,KYlRXR^9(cEY6LM\KnIcQjoN`c=N7Be/GpV"3e$re@9K.Zl)%8ulfB/k%$/U$%IB;-:^u%Ql97Jc^R<V_5!"'R<`YIkV\6mpD;`rcX\a"7CCI;&C!IGnn%Hpq1CEe$/hB>/3f0\OH&<'m&FI<kKp>2>$E5@)[%&:"AqJqs_d(&OeU?U,q\@%e"#+<3M@-`.QkB+TIWK4X^l['1ob^QO;%"Mr"-"q`\K&O`;<JuC$;9'Ml90bT0CRTiA2I,?AA'=,s@%F\9**\K4/3F'D)@l8?Ao&7@eD`krqW!f\QnUN`(JO\%itRQ4[#fQBlF!<'dhJMM>\4pXV8OeTCDfEaY'1*Jn$aE_=\@_`_[_0b8h%:?`(P*s*Skk4YM/2$dh9kdtDg"gq`<c%:>q*^q66)d@J!"G$(d#u$C/F)hH[fr7G<igjCQl>.r+]s#n35W<k29<\=J7F,EnoZKK<%][t5E"IBH2X2B")=mT^M@5m*gF0`YC=Im8Od:6/'qbAp`j<hGmi:=+T`@@9@N2q8c%eRTCoUV!r>(?AVKe[]=0%8?4:BA*?!k@s>%'q!7u+o\%B'ZQ.qN7ZG6(c:3*!iAKm-2&hPPYWD4C5:+^*qB<u+IfMYGu3C&!T:jNk3+?0E1kDk.ikb'$qBDf22VR38t7]&#HMFW%oS1`iL4BQ8#/D=\co1ZI&Ml$$)4Z*SZA9>[S&u4mn9/n(>d_pXd"*1]h$]YSJVWD.=p>0R!ga3].3dN5CLV;l2mHfa$%k#[389!9%l"832Xl'dn+lS6RNK.0A!,$08UG@[dYaQ&-,Rn.E,NPUP?Pth6CujHc_S@mVFreI=oGh@T'[>3C+Un[<BS<DPFf4'"1n'o!Bp&U@%OZYS'#prTDhIVekW"bu9(9!m=+4b1bp[h&mk[RIkIoHGS")&C1$"O,5QTIn7it@&b,T$ji#\$aHTg*Ut&RpP7SKVR`0P8.)#XSiK%YV66^3I$6F7Y$F7'7`>!*1c:%GJGC.ZRE%)#`'a"P2paO5L9_[l<KDeQph!lU#Y?ALe=S8'qME,g>3[#Z\TKb!XLo`5J0IIoAWIM%31s^F-%e@7c$CpUd_-7a??cQ^?(D1FOh(jj!RQf#(e8SAZ5Q*r(fVaA6^3R+L(Wg1p)P^g\4.b!6aR?K#`t#UDI08%@M'a=m-jo/%YcR7-*KX8gUUSU>4c60ZV3mrF5W>Xj-<^[7$Mg=p-@(ODKNS,fiPA!`#$npu_Z0fG!StCZXf4#"i#S@p_Fu$A%M*Ih*=6[VJp;fo%D/i+&'l&(._Sj-TRc_=m-lLM8Nsa*m5e*4@AO_ag"4D;#Jph#]4O=V^l<bfWE1mF.L)Y>t14fR>4>>g6.ktCm,\0"HP-#J4b$%D?%di%6Db\sED-6htK)e/O1%TB@;Q9/=>Ob06D<q)1\Ftt5%M%\#`NBAo=gU6slWX2UOD<=(dSRp$b!Ylm7L*?bC.q<i#:@fuP<#IM!%Z\)Ph[(br[#9?ndq7_2*.okE[>\#\I-E7<@l04Yl@m9Eb2<r2^W[@->):n[uI45IVS<0\-hQ&BddBP:=eY"7rr7NUW+ud=P5VA%>%$-3FY\$q`U:1oS6jT+?bK?Ou#Bj-VS_lju,m)TO^L`Cu6Ffkh<+[HE+;jS8HAVo7!K2O-oBUVYt'nmjaAD0q9YIV-44FRH$'eP1R%+.kEu'gt;soZ16GpFDf]mP&l*Fe8'+dkpEGTMMD4/t,6816ALhf%FB_!0R#SIgd\bRr''sJp/MUG*`g\)LT-7.Eg9$>m-A4mXitf%HKA-Q.d'j<^qHaGM5bKtC'pji26!YP5[Q.kr2:Wejm1G%%iMs1,c/\QD:WcT97ct64%+_HOFWm8[h6Fb1,d)H5F'0E\^_s?Il+JR%oYk=6"hS`4@!B3R%#0G!'`99MoWZ6e0H:5t_]5DHfi0(J>n1VXEWstrK8K;f#Xj6iiZTm0;UbKIrjj"[#<QLRMeN=F)IiBNRO3JI%6i+kMJHSUS3=%`,OGou'PnY%N$)_km>1sV%kEK);<Gft`7Xgb<eQ[]u3Qk+'i\K3G:X"iYRTYYdQlCQE(&7p17Ja]1Y*Dc2;D!#*%:n2m4K\'bB5"W!bBasZ"O_^5Af._LH@$`DV(D;!*e43jS)!]6L)Ue;IJ7TVCeb6^CU-%%e74U:?QEF]=Q'94CgN:1=ZXB.faIFc@%!%<lk]d@#.7RE+K\VDd;!%GtY,hL8OMS+p!6d`7kUs,"`po6FJ'Q=Q(03jUDC67TQ&iK3:$P@DmO<T(V;jKsofF@CYR?YfA:2[.d%'9/tl8m@gp<%KY,O8rK6a'kclaCA+We;)%]N(F`\DpKsnVI.0dPOB'HqIk3]6$SKsa94'>+u#UK,TYBhIXb6:+-_0<ZKs01LGX(k%2kW<r5&-s'_)k-C_f&,ROJG%`B\_Jg94[<F"LX)nTZ5NGC1ZI<:$QGZN5MSD_k?S0VJGHk:6PjLqQB'WND!5dVZc$H0f#t&cAY-u%=9,qDTl21O@@ClihFnGJL'G^XL(EP=!RR8;ifU(b.fht5J6?%?QLS]hP`4nGP.BU.e$.cNo:!_g;O`@JS[(q5'8I1h5I.cK:4"k.%Slm4uE3C*M9ed_(SPh/Ybha=%2itO[#*6BpEE<:MA(m/G6H/$%*U\TUB8LFQ!aZ]2cUc36R*l%g$^=-pCcUClF94J-'oq,4O.n3:%?L>@b2[GQ3Fd/n\O0C6iRe<L$4QWA,oHtaEP\'MG5QSPd/\Bh$Vt>-436*Wg.NqRgjY^C[]7^Jgl9-0WDY,Md$f64ge/M/Fjkc1"%ObX5ZWou2oLqnllh:!8r")qYb)H4'qH^f*t:NO*9M&:o]NM$Ci)_`S:kESu0ZRrNrb02OMoKk9DMb?)Z;:bg#6AI*D3Nhb\`dX/R%0c?]dgOV%QC9jE1+VmGW[Rn;T?>FQtHZ=(gRL_;en9<ekguu,_D3;CD@6>0H/6h$6P-/2'OhSe3"A$QKdB+.;o"@p$c)h)lMngTG%6j_fQ:^;5E81'ki(c@Zcb$jOE+Db$ma`T>_%X-$YqYMo>V*'"1da*rUboYYIXO$CdbpqC)X2sJd8Ato#FiHrq:"Zlh`L]Y0M4jop%+66[Z91B9oMqXK4kQ"#=],WkSUJd9%EKD<4P`e<3JnQtVKe:!aER2c!.djtf>7+'sjjPn145=DbE:WKjZKu16L$DlP!X9o.L-0o(%Jo:faX$(#8S"QDi[Ufg;KXA8&AWuJ"#EOD,3kYl/SJ3D&*U$-aI,NIm8./EA^cW.MFE9^pN*HXU`XMsW<^G/63&\TXiS`Ts;-?kd%XCG866G=fnS[\JOC^$"0M%#'Gb-^YmL+@HPb@6grCB\0:&B;P7)AL[],WP&KGW"m&qIb>\Z7bd@)g#U:/I9Jac@Wp[;F(/cg=A"R%koI+\D8"@P50tgI$Ef!gYX!q"$bb7mRHNjjc&3E?Obc$jZtu0R$jlY[6.0fn#A$j>h_kaaQAOF=YAuB)[q,7<=681**Gr6KV@#m?%"/cg9PBXm$("%6"Q1>hm.r8X98</`(m;O]"7*8aF9?4hg7)2m7%JMt0Y)D+L;;]e<=S=A_E=fW$-Ea*K3X&fC4drdinZDL5ia,*1%TJ>)L=&"`S-]8[_jE]MZU?UnRoqo\?=_NLq;8"<6g1r3e5Fi5e>>sM8_3Z97)2u!(K1G!=HLCCLljomp6sA0)7BpY:!E8851(#_>%5[Hn;<J<Xf>CDTnWVs[=Fbc`Z:2Uk!!&OPM%a0]Ve,G@mmt_nG[^"J!]&"Jrbk@_9]@EPXr%88:)Zi<%+NTDGKoMKU"he4D:-aMk%9!gQM&;6u@=Y^Z3FJj##-jNe6!(HWNJSi_-Y4A'/oT53pcoAgi%u7EFURkE+HVjh)@*&t!X&e_Y+g?ZKScWaD>;9ErLW9eD(Ai(3%1Cs*X\j]S\H-t7EgEE>&%jIm%;1oC),2bp=$BS$gJaORN])@D2)RuU.9c?W&^R:/JA3dK*WVA%\<h:@pDelt.R3NH!mMNgdh@*@4%6gQ>37!>!q+LY>/F$hHCo%5BB`i=1bj?6gif$g=h"GAeX>M(pY<?&<&Tl0YpOZ*Zb7CVl>:-d-5,6<"`G$,IppF((;>EEtFUFQ#\%P%ibbS-AY]^p8tFU;Rs'ljsM_=RgB,Y8Eim('&=s#S@UJ'Wu);9Mi_2RnC.r%5c?B&;ZG)p9X%e&pgHjY6cA>%U;G2/^Q,I""/T=%BI!@#@Y4aBP"CKM(./TYOdDcH3m\?")kSs0`F/t'D=(3=SIH9q)Q5HWK$lA"5R`'!JN=?A_'hk\1*t1!UjrL<K`0\WJkiZ*I*lL3%*$g8F9/_mUjId>@'J$pCJt-,pKNd2JP-I]<#(%VLU!-9YA1<p'r"'Y9(^@,Rgr,A,/t%\46e*iqpqsg`i/1Ml&-p];@":MO%U1T>%:_f:ri)`4[jG^+<F+[kYS*CZ2nVa@+\8$=4"Bku%.OLo5W+QcZSMH"QHtmK/B9kJ?2_bLhMjX@!?"O.qen0JWZ===OfVmNW4qY;Z%&ZQ&a`@_aKK&C5S<J*f6]=p-+R_,V*hs8#+".`gUWqOY%JXInP6(1rR,<E/!Mc47O,3[!%*R/d;s.s&tP!p#iad<COSYHN1RE]6"%]9QE)[^f]VF<)<i#UIK=$Bg884-B^W07kdgFNrKc!`C3OB_WA-01O9e0=bJ5`Z,>b%TA.-'(2AhTWbf11.o=j3i7XI,J]HjluA]I%[T(:0rVjT+8<HdjUO#0.J;hVT%1f2p6,t+pKZl^mRg=uVB/c[4`\Ao%lN4Q;%:]hQ$2;6.%BR%%rMVGAoButcTiK(+H(#kS8r&Q<%-'!9X4/Zf:9m)",kp/1;#&`eNlp)(<Zc)=+`=!TP2i@`FVlhAQ3<Xu]\Rq-Mkka0&&ks01T"YO,ZD,.Xgf&0YKMeCH7;*\IcK*s/%Xog8!>0b)q5mCHXk]\&K:hS?l0N3LZ@]=(`^uYS2I=&HIn64=`_SI2n-'C=XmtA-:_3P*?BhY)@&G?2+gcF/7/lSj!Q$"6+W2H61%[am_g\<NU5P>`'(2<>>EGMU['ee2@X/D=sGBsFeK*hh"MB#4k@XMh4TI*K*s<Mt+&>kV_%<@`@51jueA</ABNb))d?e;T7_+)[I$%$O;b3[k&)kk\gT")jUNU_j<3iKAV3CMKXN+'HclUc()7;(^(Po-hj'g[)3=Y:,Crg8]<q$_NO,HL0Fcf1(-@/VF)7L2bRYYNWGbg%>Q954i'8cn["@TET&BVL%`D!Z\,m#U3jS4L%2'>Ri_PsW%gZdT#8i26BG]P6S8WXSIPO8`i@kg!/qD]T6#-<%iGP$H%5J+-:ao_s%Mu#?]MRUXE2dD9e9A+KC'D\@n7(*"Z/Hp5l?eAcj&OUYJ7uojm2)\B7%:Bfsb9K;UF.2LrC/QE(1shPab_]OJX.hIMl9q_nco[N,%j.D`:UT=dEbU[d=@CC.+<,rVK8m@1`&>lBJ%Y[?.(t+kg*681oD.>cW;J<O?W\"4<'\HfG8Q']+#EsfZ_'7K@f,4b0]^#[WWFY>u%/K+fGs4**I.fkAB8W@U<929Gh\_4cnD<JHMmAL:DE"#3&Np'd"H^(jh6\I;TY\%**ZpAeR;pf_tjMFJIp^DfnT0V6fOQtI2FW9e8%72K`UebUFC^@:'!XYfV*L16tQeM`KVmt)SOg!GS-Ka7TXFkP-jJn;=C"ueSQ+M_<a_.2M[I5$:X#M1[.\N,*]-jXcN5D[dai>n6L%&513+':NJo\5U$e%h1]=VFp,3fB/I:>&,WJ>rPlC'*&)7B5CR<\Y;\:T(micRZ;9[^bU*=H@]ANS8*R(:h=1l2p[uFU)N<d"!)Kp%WM94WJAnhF5A<;FLp1l/E!$0Vq;u.>(QJYoeGn&=M@8$HKoTXnn4QNKA0oZYQ_Aa^Y`9Ynd,;?J?\AZPD[ui-%]nglCU7Yu]5]k@%Nl9nFk%br?g#%!AG=;5:.DQu.Q'isn8&ur\*46%R:74u.+Nd@m2Jn,?7+9bf`.=WTEAS![=WGus>S)@,\sX*A+Hc`7!%(;?U-RG_%'W\]Rd&)(Bjp2_sPS8_'T)Y\'?n=GcZ_l`?I6]rj_.,*o=:FjqK6T+#RPZ<V\ReC.h'q#DI\Ub3aRs,O?P%=)Zu>kZVF``@.KAb_%BI%=n#!SE:@_)K5V'3CfP&.!$jKg&V@B``lBTQXZB/sYM_SP5_jYF'oCuYG#+Rk*N!!0D!2LCC3G3oHC0ETR(SacF6lU9Z)K5D3q%#l<'%3SoGaW3(^+8>f4@U^=g*'YsXSAVIi$TX2)pd,0?nKOJGd9*0I&g=eun"ZF*(`Jole@.817KC=F[$"M"Di\'GTA1XENK)NBu%Y/.n@)]Jq5>>[=T/d"_>!+48a$j>pc&a>[d.h>`Q]jYm`9Bu@OnAC=@@C.,(a.NZ#:]PE6Te`0</DiL=(M76o4kB*34^IPh1]W1P%W(92p0bXCq"XsQ`7F@k7!o788JR2a9^dAF#DhG$9'S-NJ+NrXrHO]5f(!>%m!=Vn[\6?enl95s[g&Nu6@,(mWRKG%n_MQe3.GU4C%cN[b@fZ`W.2Ll1m-_p/?"4K?#Fb_4s1*!7(<HpdVoW]T:eUTQKYTVL+M'(pbAWf?sqMibdBuVdR(Q,&mdq+QcCQ+&NF3_49O(<([%BU/GD9,M?oO9[l\'_nq[355G*)6]h:/L/B22]PkIj?ZJkp0'RW[kPUq%LV+''`IHes!-?oD]ZHNNKIopU(!"J5W>oc&9Q!=jM#sT%0stL:a;k'k-QF%0!1u+pg'$Hh:"VES#:hVi_VTXA,='2GfqOFYoYjpNDtaD?aZtgT/Z_#f+jVhqU%)o/8'3=<0biIm3'oT`0Tr<6%Jn'bDg,:;(/C2[#Y$^kl$[n`ieM:g-pLI(C82INX\QB]n_i,\M0U1&k\("DFR<K<oNj_pa_;iGRQ0P51&_8#hE\Y<8\tukApZPag%7[e02Cu,sroB9F9%h/VioK&EKLJ^>Aha]=16AJOW_%jna62'd2/_])2lmd[.\I5`hqTr5C,*D:Yh32AhIKHsF28nOd*2i3Z7UHNr%"e#s=:ufC:2N]gtgdG]@]!7skd2O/d])BX8U2SE)-L]d'LZ@!G*_&Q'1%C_LOo]NV/t8JrP"bN'>a^e6bhY9n`uLfYqf5M&C.E=]%RkeG[_Ve?6eZ?<P7qJK7\f[0!.bjmOCl-mURu^do3V?;en>Hfg'1YdCeFG;G.s]LBM8+=4^?1Y\rFARd[N:]YFDXt,$hnD)s*L7G%oT8fiG-G2>M:6?UE<igiZqNi+@^'0+r*lmM`1_g?UELW:+H0Le0SU#@lS6BkBO\V4,_3Cb$O+E[V3KA*9k"m54_oV._;nb[@l0*R%FG.Z_1Mo0$"BGWj[2>6"!tTKF>:61HJ[44!/X3)65`;VRD&$kAY[OAu`6!bqF9n`Q/+*se)s6?0)Pq3brn'P<_m20g[>))-')EL^%a<<aECT*kYd"[6t&ng6>XQ@bb(,r>H)QdM_`;RBti0NL?[LfCr/ZJe]7H"ul8W0>RJ85d6*DkE#O_qUFLtO8X=c@&-qCo1>J^<0s%d!@#DF.D4qTnlEkd]I\IZW`H55[m(tG(=@<Um?Ok3J&iO4(,cGi-V\$'XA[>*^](Ffa2.lS:(Cu6R\P)*N!<ZY90G9&CV`J^HS1^%)*"3U`YCd`(-^&H6jU()(_L0EWZc@`Vbq^4#[%]`oi4qaM<K_&rW)i9JA3iA<cK[6pkr")Q8EQb;j@%p+61S$,P,D?CWk<HB\ecu%0lXm!hT%kmLZB"=1sft4,6PoRjAq@s0nHk]?mntF>+(SD"p[1J8`U^JhiR6ARFlPIR1Q+B&PN.k28WL%),OpsB$m#RSJa@#(HU2%%c%D\-^1I'*XUO9_p8q7TXmU``9ka#>oX:#bSI"Lo(c%*U?c8%k1f3j"9o&F!e"t`\Gm;FK2pBh-!n4NLjuXEDLRNEq9JD&+JqH*U%6\:pS=F)P(N,R7,$.<*<#J+Ke]MN@V>M>H)U.T7DA]52\^Lp)&CTaUMRTf;aNQH"]V)@>G&V;u$:&e+pOMOI^&fVf\9I03Cn'X&K%XEgJYUpRk4RLY0ioOK\3Hq\IR\#ZqW\>hNbUm<?/e*LJGTWe>"fp:0J[DBhhkhP5o8M(FtND4qd0%hZT@Y#8!M@IrWFT^D,>*jt!%X_nVJ<-5=:@ED9Rhb\n1R:cb<*#Q!BD'NYt;W&;;9Ppb1JN#,!,5:e=6XNRC;hrtX`l#)r*Vn(UDt]KP-QQRA1gJKE"huX7T&l0`%&mNC!1?)(?PjOg2B,&[e@FMB"#Qg\,?_:d^W6VpKrpF#lN=FI)%%?])F>g?WN)u-N1Y+K.Y3iVf^LKPtYC2)h3Ei\7&2=0r.+s*:%/C9mqc7oCgH^b)pRbC,3f2i[5%uJdP<AK_<]*q_>8SgtRML>u"&n=q\=,VU*L6]e,g&.Fq"0LFgQ>T"A=#FTXAnlgV/1G_PU8XHU%>I+h+*_!MYP+fRH[Cg6DB%ERt=OMBR:,%Ku'oC7[#I,ETJ=p_QMoOjad:uU?DOd[$@DurC3:<euP9-VBn:REX86hDBTQ6F%7GQUV%;:1h4f]0cCj"BTD(BEXCS9K-7#F5C&=O`uirOA[-A[;kg_ihT4(hCGbTd20t[`=PBO]XDTZk<kVg8Q8B"A^/u.Y8!F>QBNn79kEH%(Eb,.6s@2RQ.Kg%FI=.7<I3qm;A\cV_a]l"<Mac`!duUT"WYHAc13-aG]&GF+rUW$_WaeMUVJJ[[bm"_H#'6%[8L<ob\5T_`tF*i%:`TL#2_;"]?d]T`\BV1\[QVeG;JcJO'<Bt%%T!`0\$L\M?KWCuWL1cm-()#P'g?cIa`)!qTtZ/hGJOk<5b>hQ4Ij/;oa\V`Ye@oO%b`.+lMR8CN[bZd6]YGSQN(&HTe-'?%M_1eIm!.IV@5q=OlWg0Y&1S)(Xl2\]JN2)/5$1_?7[,V49>^*`=Sk7;EjUg2S4A,!AD+&k%,0P<!XIb%0eN,H)OG0O.2ruYrl#08PfI7#UJEI+'+MWMn?\.]L+.pTd0ThRLnQAD:H"P^2j8qi6:5R-bC_C30$!n?I&2.-m&ID:f%jT>#UGY:G:JS3Xu=d)_?,dR+SV?Y0umdGkk<<2GEF"Fd32`M5H;aZ4*!YG@rZX$M:65chT5epW:eif&86k$8n("_,5XH(7oPk\tO%2:PJr5RTHLF$aJ'_#ckSb!nk*-&g=taWY\Z\"]ieY8J("\Xf<>/.0?]`d]OCHAW65R`&0JJH03<a+ht#9t_%rJR2I42G0D/E#E<+%G'apG[WRLnF1p&aD(=bWlBU0.p7mh?,16[.p&D8j#s!lV2EAGpR?&U2*5l8L/o-HG5&0=<Y)BBRaE+/OQ3Z5LiU0dO3G`%h6:*)h%NIb,Nd?9C@9!4%H=^sIVhF9pm5KUKMh_"Ttfn#/cg0Qs+.EU!6&4U=#Tgj;3-<e%:C2-754^j?B?@V]Qj=om("K*PV,OZf.JH4jV%i%[gl.B'8_>Z"5D!s[l2Q$J6kU=3R"/MdlcCp'1p.nV16!Yae*k`mO3kr!BF#)%Fi7k0[D:V:.&f4Q[Z:(OpUT\;KAm6VmGX2lq\%F%GKtaN;/bmW'!deZ_kM,E$2)%6ur.@]cGZ$g^\qP+-<f39h6O5`[?oG-#f'>P;rD*UfZa#s+Z;@@,@>M8M-D-,C!W;K/uTH%dIf%DCIX!('%Y.2*[#s`.b"TcrMj5ZFCH\El!qXSCS*<eM6aq8)7CjoN`Nn5\?09pOe>,JET#aM]K8P1.&T\27GqKLb'b4:+6A*JJ0g9%UQGp*\:An27B>OSRM(Sd;am6'_Ot2$o:c5F7MQ(!9PYYKne'GcmPL,eHj%ET\=JABYb`'\L?W)_9!!*8m$BR`9f@SkLZ.k1+HPNa%d'hLJ_Vo;^,mM$FfgoHf)rK6Vb?G9?l5B&c>Am;Qq27"Y2)'%]a%YL7YH7,BJrZ4oL_-":]BXr4\:S>(E`[-95AaDX;7flp&+p'Q%Y@e!s.#+`l";E@nJ[Gn+X*0pZ_lXj]etlQ$8$%JodI8V!5b/':KRViI_(G#DcuZod4qMgE!@#0F(qsJ<]9`cWkipO<aM"<+HLS5h%bQ7Wr[t1?l;hID*>hZUR`"gEL:iUDiY[,OP^Y-apm@`5kBF=M=S7_7HFJ>e:,6lL`/c`'5\5f,S/7`if2;g`p.nQUR$&Tk4XG)u"%.KmQr*f/6sB4.J:C-LSR*:OA9db+TEb@29\"d/"51VXq3`%tMo:hDtMHH&@1l@6Wg9MW`5=X?N0h!n-U'8hSRV3s*!3##.9j5AT7%+J=E+'J.#LZTL]hD@+W?[PUpeMib#R2Kp3n?=<dsX84glr*q2hQ8D][*g!8A>h*AXD:ffgnFhQ=cWL7kCu9FiNsbL._q=2tY=pp;%1M!Bden)7%::1TH*Fl/7>3"^(RLHrmPKcXNV`'lDXYkF/ZIQYoQ[g<22>XQC"%Yik#]R#_co4+uM&N>#fbn-/%:tDG1_pi[,H\(X%8s.eKSgDrlM=j7@=.0*2S;[?<]M+q,OaZYe_ku$12$Dp<1P9<j<K/UgLJD\664D]\*eHm<a4%c&->DLamWh#!a?)AFNDBht+aXgb%Nlf0G-/`sGM:m++g!P1,MQC"/<&e0f00G@XnD#3M-5^ep/-^^s:N0!Z2up"S117qA#m=%PROs!`dS@B)+"f'E#$irj,>Tt5Ft1['%cnh)/E`9/j<]K;^C(_dCZjQmJhOL2#"p(c6j$A]ZD6UOm#K#q?Ha*"#SEp@bihKm!e5gAd:FbXITin0]1[$in=SU!#J-F^^<GX5=%P?g927BAi%Ll*,("21qGg>K'Y_\?OF%bO\li?251!@]6V$=\X==IaaD6)S@_d.?62Ihm@];-6C=6FJdSXG"nSO#`.O:F`[X@*qSK%!6TZ>*e6mgG7$%?Ef4gRLEgkj-4t5?Wl:b=,%Y$d(@,PNs'#%g*T,OiD6+8Ci4/+;2:0LP#C9g8ot_N3_?]_\=afe\F2D`9_3?dV%kNo.JPS?cRO_HA!#H.7;&a4_!5V#)UJB1+hk!!irYu^-\QKk!BS6N9]:,ZS'+Y:s+LBC:;\;WrDbAfI!A*RotVI_W91K`iR94HEc%k8o'k[K82l*`oI]T-d07r#&;qZpmrL)J)9)5SaoAE/.t=?f*H;5.D>p1t/[!$1`"#!.&]-BV>dbb2lc?5mTg(RPX?P>,TKY$N^lt%aZ[?!:$6?/p8#al31e4u]\f\A<.,!,"6cZ3Qt;:]Se/mD,7>#M6#tlHP),"n`a^+?PL8n#+6M0d/J/B9i0(h@Zk&I'Y:4Ob,$$IE%,WB1ENA(jmr#l%nKn+M"ZdlmnW\YQiAMob,&l>n%&VNC[YKL+_)UIZUJ3N6TJV'Ws(b0@<Vo<+?m<BWI]s.%2ke25$f9068[%\`/%To?LQiU&K2995RO/9]9/0V*u_:@#CLi8Nh^S+OPF4D)9-JL4T/2*L_MRHN@.@Ls2NM@p2F*@=u5d*/e>+gm8D(_0fgZR9]j;2pLr%8*/%,BR:\AQstU5%\OCS.j*C]-\s/E4Phf+Ad#V3eBDd>F>7C+aAeQh+#W?jfSrCSnW:]i7kq2;7E\"IXQ>E!=Q\R1=H(+5s7\1K%E*gnn%#d4]XUQ?H\W%m(2eXfH)K[+39X3,UdSP\(">p4iKu]cSN>#,"Pul=,Zbn%)%g!+(R97A0kh=qKH)HTVTOnWHP-koQWoB^6%Kfnk_H,M1'*ao0?7)h#&G6BtOo(AR9I"PEY<hl^!^l2J"48kn-5$1kC@_Vocct,/#<p&htU)Op53acp8k>>-YkKEX&;Y"V'`%:lH%([o2>'85fm@r%&ZlZ#GDXaoWA'uri*MnRA5Qq3PS7;MIR/64!/@\,kA=E"<r2S9`K#'U`uBn-5=:"Bb<X?;=*0@Z9IZ)+*LkgjR,%N<d%'Bb`N6HO?EMcbs<'$[1g!:a?MFdZIgP;hBa";]/h!>1o9,RHE[?/,39R=?*0k9TXXP;\*;>egL^jcj*Q$:b'r,B5C>IS/t,O%=^4jgi0Z^Ug!O>h'-ekBeAGL16>iF4ZT9\=NK^"83/VL#YGdb;k99(K:&A@5`F:EYMT@liQ@u@FX&'R88j]P9&n\W_pMKFaQ=!]-%?Sj'\-VZ!@8X_T2ahQm_AB:@c34C9(ajo,5?AhKmZ6E)a@QB"4Kqu1Yr32@j<2?i]KNaMV=kIka<ZiVN>;g+]pl*u!>^NALRY6@Y%<!W82Bsj$a9t[2R]4se`A?9U_Rf"dB`_F__g&#IUd[C,e,TofKcaMiDB%trNF/0s.HCHH@`_;mLmgZ$)Rdh1#T1a(M=WX9&Gk7@s%B0#\./!+FG[EP:]7tA@E:aNLn'(iHXSUnEr/a3OmP#Ns!ejtCe29bf=aqB%_A0V8<]=^/0*<"CAiFP-ENi?AglZVkUYWaiUUM"#?%3iNnF(/rZ9$0cd.;6RCXRCC,Oa38<O_6t1o3b5Ou/=NDgfI0!gY1D9p]q<dZZ=U4B[5+9o5(Y4R%D_)X0@$aG?cRb&ors7RSP8>0%Hd1[sekgPO<Ol4pOHQ\oG@'Bo;(ecHUkRYKWE-<STei$KK<uCNM`Y[D'Jcm-b-L-J0smoB7f.fcB.K+lE#C:VU=r`CX"#'.j+>4p%3jSY4"DOM6V:2s_%b9LN75ZT)-o<7,kY#jK%?P#;=sI-"=YH%Q/64&N/9iqA*s)#.^/*Yc8ID6)B"UkUP*iEHZ\.)>`$Nr/d'dW$%/ulL6V.PAZ8??8*5b_7JOiZdHc.EUgXI0ri0qK(1@4PMSfs7aP3:Ycj2U&YYK&"&2@*"!O<lFE0/R!*3L69;d]^?#8:^ppMJ3S+m%U[?>qoXS_R'l>C%:!gQ`8@[YSPnNH9?Y!D]$@pd9O'Ct8-/q9RL0i_1F)!/anLr,LY`pEXirq5q72*$(S?6IKB*YeS4[;_5OL+S]%f(s>m<1_u_<,dVXU_S.tT`biV-=?!QK:k;nOF0JQj1MrSJGQo"F:=aNLV+uM8KuJh\i9\eDhWq.MP9>k>qr!6%+?s6M]&n[4/n:I%K>"QYWhZQK>WHj[Y(J<d'U@I:Y*'MhB<Bhug(?nBM^fV'+b1fbaaPL,b&ltQ,!B["k^dk<gp=""<d9^8dH#f&A<J#M&K^Mr4ea!D%V@4*C+q+CXk9;Mc?TIpXE`sHeZu%F#'t/3g/[m!U"4;.nlCHO$)_r:7)VVQ"Q:T[$Mh(h5oo66jZpD]AVBG+TQV^?(6W.-cTXQbE%aaI?@OOKu\k=]aYdUd2u&+$/kA_U"NSCOYf5j>Y5L=5RkjkQ8Y!&>U<6Re:hSHCq!`:h"<9>'D#WNWb;,U?u9,qI$=[7`3SW)oqM%Y#4K_h6L#;PGO().ht@6mF>`;<^;1g($EDJZpmI<_TpV&]&#PG^/:M3kt_C?@eDco;$F@f;58*;R&l7;P&`j7Ms/:b5@Q'$Uhm<3%19If.kefSsV\Ybs$QI@pS6"I8bKJ&e@kQstfWH5oJ3rUUjN-(RQkoAcK>"Rt"J]:!,oj5]eW6`bXb!7"V.DLbH,u^*kA%/!4Zrd#%k+=rf=lUQs18\u0D\peCTaC>"GR>aj!Y4n>5<(.+SV;`ED7Ypo*Oc..B[t0g!=>)r6Bkf#bjb*VqI,er`<eJ&b/itC+$J0ZOGJ6n%=a79LVChG_&hA_&L8Wg@iA@YRY%>pF&u'[H8!_(CpVah[)saE>?QZ]4"D-Gt"KrfHV;AMnS8EQ07SPHPc9SLl$9YYNAKW5FF"9p\%VnI7=X+n6_Y(!1LO=)359jXKX9"]'0dBGs8&uNi]TGeS2%JZA,E7_)i\&0D:YZq*V<=Jo3ib%BR;H0P.`OG\-K.Ne/'#('_2XRgc%!l,QsQK^9C%OtummK>6N5R++bd"_K?T#4a('OfiSJi'is\BQ^%T$nrH/*"f0g$l^C6O1A@BBAlQq^_,9DQQn(J@f1W<Xj<.2:jI^%*'Sj04hL@Se[64ng&8FcZ#]X/bnmR-J,/m!c(DTi='gB&n\96[0AaB0O73&oJ!n"L\GPO^qiA@q:VX[E01b/iG5:+7QYp&7q*0+EC]F~>%AI9_PrivateDataEnd