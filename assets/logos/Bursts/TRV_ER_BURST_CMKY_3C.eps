%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: TRV_ER_BURST_CMKY_3C.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: kati
%%CreationDate: 1/29/16
%%BoundingBox: 0 0 266 266
%%HiResBoundingBox: 0 0 265.7769 265.7823
%%CropBox: 0 0 265.7769 265.7823
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 11658 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD45FFA8FD74FFA8A8A8FD07FFA8A8A8FD68FFA8FD09FFA8A9A8A8%A8FD05FFFD05A8FD66FFFD05A8FD04FFFD08A8FFFD09A8FD05FFA8A8A8FD%5EFFA8A8A8A9A8FFFFFFA8A8A8FFFFFFA8FFA8FFA8FFA8FFFFFFA8A8A8FF%FFFFA8A9A8A8A8FD5BFFFD08A8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFF%A8FFA8A9A8FFA8A8A8FFA8A8A8FD52FFA8FD07FFA8A8A8FFFFFFA8FFA8FF%A8FD07FFA8FD09FFA8FFA8FD05FFA8A8A8FD50FFFD05A8FFA8FFA8A8A8FF%A8FFFFFFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%AFFFA8A9A8A8A8FFFD05A8FD4AFFA8FFA8A9A8FFA8FFA8FD1BFFA9FD09FF%A8FFA8A8A8FFA8A8A8FD48FFA8A8A8FFA8FFA8AFA8FFFFFFA8FFFFFFA8FF%A8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8A9%A8FFA8A9A8FFA8A8A8FD46FFA8A8A8FD07FFA9FD11FFA8FD09FFA8FD09FF%A8FD07FFA8FD42FFA8FFFFFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFAFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFFFFFA8FFA8FFA8A8A8FFA8FD3CFFA8A8A8FFA8FFA8FFA8FD09FFA8FD%2DFFAFFFA8FFA8FFA8FFA8FD37FFA9FD07A8FFA8FFA8FFFFFFA8FFFFFFA8%FD23FFA8FFFFFFA8FFFFFFA8FFA8FFFD07A8FD36FFA8AFA8FFA8FFFFFFA8%FD37FFA8FFA8FFA8FFA8FFA8AFFD35FFA8A8A8FFFFFFA8FFA8FFA8FFA8FF%A8FFA8FFA8FD27FFA8FFA8FFA8FFFFFFA8FFAFFFA8FFA8A8A8FD36FFA8FD%3FFFA8FD07FFA8A8A8FD34FFA8A8A8FFFFFFA8FFFFFFA8FD33FFA8FFA8FF%A8FFFFFFA8FFFFFFA8FD34FFA8FFA8FD09FFA8FD3FFFA8FFFFFFA8FD28FF%FD09A8FFA8FFA8FFA8FFA8FD39FFA8FFA8FFA8FFA8FFFD09A8FD26FFA8A8%A8FFA8FFA8FFA8FD49FFA8FFA8A9A8FFA8A9FD25FFA8A8A8FFA8FFFFFFA8%FFA8FFA8FD43FFA8FFA8FFA8FFFFFFA8A8A8FD26FFA8AFFD08FFA8FD45FF%A8FD07FFA8A8FD25FFA8A8A8FFAFFFA8FFA8FFA8FFA8FD43FFA8FFA8FFA8%FFA8FFA8A8A8FD26FFA8FD57FFA8FD26FFA8AFA8FFFFFFA8FD4BFFA8FFFF%FFA8FFFFFFA8FD22FFA8FFA8FFA8FD57FFA8FFA8FFA8FD1CFFFD07A8FFA8%FFA8FFA8FFA8FD4BFFA8FFA8FFA8FFA8FFFD05A8FFA8FD17FFA9A8FFA8FF%A8FFFFFFA8FD2FFFAFAF6185608BA9FD23FFA8FFA8FFA8FD18FFA8A8A8FF%FFFFA8FFFFFFA8FD2BFFA885141B141B3C61141B3CAFFD1AFFA8FFA8FFFF%FFAFFFFFFFA8A8FD19FFA8FD09FFA9FD27FFAF8B3D1B146185AFFD05FFAF%6185FD22FFA8A8A8FD18FFA8A8A8FFA8FFA8FFA8FFAFFD1BFFA9AFA8FD07%FFA8AF601B141B60AFFD0AFFA8AFFD1AFFA8FFA8FFA8FFA8FFA8A8FD19FF%A8FD25FF8561618B85AF85853C1B1A1B1A8BAFFD05FFA98B613D3C8BA9FD%23FFA9A8A8FD18FFA8FFA8FFA8FFFFFFA8FD1FFFA985141B141B141B1461%85FD05FFAF8B3C1B141B141B141B60FD1DFFA8FFFFFFA8FFA8FFAFFD18FF%A8FD29FF858B848B85FD07FFA93D141B1A1B141B1A1B141BAFFD21FFA8FF%A8FD16FFFD05A8FFAFFFA8FD21FF84FD0EFFAF141B141B141B141B141B14%85FD1CFFA8FFA8FFA8A8A8FFA8A8A8FD12FFA8A9A8FD27FF3D1B3CAFFD08%FF85FD04FF85141B1A1B1A1B1A1B1A1B3DFD24FFAFA8A9A8FD0EFFFD05A8%FFFFFFA8FFFFFFA8FD1FFF3C1B141B143D608584AF8461141BA9FFFFFFA9%1B141B141B141B141B141BA9FD1DFFA8FFFFFFA8FFFD06A8FD0DFFA8FD29%FF611B141B1A1B141B1A1B141B1A1B14AFFD04FF1A1B141B1A1B141B1A1B%14AFFD26FFA8A8FD0EFFA8A8FFFFFFA8FFA8FFA8FD1FFF841B141B141B14%1B141B141B141B141BA8FFFFFFA81B141B141B141B141B141B84FD1FFFA8%FFA8FFA8FFA8A8A8FD0EFFA8A9A8FD26FF611A1B1A1B1A1B1A1B1A1B1A1B%1A1B3CFD04FFAF1A1B1A1B1A1B1A1B1A1B14AFFD26FFA8FD10FFA8FFFFFF%A8FD22FF85141B141B141B141B141B141B141B14AFFD04FF601B141B141B%141B141B141B84FD1FFFA8FFFFFFA8FFA8A8A8FD10FFA8FD25FF3D1B141B%1A1B141B1A1B141B1A1B148BFD04FFAF1B141B1A1B141B1A1B141B1AAFFD%26FFA8FD10FFA8A8A8FFAFFFA8FD1FFFA81B141B141B141B141B141B141B%1485FD04FFAF3D141B141B141B141B141B141B84FD1FFFAFFFA8FFFFFFA8%FFA8FD0EFFA8FFA8FD24FF8B1A1B1A1B1A1B1A1B1A1B1A1B1AAFFD05FF8B%1A1B1A1B1A1B1A1B1A1B1A1B1AAFFD24FFA8FFA8FFA8FD0BFFFD04A8FFA8%FFA8FFA8FD1FFF601B141B141B141B141B141B36AFFD05FFAF141B141B14%1B141B141B141B141BA9FD21FFA8FFA8FFA8FFA8A8A8FD0AFFA8A8A8FD26%FF3D141B1A1B141B1A1B141B85FD07FF1A1B141B1A1B141B1A1B141B1A1B%3CFD29FFA8A8A8FD06FFFD05A8FFA8FFA8FFA8FD21FF141B141B141B141B%141B84FD07FF361B141B141B141B141B141B141B1461FD22FFAFFFA8FFA8%FFA8FFA8A8A8FD06FFA8FFAFFD28FF3D141B1A1B1A3D1A1BA9FD07FF851B%1A1B1A1B1A1B1A1B1A1B1A1B1A1B85FD2BFFA8FD07FFA8A8A9FFFFA8FFFF%FFA8FD21FF141B141B141B141B85FD08FF61141B141B141B141B141B141B%141B14AFFD24FFA8FFFFFFA8FFA8A8A8FD07FFA8A8FD28FF611A1B141B1A%1B60FD09FF1A1B141B1A1B141B1A1B141B1A1B1461FD2AFFA8A9A8FD08FF%A8A8A8FFA8FFA8FFA8FD21FF601B141B141B14FD09FF841B141B141B141B%141B141B141B141B84FD25FFA8FFA8FFFFFFA8A8FD09FFA8FD28FFAF1A1B%1A1B1A61FD09FFAF1A1B1A1B1A1B1A1B1A1B1A1B1A1B3CFD2BFFA8FD0AFF%A8FFA8FFA8FFA8FD23FFA93D141B141B60FD09FF841B141B141B141B141B%141B141B14AFFD28FFA8FFA8AFA8FD0AFFA8FFA8FFFFFFA8FD23FF841B1A%1B148BFD09FFAF141B1A1B141B1A1B141B1A1B148BFD28FFAFFFA8FFA8FF%A8FD07FFA8A8A9A8FFA8FFA8FFA8FD23FF141B141B60FD09FFA91B141B14%1B141B141B141B1461FD28FFA8FFA8FFA8FFA8A8A8FD06FFA8AFA8FD2BFF%1A1B143DFD0AFF3C1B1A1B1A1B1A1B1A1B1A61FD30FFA8A9A8FD04FFA8A8%A8FFFFFFA8FD28FFAF141B14AFFD09FF85141B141B141B141B1485FD2AFF%A8FFFFFFA8FFFFFFA8A8A8FFFFA8A9A8FD2FFF3C1B3CFD0AFF61141B1A1B%141B61AFFD34FFA8A8A8FFFD04A8FFA8FFA8FFA8FD29FF841B84FD0AFF85%143D3C85A8FD2FFFA8FFA8FFA8FFA8A8A8FD04FFA8FD31FFAFAFFD44FFA8%A8A8FD04FFA8A8A8FFAFFFFFFFA8FD6BFFA8FFFFFFFD04A8FD05FFA8FFA8%FD75FFA8FD08FFA8FFA8FFA8FFA8FD69FFA8FFA8FFA8FFA8A8A8FD08FFA8%FFA8FD71FFA8FFA8FD07FFA8A8FFFFFFA8FD6FFFAFFFA8A8A8FD06FFA8A8%FD76FFA8A8A8FD04FFA8A8A8FFA8FFA8FFA8FD31FFA961A8FD37FFA8FFA8%FFA8FFA8A8A8FFFFA8FFA8FD38FF8B3CFD3FFFA8FFFFA8A8A8FFFFFFA8FF%FFFFA8FD31FF14AFFD38FFA8FFFFFFA8FFA8A8A8FFFFA8A8A8FD17FFAFFF%FFFFAFFD1BFF853DFD16FFA9AFFD26FFA8A8A8FD04FFA8A8A8FFFFFFA8FF%AFFD0FFF841B143D141B84FFFF61143D141B60FD06FF6160FFFFFF14AFFD%05FF3D84FFFFAF36FD09FF6085FD05FFAF143D363DA9FD05FF8461FD16FF%A8FFA8FFA8FFA8A8A8AFFD05FFA8FFA8FD05FFAFFD11FF1BAFFD04FF3C8B%AFFF851B85FD05FF143DFFFFFF8B61FD04FFAF1AFFFFFF601BA9FD07FFAF%1B1AFD05FF6185FFFFAFFD06FF3D1AFD1DFFA8FD08FFA8FFA8FFA8FFA8FF%A8FD0FFFAF3DA9FD04FF6184FFFFFF843DFD04FF84613C8BFFFFA91BA9FF%FFFF3C85FFFFA93D6061FD07FF85603D84FD04FF3D84FD08FF85366160FD%15FFA8FFA8FFA8FFA8FD0AFFA8FFA8FD15FF1AFD05FF3DAFFFFFFF853CFD%04FF3DAFAF1AFFFFFF6085FFFFA93DAFFFFF6161FF14AFFD06FF1AFFA93D%FD04FF851B85FD07FF3DAFAF3DFD1AFFA8FD0AFFA8A8A8FFFFFFA8FFA8FD%0FFFAF3DA8FD04FF613C85848514AFFFFFFF8536FFFF3D84FFFFAF14FFFF%6160FFFFAF14AFFF853CFD05FF843DFFFF14AFFD04FF843D1485FD04FF84%3DFFFF3685FD14FFA8FFA8FFA8A9A8FD0AFFA8FD17FF1AFD05FF613D6161%1AAFFD04FF3C8BFFFF6161FFFFFF6185FF1AFFFFFF6161FFFFA91BAFFD04%FF3D85FFFF853CFD06FFAF148BFFFFFF6161FFFFAF1BFD19FFA8A9A8FD08%FFA8A8A8FFFFFFA8FD11FFAF3DA9FD04FF6184FFFF3D84FFFFFF851B3C61%3C6114AFFFFF843D6061FFFFFF3D36613C611485FFFFFFAF14613C613C1B%A8FD06FFAF14FFFFAF14613C613C1B85FD15FFA8FFFFFFA8A8A8FD06FFA8%A8A8FD17FF1AAFFD04FF3CAFFFFF851BFFFFFF6185FD04FF853CFFFFFF3C%1BAFFFFF8B3DFD04FFAF14FFFFFF3C8BFD04FF6161FFFF8585FFFF6161FF%FF6161FD04FF853DFD1AFFA8FD06FFA8A8A8FFFFFFA8FFA8FFA8FD0FFFA8%3DA9FD04FF6184FFFFFF1485FFAF14FD05FFA91BA8FFFF8536FFFFFF14AF%FD05FF3D84FFA93DA8FD04FFAF14AFFFAF143D143DA9FFA83DA9FD05FF14%AFFD10FFA8FFA8FFA8FFA8FFA8A8A8FD06FFA8FFA8FD17FFAFFD05FFAFFD%05FFAFFD09FFAFFD07FF853DFD06FFAFFFFFFFAFFD0BFFAFFD05FFAFFD1F%FFA8AFA8FFA9FD06FFA8A8A8A9A8FFFFFFA8FFA9FD2CFF3D84FD35FFA8FF%A8FFFFFFFD05A8FD08FFA8A8A8FFA8FFFFFFA8FD2CFFAF1AFD35FFA8FFFF%FFA8FFA8A8A8FD0CFFA8FFA8A8A8FFA8FFA8FD2BFF848BFD36FFA8FFA8A8%A8FFA8FD10FFA8FD6BFFA8FFA8FD10FFA8FFA8FFFFFFA8FD08FFCAA1CAFF%CAFFCACAFFA1C3FFFFA1C3A8FFA1C3A1FFCACAFFCAA1C3FFFFCAFFA7FFCA%C3A1FFCACAFFFFCAFFFFFFA7FD05FFA1C3CAFFCAC3A1CFFFCAA1FFFFCFA1%C9FFFFCAC3A1FFCAC3A1FFFFC3A1FFA1CAFD08FFA8FFFFFFA8FFA9FD0EFF%A8A8A8FD0DFF9AC3CAFFA1BC9AFFA1C39AC3FFBCC3CFFFBCC39ACACA9AFF%9AC3C9FFA1BCFFC3CAFF9AC3FFC3A1FFFFBCC3FFCABCFD05FFC3A1BCFFCA%9ACAFFCA93CAFFFF9ACA9AC3FFC3A19AA1FF9AC3FFC994CACAB6A1FD0DFF%A8FD0FFFA8A8FFFFFFA8FFA8FFA8FD06FF9A9ACAFFFF8DC3FFC39A9AA1FF%93C3CAFF9AC39AFFA1C3FFC393CAFFCA9AC39ACAFFC3A1FFA0C3FFC393C3%FFCA9AFD05FF9A9A9AFFA19AA1FFCA9A9AFFA1C3FFFF9AFF9ABC94CAFFC3%A1FFA8BCA1FFA8FD07FFA8FFA8FFA8FFA8A8A8FD0EFFA8FD0FFF9AC3CAFF%A1BC9AFFA1BCCAFFCABCC3FFFFC39ABCFFCA9AFF9AC3CAFFA1CACA94CAFF%9AC3FFC3A1FF9AC394CAFFBCCAFD04FFC39AC3FFCA9ACAFFFFC3BCC9FF9A%CAA1C3FFC39ABCFFFFC3CAFFFFC394CAFD0FFFA8FD0EFFA8A8A8FFFFFFA8%FFFFFFA8FD06FFC39ACAFFC3FD04CAA1FFFFFFA0C3A8FFA1FFA1FFA8CAFF%CA9AC3FFCAA8FFA1FFFFCACAFFA7CACAC9FFCAA7FFA0C3CAFFFFFFA7FFA1%FFCAC39AFFCAC39AFFFFCA9AC3FFFFA1FFA1CAFFCACAFFA8C3A1FD09FFA8%FFFFFFAFFFA8A8A8FD0EFFA8A8A8FD07FFA8FD5BFFA8FD07FFA8AFA8A8A8%FD0CFFA8FFFD05A8FFA8FFA8FFA8FD5BFFA8FFA8FFA8FFFD05A8FD10FFA8%FFA8FFA8FD63FFA8FFA8FFA8FD16FFA8FFA8FFFFFFA8FD5BFFA8FFFFFFA8%FFA8FD18FFA8FD63FFAFFFA8FD18FFA8A8A8FFA8FFA8FFA8FD55FFA8FFA8%FFA8FFA8FFA8FD1AFFA8FD63FFA8A8A8FD18FFA8A8A8FFA8FFFFFFA8FFA9%FD51FFA8FFFFFFA8FD05FFA8A8FD18FFA8A8FD09FFAFFD51FFA8FD07FFA8%A8A8FD18FFFD05A8FFA8FFA8FFA8FFA8FD4DFFA8FFFFFFA8FFA8FFFD06A8%FD19FFA8FFA8A8A8FFA8FD57FFA8FFA8FFA8A8A8FFA8FD1AFFA8FFA8A8A8%FFA8FFA8FFFFFFA8FD4BFFA8FFFFFFA8FFA8AFA8FFA8FD22FFA8FD57FFA8%FFA8FD24FFA8A8A8FFAFFFA8FFA8FFA8FD47FFA8FFA8FFA8FFA8A8A8FD26%FFA8FD09FFAFFD4DFFA8A9FD25FFA8A8A8FFFFFFA8FFFFFFA8FD43FFA8FF%A8FFAFFFFFFFA8FFA8A8A8FD26FFA8A8A8FD4DFFA8FD07FFA8A8FD25FFFD%07A8FFA8FFA8FFA8FFA8FFA8FD3BFFA8FFA8FFA8FFA8FFA8FFFD05A8FD26%FFA8A9A8FFA8AFA8FFA8FD49FFA8FFA8A8A8FFA8FD2AFFA8FFA8AFA8FFFF%FFA8FFFFFFA8FD37FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FD30FFA8%FD09FFA8FD35FFA9FD07FFA8FFA8FD34FFA8A8A8FFAFFFA8FFAFFFA8FFAF%FFA8FD2FFFA8FFA8FFA8FFA8FFA8FFFFA87EFD36FFA8FD07FFA8FD37FFA8%FD07FFA8A9A8FD35FFA8A8FFA8A8A8FFA8A8A8FFFFFFA8FFFFFFA8FFA9FD%23FFA8FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8A8A8FD36FFFD07A8FFA8FD%09FFA8FD23FFA8FD0BFFA8FFA8A8A8A9A8FD38FFFD05A8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD13FFA8FFA8FFA8FFA8FFA8FFAFFF%A8FFA8FFA8FFA8A8A8FFFD05A8FD3EFFA8A9FD08FFAFFD1BFFA8FD11FFA8%FFAFFD45FFA9A8A8A8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFAFFFFFFF%A8A8A8FD46FFA8A8A8FFA8FFA8FFA8FD13FFA8FD13FFA8FFA8FFA8FFFFA8%A8FD48FFFD07A8A9A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD0BA8FD48FFA8A8A8FFA8FFA8FF%A8FD07FFA8FD09FFA8FD09FFA8FD07FFA8AFA8FFFFFFA8FFA8A8A8FD4AFF%A8FD05FFA8A8A8FFFFFFA8FFA8FFA8FD05FFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFA8FFA8FFFFFFA8A8A8FD05FFA8FFA8FD52FFA8A8A8FFA8A9A8FFA8FF%A8FD05FFA9FFA8FFA8FD05FFA8FFA8FFA8A8A8FFFFA8A8FD5CFFFD07A8FF%FD05A8FFA8A8A8FFA8A8A8FFA8FFA8A8A8FFA8FFFD07A8FD5CFFA8A8A8FD%05FFA8A8A8FFA8A8A8FFFFFFA8A9A8FFA8FFA8FD05FFA8FFA8A8FD5FFFA9%FD07FFFD05A8AFFD04FFFD05A8AFFD08FFA8FD68FFA8A8A8FD07FFA8FFA8%FD74FFA8FD09FFA8FD3AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (PANTONE 877 C)
%%CMYKCustomColor: 0 0 0 0.4000 (PANTONE 877 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic CMYK</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2016-01-29T11:57:59-06:00</xmp:CreateDate>
         <xmp:ModifyDate>2016-01-29T11:58-06:00</xmp:ModifyDate>
         <xmp:MetadataDate>2016-01-29T11:58-06:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqoXt5FaW5mk3AoAvck9hiq211KzuqelICx/YOzfccVVp54oImlkbiiCpOKsauNYvp7n1&#xA;4KpHAKhRvQHYlvnhVNdO1yG5UrNSKZRU/wArAeH9MCu1HXILYBYqSzMKgfsgHx/piqV22tXsFx6t&#xA;wC8c4BK9NhsCuFWSQzRzRLLG3JHFVOBVK61CztgfWkAb+Qbt9wxVdZ3cd1brNH0bqO4I7HFVbFXY&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:0280117407206811822AAEA08B78DF40</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0280117407206811822AAEA08B78DF40</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:F77F1174072068118A6DCFE594349806</stRef:instanceID>
            <stRef:documentID>xmp.did:F77F1174072068118A6DCFE594349806</stRef:documentID>
            <stRef:originalDocumentID>uuid:1EAC443944C411E08F4FF2B2A9F497D5</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118A6DCFE594349806</stEvt:instanceID>
                  <stEvt:when>2013-07-18T16:30:17-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0280117407206811822AAEA08B78DF40</stEvt:instanceID>
                  <stEvt:when>2016-01-29T11:58-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:1EAC443944C411E08F4FF2B2A9F497D5</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.000000</stDim:w>
            <stDim:h>4.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 877 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 877 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>40.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -265.782 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 265.782 li
265.777 265.782 li
265.777 0 li
cp
clp
250.802 132.891 mo
250.802 198.014 198.01 250.805 132.888 250.805 cv
67.7661 250.805 14.9741 198.014 14.9741 132.891 cv
14.9741 67.769 67.7661 14.9771 132.888 14.9771 cv
198.01 14.9771 250.802 67.769 250.802 132.891 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
130.972 18.0977 mo
135.628 4.63086 123.104 4.37793 121.346 .21875 cv
121.313 .149902 121.284 .074707 121.26 0 cv
121.251 .074707 121.235 .158203 121.22 .230469 cv
120.201 4.63086 107.914 7.05859 114.843 19.501 cv
117.494 19.0869 120.173 18.7534 122.885 18.5205 cv
125.591 18.2817 128.291 18.1436 130.972 18.0977 cv
cp
/0 
<<
/Name (PANTONE 877 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 .4 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
.5 sep
f
98.6221 4.39502 mo
98.582 4.33154 98.5459 4.26563 98.5088 4.19385 cv
98.5088 4.27441 98.5088 4.35449 98.5059 4.42969 cv
98.2715 8.9165 86.7178 13.4121 95.4277 24.3389 cv
100.53 22.5815 105.812 21.1636 111.237 20.1309 cv
113.343 6.27881 101.067 8.16602 98.6221 4.39502 cv
cp
f
76.9688 12.4775 mo
76.915 12.4199 76.8643 12.3623 76.8154 12.2959 cv
76.832 12.3735 76.8447 12.457 76.8574 12.5293 cv
77.3984 16.9644 66.9199 23.3525 77.1016 32.5132 cv
81.8936 29.8442 86.9111 27.5059 92.1133 25.5356 cv
91.6504 11.8242 80.0127 15.7476 76.9688 12.4775 cv
cp
f
57.0459 24.2095 mo
56.9854 24.1665 56.9238 24.1147 56.8662 24.063 cv
56.8965 24.1377 56.9238 24.2095 56.9482 24.2871 cv
58.2412 28.5298 49.1504 36.5742 60.46 43.7998 cv
64.7764 40.2793 69.3574 37.0693 74.1787 34.1929 cv
71.2617 21.0889 60.5908 26.8872 57.0459 24.2095 cv
cp
f
39.4131 39.2549 mo
39.3408 39.2148 39.2764 39.1802 39.209 39.1372 cv
39.252 39.1978 39.291 39.2695 39.3271 39.3413 cv
41.3271 43.2764 33.8589 52.6958 45.9844 57.8643 cv
49.6631 53.6021 53.6631 49.604 57.9336 45.9106 cv
52.7646 33.7847 43.3467 41.2627 39.4131 39.2549 cv
cp
f
24.5112 56.9956 mo
24.4395 56.9697 24.3647 56.9438 24.29 56.9126 cv
24.3457 56.9697 24.3921 57.0361 24.4409 57.0996 cv
27.1016 60.6255 21.3804 71.1987 34.2158 74.1816 cv
37.1094 69.3291 40.3506 64.7041 43.9111 60.332 cv
36.7139 49.2905 28.7349 58.2871 24.5112 56.9956 cv
cp
f
12.7461 76.96 mo
12.667 76.9482 12.5923 76.9399 12.5132 76.9194 cv
12.5776 76.9683 12.6367 77.0205 12.6943 77.0747 cv
15.9399 80.1035 12.0874 91.6143 25.4995 92.2124 cv
27.4912 86.9663 29.8569 81.8926 32.5679 77.0347 cv
23.4902 67.1519 17.1509 77.5005 12.7461 76.96 cv
cp
f
4.62646 98.6094 mo
4.54883 98.6123 4.46826 98.6123 4.39355 98.6123 cv
4.45947 98.6494 4.52979 98.6841 4.59619 98.73 cv
8.34082 101.164 6.50146 113.301 20.082 111.38 cv
21.1216 105.909 22.5557 100.568 24.3486 95.3823 cv
13.5542 86.9492 9.08594 98.3765 4.62646 98.6094 cv
cp
f
.409668 121.334 mo
.332031 121.349 .257324 121.366 .179688 121.378 cv
.25293 121.404 .326172 121.433 .399902 121.461 cv
4.53564 123.219 4.80908 135.627 18.0771 131.151 cv
18.1577 125.626 18.6367 120.181 19.4766 114.849 cv
7.20654 108.17 4.78467 120.328 .409668 121.334 cv
cp
f
18.0913 134.807 mo
4.62646 130.15 4.37451 142.674 .214355 144.439 cv
.146484 144.469 .0717773 144.497 0 144.518 cv
.0791016 144.525 .153809 144.543 .231445 144.561 cv
4.62793 145.576 7.05664 157.865 19.501 150.934 cv
19.084 148.288 18.75 145.61 18.5142 142.898 cv
18.2769 140.188 18.1377 137.488 18.0913 134.807 cv
cp
f
4.39648 167.156 mo
4.33154 167.193 4.2627 167.236 4.19482 167.273 cv
4.27393 167.271 4.35303 167.271 4.43213 167.273 cv
8.91357 167.51 13.4121 179.059 24.333 170.349 cv
22.5728 165.243 21.165 159.969 20.1265 154.535 cv
6.27588 152.436 8.16406 164.705 4.39648 167.156 cv
cp
f
12.4741 188.816 mo
12.4194 188.866 12.3594 188.918 12.2974 188.964 cv
12.3735 188.946 12.4541 188.936 12.5317 188.924 cv
16.96 188.383 23.3491 198.855 32.5103 188.682 cv
29.8423 183.885 27.5039 178.874 25.5293 173.662 cv
11.8228 174.134 15.7461 185.766 12.4741 188.816 cv
cp
f
24.2109 208.732 mo
24.1646 208.793 24.1143 208.855 24.0625 208.914 cv
24.1357 208.885 24.208 208.859 24.2827 208.836 cv
28.5278 207.533 36.5669 216.631 43.7939 205.324 cv
40.2744 201.004 37.0635 196.422 34.1914 191.602 cv
21.0845 194.518 26.8857 205.186 24.2109 208.732 cv
cp
f
39.249 226.367 mo
39.2148 226.436 39.1777 226.504 39.1338 226.568 cv
39.2002 226.527 39.2725 226.49 39.3398 226.453 cv
43.2715 224.448 52.6943 231.924 57.8584 219.797 cv
53.5977 216.115 49.5977 212.121 45.9102 207.844 cv
33.7842 213.016 41.2539 222.438 39.249 226.367 cv
cp
f
56.9883 241.266 mo
56.9639 241.34 56.9395 241.415 56.9121 241.49 cv
56.9688 241.436 57.0303 241.387 57.0918 241.337 cv
60.6201 238.683 71.1973 244.4 74.1787 231.566 cv
69.3301 228.673 64.6982 225.429 60.334 221.871 cv
49.29 229.067 58.2852 237.046 56.9883 241.266 cv
cp
f
76.96 253.035 mo
76.9463 253.109 76.9355 253.188 76.9189 253.266 cv
76.9688 253.202 77.0176 253.145 77.0732 253.087 cv
80.0977 249.84 91.6094 253.69 92.2109 240.282 cv
86.9629 238.288 81.8896 235.927 77.0283 233.212 cv
67.1475 242.295 77.5 248.632 76.96 253.035 cv
cp
f
98.6074 261.154 mo
98.6123 261.227 98.6123 261.307 98.6074 261.388 cv
98.6436 261.315 98.6797 261.25 98.7256 261.184 cv
101.162 257.438 113.297 259.279 111.377 245.7 cv
105.909 244.659 100.563 243.227 95.3789 241.436 cv
86.9492 252.224 98.376 256.69 98.6074 261.154 cv
cp
f
121.333 265.374 mo
121.354 265.446 121.366 265.523 121.373 265.602 cv
121.403 265.526 121.428 265.449 121.461 265.38 cv
123.216 261.244 135.621 260.971 131.151 247.699 cv
125.624 247.628 120.181 247.15 114.849 246.299 cv
108.168 258.569 120.329 260.996 121.333 265.374 cv
cp
f
134.804 247.691 mo
130.15 261.154 142.667 261.405 144.433 265.564 cv
144.462 265.63 144.492 265.708 144.513 265.782 cv
144.523 265.702 144.541 265.627 144.558 265.547 cv
145.572 261.151 157.859 258.725 150.933 246.284 cv
148.289 246.698 145.607 247.029 142.898 247.269 cv
140.183 247.501 137.484 247.643 134.804 247.691 cv
cp
f
167.148 261.385 mo
167.191 261.451 167.234 261.518 167.271 261.589 cv
167.265 261.512 167.265 261.428 167.271 261.348 cv
167.509 256.866 179.052 252.368 170.345 241.446 cv
165.246 243.204 159.964 244.622 154.539 245.654 cv
152.435 259.501 164.705 257.614 167.148 261.385 cv
cp
f
188.812 253.303 mo
188.861 253.36 188.912 253.424 188.958 253.483 cv
188.941 253.406 188.929 253.328 188.923 253.254 cv
188.376 248.818 198.853 242.431 188.675 233.272 cv
183.878 235.938 178.869 238.274 173.662 240.253 cv
174.128 253.961 185.769 250.032 188.812 253.303 cv
cp
f
208.73 241.57 mo
208.792 241.616 208.849 241.665 208.908 241.717 cv
208.878 241.646 208.849 241.57 208.83 241.492 cv
207.533 237.25 216.621 229.211 205.318 221.988 cv
200.998 225.506 196.416 228.714 191.599 231.59 cv
194.517 244.691 205.185 238.896 208.73 241.57 cv
cp
f
226.361 226.53 mo
226.433 226.564 226.503 226.603 226.564 226.643 cv
226.521 226.576 226.488 226.51 226.449 226.441 cv
224.445 222.504 231.917 213.084 219.796 207.921 cv
216.109 212.181 212.117 216.179 207.843 219.872 cv
213.011 231.998 222.425 224.523 226.361 226.53 cv
cp
f
241.265 208.789 mo
241.333 208.811 241.41 208.839 241.484 208.867 cv
241.431 208.811 241.38 208.75 241.332 208.686 cv
238.677 205.16 244.394 194.587 231.564 191.602 cv
228.673 196.453 225.431 201.082 221.869 205.45 cv
229.062 216.489 237.042 207.498 241.265 208.789 cv
cp
f
253.035 188.826 mo
253.109 188.832 253.187 188.843 253.261 188.86 cv
253.203 188.816 253.144 188.763 253.087 188.711 cv
249.837 185.682 253.693 174.168 240.281 173.567 cv
238.289 178.816 235.921 183.885 233.208 188.751 cv
242.289 198.634 248.626 188.279 253.035 188.826 cv
cp
f
261.148 167.174 mo
261.226 167.168 261.306 167.168 261.382 167.168 cv
261.312 167.133 261.25 167.093 261.181 167.053 cv
257.435 164.622 259.277 152.481 245.697 154.402 cv
244.654 159.871 243.226 165.217 241.427 170.4 cv
252.218 178.83 256.693 167.403 261.148 167.174 cv
cp
f
265.365 144.445 mo
265.443 144.426 265.517 144.414 265.599 144.399 cv
265.523 144.382 265.449 144.354 265.375 144.318 cv
261.242 142.564 260.964 130.156 247.693 134.629 cv
247.623 140.154 247.144 145.602 246.298 150.934 cv
258.568 157.613 260.99 145.455 265.365 144.445 cv
cp
f
265.544 121.223 mo
261.146 120.204 258.724 107.917 246.275 114.846 cv
246.695 117.492 247.023 120.172 247.265 122.885 cv
247.501 125.6 247.636 128.298 247.685 130.973 cv
261.148 135.629 261.4 123.106 265.558 121.346 cv
265.632 121.314 265.703 121.289 265.777 121.263 cv
265.699 121.251 265.621 121.24 265.544 121.223 cv
cp
f
261.382 98.6265 mo
261.445 98.5835 261.519 98.5459 261.578 98.5117 cv
261.503 98.5117 261.427 98.5117 261.347 98.5117 cv
256.863 98.27 252.367 86.7246 241.443 95.4341 cv
243.201 100.537 244.613 105.817 245.652 111.242 cv
259.496 113.347 257.609 101.071 261.382 98.6265 cv
cp
f
253.296 76.9683 mo
253.363 76.9165 253.417 76.8647 253.478 76.8188 cv
253.404 76.8359 253.322 76.8506 253.248 76.8594 cv
248.818 77.3999 242.427 66.9248 233.263 77.1035 cv
235.939 81.8984 238.275 86.9146 240.244 92.1206 cv
253.955 91.6489 250.033 80.0117 253.296 76.9683 cv
cp
f
241.564 57.0479 mo
241.611 56.9844 241.666 56.9238 241.716 56.8662 cv
241.644 56.9009 241.564 56.9238 241.49 56.9497 cv
237.248 58.2412 229.21 49.1494 221.98 60.4644 cv
225.498 64.7788 228.712 69.3608 231.583 74.1816 cv
244.693 71.2622 238.89 60.5967 241.564 57.0479 cv
cp
f
226.521 39.4131 mo
226.562 39.3472 226.603 39.2783 226.642 39.209 cv
226.574 39.2549 226.509 39.2954 226.435 39.3271 cv
222.501 41.332 213.083 33.8623 207.916 45.9824 cv
212.177 49.667 216.179 53.6621 219.873 57.9419 cv
231.992 52.7676 224.519 43.3452 226.521 39.4131 cv
cp
f
208.787 24.5117 mo
208.81 24.4365 208.833 24.3706 208.867 24.2959 cv
208.804 24.3447 208.746 24.3965 208.683 24.4424 cv
205.158 27.1001 194.583 21.3794 191.599 34.2188 cv
196.451 37.1123 201.078 40.354 205.441 43.9146 cv
216.49 36.7124 207.486 28.7397 208.787 24.5117 cv
cp
f
188.82 12.7417 mo
188.826 12.6699 188.839 12.5923 188.861 12.5146 cv
188.812 12.5752 188.757 12.6411 188.705 12.6958 cv
185.675 15.9434 174.166 12.0859 173.568 25.501 cv
178.81 27.4912 183.878 29.8584 188.746 32.5737 cv
198.634 23.4932 188.273 17.1543 188.82 12.7417 cv
cp
f
167.173 4.63086 mo
167.167 4.55029 167.162 4.47559 167.167 4.39502 cv
167.13 4.46387 167.093 4.53027 167.046 4.60205 cv
164.617 8.34131 152.478 6.50049 154.396 20.082 cv
159.871 21.123 165.212 22.5557 170.394 24.3477 cv
178.832 13.5586 167.404 9.08887 167.173 4.63086 cv
cp
f
144.439 .414063 mo
144.425 .333984 144.41 .255859 144.396 .178711 cv
144.376 .255859 144.347 .331055 144.318 .405762 cv
142.564 4.53613 130.15 4.80908 134.63 18.0801 cv
140.15 18.1636 145.595 18.6382 150.931 19.478 cv
157.609 7.20801 145.453 4.78613 144.439 .414063 cv
cp
f
140.597 23.8184 mo
146.138 11.4272 134.271 10.1533 132.946 6.05762 cv
132.925 5.98828 132.905 5.91943 132.885 5.84473 cv
132.871 5.91943 132.853 5.98828 132.831 6.06348 cv
131.499 10.1533 119.639 11.4302 125.177 23.8184 cv
127.724 23.6401 130.296 23.5508 132.885 23.5508 cv
135.482 23.5508 138.048 23.6401 140.597 23.8184 cv
cp
1 /0 /CSD get_res sepcs
.3 sep
f
111.049 8.13721 mo
111.013 8.07666 110.984 8.00488 110.95 7.93848 cv
110.947 8.01074 110.942 8.08789 110.931 8.16309 cv
110.336 12.394 99.0049 15.7046 106.356 26.7896 cv
111.35 25.5469 116.471 24.6436 121.711 24.1118 cv
124.853 11.1455 113.051 11.9194 111.049 8.13721 cv
cp
f
89.8281 14.0073 mo
89.7793 13.9502 89.7393 13.8867 89.7012 13.8232 cv
89.709 13.9009 89.7139 13.9731 89.7188 14.0479 cv
89.8652 18.2988 79.3975 23.4873 88.2949 33.0283 cv
93.0654 30.8911 98.0107 29.0903 103.115 27.6465 cv
103.808 14.603 92.4453 17.3584 89.8281 14.0073 cv
cp
f
69.9521 23.4873 mo
69.8994 23.4385 69.8457 23.3838 69.7959 23.332 cv
69.8184 23.4014 69.8379 23.4761 69.8496 23.5508 cv
70.7285 27.6841 61.4365 34.5581 71.5654 42.3501 cv
75.9531 39.3701 80.5693 36.707 85.3809 34.3828 cv
83.6982 21.6987 73.0957 26.3179 69.9521 23.4873 cv
cp
f
51.9727 36.2896 mo
51.9121 36.2495 51.8496 36.2119 51.79 36.1631 cv
51.8252 36.2324 51.8574 36.2983 51.8877 36.3672 cv
53.458 40.2676 45.5889 48.5859 56.665 54.4937 cv
60.5117 50.7515 64.6318 47.2969 68.9971 44.1504 cv
65.0996 32.2139 55.542 38.5215 51.9727 36.2896 cv
cp
f
36.3657 51.8877 mo
36.2954 51.8589 36.2305 51.8242 36.1631 51.7954 cv
36.2075 51.853 36.252 51.9165 36.291 51.9766 cv
38.5205 55.5464 32.2139 65.1011 44.1445 68.9956 cv
47.291 64.6353 50.7539 60.5137 54.4922 56.6738 cv
48.5801 45.5889 40.2627 53.4668 36.3657 51.8877 cv
cp
f
23.5449 69.8555 mo
23.4702 69.8384 23.3994 69.8184 23.3306 69.7949 cv
23.3838 69.8496 23.4385 69.9043 23.4873 69.9561 cv
26.3159 73.1001 21.7026 83.7046 34.3784 85.3813 cv
36.7007 80.5693 39.3711 75.9561 42.3457 71.5698 cv
34.5522 61.4365 27.6826 70.7329 23.5449 69.8555 cv
cp
f
14.0444 89.7188 mo
13.9683 89.7158 13.8979 89.7104 13.8247 89.7017 cv
13.8848 89.7393 13.9468 89.7852 14.0073 89.8281 cv
17.3564 92.4541 14.6025 103.813 27.6479 103.119 cv
29.0874 98.0166 30.8892 93.064 33.0249 88.2949 cv
23.4844 79.396 18.293 89.8711 14.0444 89.7188 cv
cp
f
8.15674 110.937 mo
8.08203 110.943 8.00732 110.951 7.93555 110.951 cv
8.00439 110.983 8.0708 111.012 8.13818 111.052 cv
11.916 113.06 11.144 124.855 24.1113 121.711 cv
24.6406 116.474 25.5439 111.351 26.7866 106.361 cv
15.6997 99.0063 12.3921 110.339 8.15674 110.937 cv
cp
f
23.814 125.177 mo
11.4287 119.641 10.146 131.508 6.0542 132.834 cv
5.98975 132.851 5.91504 132.874 5.84277 132.892 cv
5.91504 132.906 5.98975 132.932 6.06152 132.946 cv
10.146 134.277 11.4287 146.137 23.814 140.603 cv
23.6353 138.055 23.5449 135.482 23.5449 132.892 cv
23.5449 130.3 23.6353 127.729 23.814 125.177 cv
cp
f
8.13232 154.73 mo
8.0708 154.768 8.00293 154.8 7.93555 154.828 cv
8.00732 154.828 8.08496 154.84 8.1582 154.852 cv
12.3921 155.443 15.6997 166.773 26.7866 159.422 cv
25.541 154.432 24.6406 149.307 24.1113 144.068 cv
11.144 140.925 11.916 152.723 8.13232 154.73 cv
cp
f
14.0073 175.957 mo
13.9468 175.998 13.8848 176.038 13.8247 176.084 cv
13.8979 176.069 13.9712 176.061 14.0474 176.061 cv
18.293 175.917 23.4873 186.384 33.022 177.484 cv
30.8892 172.719 29.0874 167.764 27.6465 162.664 cv
14.6011 161.971 17.3564 173.334 14.0073 175.957 cv
cp
f
23.4844 195.826 mo
23.4341 195.879 23.3838 195.934 23.3276 195.982 cv
23.3994 195.962 23.4731 195.941 23.5464 195.93 cv
27.6826 195.047 34.5522 204.344 42.3457 194.216 cv
39.3682 189.826 36.7007 185.211 34.377 180.404 cv
21.6968 182.084 26.3174 192.686 23.4844 195.826 cv
cp
f
36.2896 213.809 mo
36.248 213.869 36.2075 213.93 36.1631 213.987 cv
36.2305 213.953 36.2954 213.921 36.3687 213.895 cv
40.2676 212.318 48.5801 220.191 54.4922 209.117 cv
50.7471 205.271 47.291 201.147 44.1416 196.781 cv
32.2124 200.682 38.5205 210.239 36.2896 213.809 cv
cp
f
51.8877 229.415 mo
51.8545 229.481 51.8252 229.551 51.79 229.616 cv
51.8496 229.57 51.9121 229.53 51.9727 229.49 cv
55.542 227.261 65.0996 233.568 68.9971 221.633 cv
64.6318 218.491 60.5088 215.022 56.6602 211.289 cv
45.5859 217.199 53.4619 225.516 51.8877 229.415 cv
cp
f
69.8496 242.237 mo
69.835 242.307 69.8184 242.382 69.7939 242.453 cv
69.8457 242.39 69.8994 242.341 69.957 242.295 cv
73.0996 239.465 83.6963 244.075 85.3809 231.405 cv
80.5664 229.079 75.9502 226.412 71.5654 223.433 cv
61.4365 231.228 70.7324 238.102 69.8496 242.237 cv
cp
f
89.7188 251.735 mo
89.7139 251.81 89.709 251.885 89.6973 251.959 cv
89.7393 251.894 89.7793 251.827 89.8281 251.772 cv
92.4492 248.422 103.808 251.177 103.115 238.139 cv
98.0107 236.698 93.0654 234.892 88.291 232.758 cv
79.3975 242.295 89.8652 247.486 89.7188 251.735 cv
cp
f
110.931 257.623 mo
110.942 257.697 110.947 257.77 110.95 257.844 cv
110.984 257.781 111.013 257.706 111.049 257.643 cv
113.055 253.866 124.853 254.634 121.711 241.668 cv
116.471 241.139 111.35 240.238 106.351 238.993 cv
99.0049 250.084 110.336 253.389 110.931 257.623 cv
cp
f
125.177 241.965 mo
119.639 254.353 131.501 255.632 132.831 259.72 cv
132.853 259.788 132.871 259.863 132.885 259.938 cv
132.905 259.863 132.925 259.788 132.946 259.72 cv
134.275 255.632 146.136 254.35 140.597 241.965 cv
138.048 242.146 135.482 242.237 132.885 242.237 cv
130.296 242.237 127.724 242.146 125.177 241.965 cv
cp
f
154.73 257.643 mo
154.765 257.706 154.794 257.781 154.822 257.844 cv
154.828 257.77 154.837 257.691 154.845 257.623 cv
155.443 253.389 166.771 250.078 159.419 238.993 cv
154.431 240.238 149.302 241.139 144.068 241.668 cv
140.925 254.634 152.722 253.866 154.73 257.643 cv
cp
f
175.945 251.778 mo
175.992 251.836 176.039 251.894 176.078 251.959 cv
176.07 251.885 176.06 251.81 176.058 251.732 cv
175.914 247.486 186.378 242.295 177.484 232.758 cv
172.712 234.892 167.763 236.698 162.664 238.139 cv
161.966 251.177 173.333 248.422 175.945 251.778 cv
cp
f
195.82 242.295 mo
195.878 242.347 195.929 242.396 195.982 242.453 cv
195.962 242.382 195.941 242.307 195.923 242.231 cv
195.046 238.102 204.339 231.228 194.21 223.433 cv
189.824 226.412 185.207 229.079 180.398 231.405 cv
182.078 244.084 192.685 239.462 195.82 242.295 cv
cp
f
213.802 229.49 mo
213.861 229.53 213.923 229.57 213.982 229.616 cv
213.949 229.551 213.917 229.481 213.892 229.412 cv
212.312 225.516 220.185 217.197 209.115 211.289 cv
205.267 215.022 201.148 218.491 196.781 221.633 cv
200.679 233.568 210.236 227.261 213.802 229.49 cv
cp
f
229.412 213.895 mo
229.478 213.921 229.548 213.953 229.617 213.987 cv
229.564 213.93 229.525 213.869 229.49 213.803 cv
227.257 210.239 233.562 200.682 221.632 196.781 cv
218.486 201.147 215.025 205.271 211.283 209.117 cv
217.195 220.191 225.515 212.318 229.412 213.895 cv
cp
f
242.232 195.93 mo
242.304 195.947 242.375 195.962 242.447 195.982 cv
242.392 195.934 242.341 195.879 242.289 195.826 cv
239.458 192.68 244.072 182.084 231.4 180.404 cv
229.078 185.211 226.404 189.826 223.429 194.216 cv
231.224 204.344 238.101 195.047 242.232 195.93 cv
cp
f
251.73 176.061 mo
251.804 176.061 251.878 176.069 251.958 176.084 cv
251.89 176.038 251.83 175.998 251.775 175.945 cv
248.421 173.328 251.171 161.971 238.126 162.664 cv
236.687 167.769 234.886 172.719 232.755 177.487 cv
242.294 186.384 247.484 175.911 251.73 176.061 cv
cp
f
257.623 154.852 mo
257.695 154.84 257.767 154.828 257.843 154.828 cv
257.775 154.8 257.703 154.768 257.642 154.73 cv
253.861 152.721 254.63 140.925 241.667 144.068 cv
241.138 149.307 240.232 154.432 238.988 159.422 cv
250.078 166.773 253.386 155.443 257.623 154.852 cv
cp
f
259.72 132.834 mo
255.628 131.499 254.347 119.644 241.96 125.177 cv
242.14 127.729 242.232 130.3 242.232 132.892 cv
242.232 135.482 242.14 138.055 241.96 140.603 cv
254.347 146.139 255.628 134.277 259.72 132.946 cv
259.789 132.932 259.857 132.906 259.931 132.892 cv
259.857 132.874 259.789 132.851 259.72 132.834 cv
cp
f
257.642 111.052 mo
257.708 111.012 257.775 110.983 257.843 110.954 cv
257.767 110.951 257.691 110.943 257.619 110.937 cv
253.386 110.336 250.072 99.0063 238.988 106.361 cv
240.232 111.351 241.136 116.474 241.667 121.711 cv
254.634 124.855 253.861 113.054 257.642 111.052 cv
cp
f
251.775 89.8281 mo
251.83 89.7852 251.89 89.7393 251.958 89.7046 cv
251.878 89.7104 251.8 89.7188 251.73 89.7188 cv
247.478 89.8657 242.289 79.4019 232.755 88.2949 cv
234.886 93.064 236.687 98.0166 238.126 103.119 cv
251.177 103.81 248.416 92.4482 251.775 89.8281 cv
cp
f
242.294 69.9561 mo
242.341 69.8984 242.392 69.8496 242.447 69.7949 cv
242.375 69.8184 242.304 69.8384 242.232 69.8555 cv
238.095 70.7329 231.224 61.4365 223.429 71.5698 cv
226.404 75.9561 229.076 80.5693 231.4 85.3813 cv
244.078 83.7046 239.458 73.0972 242.294 69.9561 cv
cp
f
229.49 51.9766 mo
229.525 51.9106 229.57 51.853 229.617 51.7954 cv
229.548 51.8242 229.478 51.8589 229.406 51.8877 cv
225.509 53.4639 217.191 45.5942 211.283 56.665 cv
215.025 60.5137 218.486 64.6353 221.632 68.9956 cv
233.568 65.1011 227.257 55.5464 229.49 51.9766 cv
cp
f
213.892 36.3672 mo
213.917 36.2983 213.949 36.2324 213.988 36.1631 cv
213.923 36.2119 213.861 36.2524 213.802 36.2896 cv
210.234 38.5186 200.675 32.2197 196.775 44.1504 cv
201.142 47.2915 205.267 50.7515 209.115 54.4937 cv
220.189 48.5801 212.312 40.2676 213.892 36.3672 cv
cp
f
195.923 23.5449 mo
195.941 23.4761 195.962 23.4014 195.982 23.332 cv
195.929 23.3838 195.873 23.4385 195.82 23.4873 cv
192.679 26.3179 182.076 21.7012 180.398 34.3828 cv
185.207 36.707 189.82 39.3701 194.205 42.3501 cv
204.343 34.5498 195.044 27.6812 195.923 23.5449 cv
cp
f
176.058 14.0479 mo
176.06 13.9702 176.07 13.9009 176.078 13.8262 cv
176.039 13.8867 175.992 13.9502 175.945 14.0073 cv
173.328 17.3584 161.966 14.6055 162.664 27.6465 cv
167.763 29.0903 172.712 30.8911 177.482 33.0283 cv
186.384 23.4873 175.908 18.2988 176.058 14.0479 cv
cp
f
154.845 8.16309 mo
154.837 8.08252 154.828 8.01074 154.822 7.93848 cv
154.794 8.00488 154.765 8.07666 154.724 8.13721 cv
152.72 11.9194 140.925 11.1484 144.068 24.1118 cv
149.302 24.6436 154.425 25.5469 159.414 26.7896 cv
166.773 15.7017 155.439 12.3911 154.845 8.16309 cv
cp
f
131.064 23.5625 mo
135.503 10.7373 123.572 10.4985 121.893 6.53516 cv
121.862 6.47168 121.838 6.3999 121.817 6.32813 cv
121.806 6.4082 121.793 6.47461 121.776 6.54932 cv
120.81 10.7402 109.104 13.0469 115.701 24.9082 cv
118.224 24.5059 120.776 24.1895 123.359 23.9648 cv
125.94 23.7349 128.508 23.6084 131.064 23.5625 cv
cp
1 /0 /CSD get_res sepcs
.09 sep
f
100.257 10.5156 mo
100.216 10.4551 100.178 10.3892 100.146 10.3286 cv
100.146 10.3979 100.146 10.4756 100.146 10.5532 cv
99.916 14.8184 88.916 19.1011 97.2129 29.5049 cv
102.073 27.8364 107.103 26.4873 112.271 25.501 cv
114.273 12.3105 102.581 14.1055 100.257 10.5156 cv
cp
f
79.6299 18.2124 mo
79.5811 18.1577 79.5322 18.1006 79.4863 18.043 cv
79.499 18.1177 79.5107 18.1865 79.5234 18.2588 cv
80.04 22.481 70.0635 28.5669 79.7568 37.2905 cv
84.3232 34.751 89.0977 32.5303 94.0576 30.6465 cv
93.6104 17.5854 82.5293 21.3247 79.6299 18.2124 cv
cp
f
60.6582 29.3867 mo
60.6006 29.3408 60.5439 29.2974 60.4844 29.2456 cv
60.5117 29.312 60.5381 29.3867 60.5596 29.4556 cv
61.7988 33.5 53.1367 41.1592 63.9092 48.0361 cv
68.0215 44.6914 72.3848 41.6309 76.9766 38.8984 cv
74.1943 26.4126 64.0342 31.9321 60.6582 29.3867 cv
cp
f
43.8613 43.7075 mo
43.7969 43.6787 43.7363 43.6416 43.6699 43.6011 cv
43.7119 43.6616 43.748 43.7275 43.7793 43.7998 cv
45.6924 47.5444 38.5771 56.5127 50.123 61.4365 cv
53.6309 57.3755 57.4326 53.5703 61.5059 50.0527 cv
56.5781 38.5073 47.6074 45.623 43.8613 43.7075 cv
cp
f
29.6729 60.6084 mo
29.5996 60.5854 29.5332 60.5596 29.4644 60.5308 cv
29.5132 60.5854 29.5605 60.646 29.6064 60.7031 cv
32.1377 64.063 26.6885 74.1382 38.915 76.9771 cv
41.668 72.3579 44.7559 67.9517 48.1494 63.7866 cv
41.2939 53.2681 33.6953 61.8394 29.6729 60.6084 cv
cp
f
18.4653 79.623 mo
18.3936 79.6147 18.3203 79.603 18.2456 79.5859 cv
18.3057 79.6318 18.3633 79.6807 18.4165 79.7324 cv
21.5068 82.6172 17.8354 93.5786 30.6118 94.1484 cv
32.5103 89.1523 34.7637 84.3232 37.3452 79.6924 cv
28.7007 70.2783 22.6646 80.1382 18.4653 79.623 cv
cp
f
10.7339 100.24 mo
10.6606 100.243 10.5859 100.243 10.5112 100.24 cv
10.5771 100.277 10.6436 100.315 10.7041 100.355 cv
14.272 102.673 12.5176 114.233 25.4546 112.404 cv
26.4458 107.195 27.8076 102.104 29.5176 97.1714 cv
19.2393 89.1348 14.9839 100.024 10.7339 100.24 cv
cp
f
6.71729 121.89 mo
6.64404 121.904 6.57373 121.916 6.49902 121.93 cv
6.56934 121.95 6.63818 121.979 6.70898 122.002 cv
10.6465 123.682 10.9082 135.494 23.5464 131.232 cv
23.6226 125.974 24.0742 120.788 24.8779 115.706 cv
13.1904 109.349 10.8853 120.929 6.71729 121.89 cv
cp
f
23.5566 134.718 mo
10.7339 130.277 10.4941 142.211 6.53467 143.887 cv
6.46436 143.916 6.39795 143.941 6.32764 143.968 cv
6.40088 143.974 6.47461 143.988 6.54785 144.002 cv
10.7354 144.972 13.0464 156.675 24.8994 150.077 cv
24.501 147.557 24.1851 145.004 23.9604 142.426 cv
23.7349 139.838 23.604 137.266 23.5566 134.718 cv
cp
f
10.5127 165.522 mo
10.4492 165.563 10.3877 165.604 10.3213 165.635 cv
10.396 165.632 10.4707 165.632 10.5483 165.637 cv
14.8169 165.859 19.0996 176.86 29.5029 168.568 cv
27.8291 163.705 26.4829 158.677 25.4995 153.508 cv
12.3062 151.504 14.105 163.192 10.5127 165.522 cv
cp
f
18.2095 186.15 mo
18.1563 186.197 18.0986 186.248 18.0381 186.295 cv
18.1133 186.277 18.188 186.266 18.2627 186.254 cv
22.479 185.739 28.5625 195.711 37.2905 186.021 cv
34.7495 181.451 32.5215 176.682 30.6421 171.724 cv
17.5854 172.172 21.3228 183.248 18.2095 186.15 cv
cp
f
29.3853 205.123 mo
29.3433 205.18 29.293 205.238 29.2441 205.295 cv
29.313 205.266 29.3853 205.238 29.4556 205.217 cv
33.498 203.98 41.1543 212.641 48.0342 201.873 cv
44.6865 197.762 41.626 193.398 38.8906 188.803 cv
26.4097 191.587 31.9336 201.746 29.3853 205.123 cv
cp
f
43.707 221.917 mo
43.6738 221.982 43.6367 222.047 43.5996 222.104 cv
43.6611 222.069 43.7275 222.032 43.7939 222 cv
47.541 220.09 56.5098 227.203 61.4365 215.655 cv
57.3711 212.154 53.5645 208.347 50.0479 204.271 cv
38.5029 209.195 45.6211 218.169 43.707 221.917 cv
cp
f
60.6035 236.105 mo
60.584 236.181 60.5547 236.249 60.5293 236.315 cv
60.584 236.267 60.6416 236.218 60.7021 236.175 cv
64.0625 233.646 74.1338 239.094 76.9707 226.864 cv
72.3516 224.111 67.9473 221.022 63.7832 217.635 cv
53.2695 224.485 61.833 232.084 60.6035 236.105 cv
cp
f
79.623 247.314 mo
79.6133 247.386 79.6016 247.461 79.5811 247.535 cv
79.6299 247.473 79.6787 247.415 79.7295 247.357 cv
82.6133 244.274 93.5732 247.941 94.1484 235.174 cv
89.1523 233.275 84.3184 231.021 79.6904 228.435 cv
70.2764 237.083 80.1348 243.118 79.623 247.314 cv
cp
f
100.24 255.043 mo
100.243 255.117 100.243 255.198 100.24 255.267 cv
100.277 255.204 100.313 255.138 100.354 255.077 cv
102.671 251.508 114.229 253.263 112.397 240.331 cv
107.194 239.338 102.101 237.972 97.1641 236.267 cv
89.1348 246.543 100.019 250.803 100.24 255.043 cv
cp
f
121.882 259.063 mo
121.899 259.136 121.917 259.207 121.924 259.285 cv
121.944 259.21 121.975 259.142 122.002 259.069 cv
123.677 255.135 135.488 254.87 131.233 242.231 cv
125.968 242.163 120.783 241.708 115.706 240.903 cv
109.347 252.592 120.923 254.896 121.882 259.063 cv
cp
f
134.712 242.227 mo
130.275 255.043 142.205 255.284 143.884 259.245 cv
143.91 259.311 143.935 259.383 143.962 259.452 cv
143.974 259.377 143.982 259.306 144.001 259.23 cv
144.966 255.043 156.669 252.736 150.078 240.883 cv
147.552 241.28 145.003 241.594 142.419 241.82 cv
139.833 242.048 137.265 242.18 134.712 242.227 cv
cp
f
165.517 255.267 mo
165.56 255.33 165.597 255.396 165.632 255.457 cv
165.628 255.382 165.628 255.308 165.632 255.232 cv
165.861 250.964 176.857 246.679 168.568 236.278 cv
163.699 237.952 158.671 239.298 153.505 240.282 cv
151.503 253.473 163.187 251.675 165.517 255.267 cv
cp
f
186.144 247.573 mo
186.197 247.628 186.242 247.683 186.289 247.74 cv
186.271 247.668 186.259 247.593 186.251 247.524 cv
185.734 243.296 195.705 237.216 186.021 228.492 cv
181.451 231.032 176.675 233.255 171.724 235.139 cv
172.164 248.191 183.246 244.458 186.144 247.573 cv
cp
f
205.117 236.393 mo
205.179 236.439 205.232 236.485 205.294 236.537 cv
205.261 236.468 205.238 236.393 205.212 236.324 cv
203.978 232.283 212.634 224.623 201.873 217.749 cv
197.759 221.092 193.392 224.152 188.796 226.891 cv
191.582 239.367 201.74 233.848 205.117 236.393 cv
cp
f
221.914 222.072 mo
221.978 222.104 222.046 222.141 222.109 222.179 cv
222.064 222.115 222.029 222.053 221.998 221.988 cv
220.085 218.238 227.201 209.27 215.656 204.346 cv
212.152 208.407 208.343 212.215 204.271 215.725 cv
209.195 227.275 218.166 220.16 221.914 222.072 cv
cp
f
236.099 205.174 mo
236.171 205.197 236.24 205.221 236.312 205.249 cv
236.261 205.197 236.214 205.14 236.171 205.076 cv
233.638 201.717 239.085 191.647 226.867 188.803 cv
224.111 193.428 221.023 197.834 217.628 201.993 cv
224.486 212.509 232.083 203.943 236.099 205.174 cv
cp
f
247.312 186.156 mo
247.382 186.165 247.455 186.18 247.529 186.197 cv
247.466 186.15 247.41 186.1 247.357 186.051 cv
244.263 183.165 247.939 172.201 235.167 171.631 cv
233.269 176.631 231.015 181.463 228.431 186.088 cv
237.078 195.504 243.117 185.642 247.312 186.156 cv
cp
f
255.044 165.539 mo
255.117 165.537 255.189 165.537 255.267 165.539 cv
255.203 165.502 255.128 165.465 255.072 165.425 cv
251.505 163.109 253.255 151.553 240.322 153.379 cv
239.332 158.585 237.968 163.679 236.261 168.611 cv
246.537 176.645 250.796 165.762 255.044 165.539 cv
cp
f
259.058 143.896 mo
259.132 143.879 259.201 143.864 259.279 143.853 cv
259.207 143.83 259.136 143.807 259.066 143.777 cv
255.128 142.104 254.865 130.283 242.226 134.545 cv
242.152 139.812 241.703 144.992 240.904 150.074 cv
252.589 156.434 254.892 144.854 259.058 143.896 cv
cp
f
259.23 121.777 mo
255.037 120.808 252.732 109.107 240.876 115.7 cv
241.277 118.226 241.589 120.779 241.818 123.362 cv
242.042 125.945 242.173 128.511 242.22 131.065 cv
255.042 135.506 255.279 123.575 259.236 121.896 cv
259.31 121.864 259.376 121.838 259.453 121.818 cv
259.375 121.809 259.298 121.792 259.23 121.777 cv
cp
f
255.263 100.26 mo
255.324 100.22 255.388 100.183 255.457 100.146 cv
255.382 100.151 255.304 100.151 255.232 100.146 cv
250.96 99.9209 246.679 88.9224 236.275 97.2114 cv
237.947 102.078 239.292 107.103 240.281 112.271 cv
253.472 114.273 251.669 102.584 255.263 100.26 cv
cp
f
247.568 79.6318 mo
247.628 79.5801 247.679 79.5313 247.736 79.4883 cv
247.667 79.5054 247.587 79.5166 247.513 79.5225 cv
243.296 80.0459 237.216 70.0684 228.484 79.7612 cv
231.025 84.3262 233.257 89.1006 235.132 94.0591 cv
248.191 93.6104 244.453 82.5313 247.568 79.6318 cv
cp
f
236.392 60.6631 mo
236.433 60.6055 236.482 60.542 236.531 60.4902 cv
236.462 60.519 236.392 60.542 236.324 60.5625 cv
232.281 61.7993 224.617 53.1387 217.738 63.9102 cv
221.091 68.0205 224.146 72.3838 226.878 76.98 cv
239.367 74.1958 233.845 64.0342 236.392 60.6631 cv
cp
f
222.07 43.8628 mo
222.101 43.8027 222.138 43.7363 222.179 43.6729 cv
222.113 43.7134 222.046 43.748 221.978 43.7822 cv
218.232 45.6924 209.263 38.5762 204.343 50.1274 cv
208.402 53.6309 212.208 57.439 215.724 61.5059 cv
227.275 56.5845 220.156 47.6108 222.07 43.8628 cv
cp
f
205.167 29.6714 mo
205.191 29.6025 205.214 29.5332 205.25 29.4702 cv
205.191 29.5132 205.134 29.562 205.074 29.6084 cv
201.71 32.1392 191.644 26.689 188.802 38.916 cv
193.421 41.6738 197.828 44.7544 201.988 48.1484 cv
212.505 41.2944 203.941 33.6924 205.167 29.6714 cv
cp
f
186.15 18.4658 mo
186.166 18.3936 186.177 18.3218 186.193 18.25 cv
186.144 18.3076 186.093 18.3677 186.046 18.417 cv
183.162 21.5088 172.195 17.8389 171.63 30.6118 cv
176.625 32.5132 181.457 34.7627 186.082 37.3481 cv
195.498 28.6992 185.636 22.6621 186.15 18.4658 cv
cp
f
165.539 10.7373 mo
165.533 10.6597 165.533 10.585 165.533 10.5127 cv
165.501 10.5791 165.458 10.6421 165.419 10.7056 cv
163.107 14.272 151.546 12.5176 153.376 25.4551 cv
158.585 26.4473 163.669 27.8105 168.609 29.519 cv
176.642 19.2422 165.761 14.9824 165.539 10.7373 cv
cp
f
143.892 6.72168 mo
143.871 6.64697 143.865 6.5752 143.849 6.50049 cv
143.824 6.56934 143.8 6.64404 143.773 6.71045 cv
142.097 10.6479 130.284 10.9067 134.539 23.5508 cv
139.806 23.6226 144.992 24.0801 150.074 24.8823 cv
156.433 13.1934 144.851 10.8838 143.892 6.72168 cv
cp
f
gsave
247.673 133.965 mo
247.673 197.46 196.195 248.939 132.698 248.939 cv
69.2012 248.939 17.7305 197.46 17.7305 133.965 cv
17.7305 70.4683 69.2012 18.9951 132.698 18.9951 cv
196.195 18.9951 247.673 70.4683 247.673 133.965 cv
cp
clp
grestore
122.558 71.356 mo
124.849 70.9839 127.117 70.2666 129.383 69.3779 cv
129.4 69.3716 129.422 69.3633 129.44 69.3535 cv
129.73 69.2388 130.016 69.1255 130.301 69.0083 cv
131.914 68.3486 133.527 67.6118 135.145 66.8706 cv
137.785 65.6626 140.445 64.4424 143.156 63.4873 cv
147.848 61.8335 152.704 60.9868 157.886 62.4023 cv
160.226 63.0464 162.629 64.1465 165.115 65.8486 cv
165.426 66.063 165.742 66.2822 166.057 66.5142 cv
166.054 66.5142 166.052 66.5068 166.046 66.5044 cv
160.875 60.4951 155.646 58.7119 150.263 58.9771 cv
145.7 59.1973 141.024 60.8867 136.177 62.7363 cv
133.954 63.5811 131.689 64.4546 129.387 65.2349 cv
125.354 66.6045 121.198 67.6621 116.88 67.7456 cv
113.142 67.813 109.284 67.1519 105.287 65.3022 cv
107.829 67.7202 110.298 69.3262 112.711 70.3149 cv
116.079 71.6938 119.339 71.8726 122.558 71.356 cv
cp
.75 0 .05 0 cmyk
f
163.172 68.9771 mo
159.278 66.9297 155.7 66.5527 152.286 67.1157 cv
148.056 67.8096 144.064 69.9443 139.985 72.167 cv
146.942 81.731 141.378 88.0698 136.293 94.7129 cv
134.628 96.8853 133.017 99.0918 131.911 101.453 cv
131.099 103.188 130.558 105.005 130.474 106.962 cv
130.417 107.375 130.361 107.796 130.324 108.22 cv
129.505 117.184 133.595 124.472 139.458 124.446 cv
140.063 124.443 140.564 124.364 141.133 124.25 cv
153.006 121.987 162.885 112.921 166.082 95.2866 cv
167.828 85.6709 166.862 75.9741 163.172 68.9771 cv
cp
f
132.682 75.8691 mo
128.098 77.8472 123.194 79.0142 117.574 77.7285 cv
114.742 77.0728 111.725 75.793 108.475 73.6768 cv
102.607 78.9658 98.2324 85.8003 96.4604 93.3833 cv
93.0059 108.166 100.532 121.087 113.856 125.502 cv
113.736 125.431 113.614 125.359 113.484 125.286 cv
107.738 115.693 108.185 109.328 111.28 104.438 cv
117.991 93.8413 137.155 90.2129 132.682 75.8691 cv
cp
f
60.3862 149.386 mo
55.7373 149.386 li
55.4438 149.386 55.2305 149.146 55.2305 148.881 cv
55.2305 148.102 li
55.2305 147.833 55.4438 147.597 55.7373 147.597 cv
67.0659 147.597 li
67.356 147.597 67.5679 147.833 67.5679 148.102 cv
67.5679 148.881 li
67.5679 149.146 67.356 149.386 67.0659 149.386 cv
62.416 149.386 li
62.416 165.783 li
62.416 166.05 62.1758 166.292 61.9121 166.292 cv
60.8936 166.292 li
60.6216 166.292 60.3862 166.05 60.3862 165.783 cv
60.3862 149.386 li
cp
f
80.6167 157.208 mo
82.6763 157.208 84.4683 155.501 84.4683 153.313 cv
84.4683 151.284 82.6763 149.544 80.6182 149.544 cv
75.4365 149.544 li
75.4365 157.208 li
80.6167 157.208 li
cp
73.3291 148.103 mo
73.3291 147.833 73.5425 147.597 73.8335 147.597 cv
80.7534 147.597 li
83.9595 147.597 86.5742 150.104 86.5742 153.281 cv
86.5742 155.742 84.9473 157.8 82.6216 158.732 cv
86.2842 165.518 li
86.4731 165.865 86.2842 166.292 85.8296 166.292 cv
84.4683 166.292 li
84.2285 166.292 84.0942 166.158 84.041 166.052 cv
80.4839 158.976 li
75.3862 158.976 li
75.3862 165.783 li
75.3862 166.052 75.1421 166.292 74.8774 166.292 cv
73.8335 166.292 li
73.5425 166.292 73.3291 166.052 73.3291 165.783 cv
73.3291 148.103 li
cp
f
103.61 159.937 mo
102.304 157.021 101.021 154.082 99.7153 151.171 cv
99.4971 151.171 li
95.5962 159.937 li
103.61 159.937 li
cp
90.9258 165.6 mo
99.0449 147.623 li
99.125 147.461 99.2578 147.332 99.4971 147.332 cv
99.7656 147.332 li
100.004 147.332 100.14 147.461 100.218 147.623 cv
108.285 165.6 li
108.443 165.949 108.233 166.292 107.832 166.292 cv
106.764 166.292 li
106.522 166.292 106.36 166.138 106.309 165.996 cv
104.331 161.592 li
94.8477 161.592 li
92.9009 165.996 li
92.8447 166.138 92.6851 166.292 92.4473 166.292 cv
91.3779 166.292 li
90.9756 166.292 90.7622 165.949 90.9258 165.6 cv
f
159.6 159.937 mo
158.294 157.021 157.007 154.082 155.7 151.171 cv
155.487 151.171 li
151.589 159.937 li
159.6 159.937 li
cp
146.914 165.6 mo
155.035 147.623 li
155.114 147.461 155.246 147.332 155.487 147.332 cv
155.756 147.332 li
155.994 147.332 156.124 147.461 156.209 147.623 cv
164.277 165.6 li
164.436 165.949 164.216 166.292 163.822 166.292 cv
162.753 166.292 li
162.507 166.292 162.351 166.138 162.3 165.996 cv
160.321 161.592 li
150.839 161.592 li
148.889 165.996 li
148.831 166.138 148.672 166.292 148.434 166.292 cv
147.368 166.292 li
146.963 166.292 146.751 165.949 146.914 165.6 cv
f
168.75 163.221 mo
168.883 163.059 169.018 162.874 169.153 162.718 cv
169.419 162.368 169.71 162.153 170.087 162.472 cv
170.274 162.632 172.225 164.501 174.597 164.501 cv
176.761 164.501 178.178 163.143 178.178 161.563 cv
178.178 159.723 176.577 158.624 173.506 157.344 cv
170.567 156.061 168.805 154.86 168.805 151.813 cv
168.805 149.998 170.25 147.061 174.494 147.061 cv
177.112 147.061 179.062 148.419 179.062 148.419 cv
179.221 148.501 179.545 148.821 179.221 149.33 cv
179.113 149.488 179.008 149.678 178.9 149.84 cv
178.656 150.212 178.394 150.32 177.965 150.078 cv
177.78 149.97 176.095 148.852 174.468 148.852 cv
171.635 148.852 170.78 150.666 170.78 151.789 cv
170.78 153.578 172.142 154.616 174.386 155.557 cv
177.999 157.021 180.317 158.386 180.317 161.487 cv
180.317 164.265 177.671 166.292 174.544 166.292 cv
171.398 166.292 169.254 164.451 168.91 164.129 cv
168.698 163.944 168.431 163.725 168.75 163.221 cv
f
197.332 159.937 mo
196.025 157.021 194.741 154.082 193.434 151.171 cv
193.219 151.171 li
189.318 159.937 li
197.332 159.937 li
cp
184.644 165.6 mo
192.764 147.623 li
192.844 147.461 192.977 147.332 193.219 147.332 cv
193.486 147.332 li
193.726 147.332 193.856 147.461 193.94 147.623 cv
202.008 165.6 li
202.166 165.949 201.952 166.292 201.552 166.292 cv
200.486 166.292 li
200.242 166.292 200.083 166.138 200.029 165.996 cv
198.055 161.592 li
188.569 161.592 li
186.623 165.996 li
186.564 166.138 186.409 166.292 186.166 166.292 cv
185.095 166.292 li
184.694 166.292 184.482 165.949 184.644 165.6 cv
f
137.483 159.937 mo
136.176 157.021 134.888 154.082 133.582 151.171 cv
133.371 151.171 li
129.469 159.937 li
137.483 159.937 li
cp
121.5 172.923 mo
132.917 147.623 li
132.998 147.461 133.127 147.332 133.371 147.332 cv
133.64 147.332 li
133.876 147.332 134.005 147.461 134.092 147.623 cv
142.158 165.6 li
142.32 165.949 142.1 166.292 141.704 166.292 cv
140.636 166.292 li
140.391 166.292 140.233 166.138 140.182 165.996 cv
138.204 161.592 li
128.723 161.592 li
123.474 173.317 li
123.418 173.455 123.26 173.615 123.02 173.615 cv
121.952 173.615 li
121.55 173.615 121.336 173.269 121.5 172.923 cv
f
128.837 140.428 mo
117.296 165.996 li
117.216 166.156 117.085 166.286 116.844 166.286 cv
116.573 166.286 li
116.335 166.286 116.207 166.156 116.12 165.996 cv
108.054 148.021 li
107.894 147.669 108.114 147.325 108.508 147.325 cv
109.578 147.325 li
109.822 147.325 109.979 147.483 110.031 147.623 cv
116.632 162.448 li
116.844 162.448 li
126.861 140.027 li
126.917 139.89 127.077 139.729 127.315 139.729 cv
128.383 139.729 li
128.787 139.729 128.999 140.076 128.837 140.428 cv
f
48.3306 178.131 mo
48.3306 178.018 48.4209 177.915 48.5459 177.915 cv
53.0723 177.915 li
53.1968 177.915 53.2871 178.018 53.2871 178.131 cv
53.2871 178.764 li
53.2871 178.878 53.1968 178.979 53.0723 178.979 cv
49.4966 178.979 li
49.4966 181.288 li
52.5176 181.288 li
52.6304 181.288 52.7324 181.389 52.7324 181.502 cv
52.7324 182.137 li
52.7324 182.262 52.6304 182.352 52.5176 182.352 cv
49.4966 182.352 li
49.4966 184.784 li
53.0723 184.784 li
53.1968 184.784 53.2871 184.887 53.2871 185 cv
53.2871 185.622 li
53.2871 185.735 53.1968 185.838 53.0723 185.838 cv
48.5459 185.838 li
48.4209 185.838 48.3306 185.735 48.3306 185.622 cv
48.3306 178.131 li
cp
0 1 .66 .13 cmyk
f
58.8784 181.776 mo
56.6377 178.233 li
56.5474 178.085 56.6377 177.915 56.8301 177.915 cv
57.792 177.915 li
57.8711 177.915 57.9502 177.962 57.9844 178.018 cv
59.5796 180.723 li
59.5908 180.723 li
61.209 178.018 li
61.2324 177.973 61.2993 177.915 61.3901 177.915 cv
62.3521 177.915 li
62.5444 177.915 62.6353 178.085 62.5444 178.233 cv
60.3037 181.776 li
62.6235 185.52 li
62.7144 185.678 62.6235 185.838 62.4312 185.838 cv
61.5601 185.838 li
61.4697 185.838 61.3901 185.78 61.3677 185.735 cv
59.5908 182.839 li
59.5684 182.839 li
57.8145 185.735 li
57.7808 185.78 57.7129 185.838 57.6226 185.838 cv
56.751 185.838 li
56.5474 185.838 56.4565 185.666 56.5474 185.52 cv
58.8784 181.776 li
cp
f
68.8906 181.854 mo
69.6714 181.854 70.3276 181.221 70.3276 180.406 cv
70.3276 179.635 69.6714 179.047 68.8906 179.047 cv
67.3286 179.047 li
67.3286 181.854 li
68.8906 181.854 li
cp
66.1641 178.131 mo
66.1641 178.018 66.2544 177.915 66.3784 177.915 cv
68.958 177.915 li
70.3501 177.915 71.4927 179.047 71.4927 180.417 cv
71.4927 181.82 70.3501 182.962 68.9697 182.962 cv
67.3286 182.962 li
67.3286 185.622 li
67.3286 185.735 67.2271 185.838 67.1143 185.838 cv
66.3784 185.838 li
66.2544 185.838 66.1641 185.735 66.1641 185.622 cv
66.1641 178.131 li
cp
f
74.9644 178.131 mo
74.9644 178.018 75.0547 177.915 75.1792 177.915 cv
79.7051 177.915 li
79.8296 177.915 79.9199 178.018 79.9199 178.131 cv
79.9199 178.764 li
79.9199 178.878 79.8296 178.979 79.7051 178.979 cv
76.1294 178.979 li
76.1294 181.288 li
79.1504 181.288 li
79.2637 181.288 79.3652 181.389 79.3652 181.502 cv
79.3652 182.137 li
79.3652 182.262 79.2637 182.352 79.1504 182.352 cv
76.1294 182.352 li
76.1294 184.784 li
79.7051 184.784 li
79.8296 184.784 79.9199 184.887 79.9199 185 cv
79.9199 185.622 li
79.9199 185.735 79.8296 185.838 79.7051 185.838 cv
75.1792 185.838 li
75.0547 185.838 74.9644 185.735 74.9644 185.622 cv
74.9644 178.131 li
cp
f
86.8901 181.763 mo
87.625 181.763 88.27 181.142 88.27 180.359 cv
88.27 179.624 87.625 179.014 86.8901 179.014 cv
84.876 179.014 li
84.876 181.763 li
86.8901 181.763 li
cp
83.687 178.131 mo
83.687 178.018 83.7773 177.915 83.9023 177.915 cv
86.9805 177.915 li
88.3379 177.915 89.4468 178.991 89.4468 180.337 cv
89.4468 181.38 88.7568 182.239 87.772 182.634 cv
89.3228 185.508 li
89.4019 185.655 89.3228 185.838 89.1299 185.838 cv
88.2476 185.838 li
88.1572 185.838 88.0889 185.78 88.0664 185.735 cv
86.5615 182.736 li
84.853 182.736 li
84.853 185.622 li
84.853 185.735 84.7515 185.838 84.6382 185.838 cv
83.9023 185.838 li
83.7773 185.838 83.687 185.735 83.687 185.622 cv
83.687 178.131 li
cp
f
93.3447 178.131 mo
93.3447 178.018 93.4463 177.915 93.5596 177.915 cv
94.3062 177.915 li
94.4199 177.915 94.5215 178.018 94.5215 178.131 cv
94.5215 185.622 li
94.5215 185.735 94.4199 185.838 94.3062 185.838 cv
93.5596 185.838 li
93.4463 185.838 93.3447 185.735 93.3447 185.622 cv
93.3447 178.131 li
cp
f
98.8193 178.131 mo
98.8193 178.018 98.9102 177.915 99.0352 177.915 cv
103.562 177.915 li
103.686 177.915 103.776 178.018 103.776 178.131 cv
103.776 178.764 li
103.776 178.878 103.686 178.979 103.562 178.979 cv
99.9854 178.979 li
99.9854 181.288 li
103.006 181.288 li
103.12 181.288 103.221 181.389 103.221 181.502 cv
103.221 182.137 li
103.221 182.262 103.12 182.352 103.006 182.352 cv
99.9854 182.352 li
99.9854 184.784 li
103.562 184.784 li
103.686 184.784 103.776 184.887 103.776 185 cv
103.776 185.622 li
103.776 185.735 103.686 185.838 103.562 185.838 cv
99.0352 185.838 li
98.9102 185.838 98.8193 185.735 98.8193 185.622 cv
98.8193 178.131 li
cp
f
107.543 178.006 mo
107.543 177.893 107.645 177.804 107.758 177.804 cv
108.041 177.804 li
112.952 183.483 li
112.963 183.483 li
112.963 178.131 li
112.963 178.018 113.054 177.915 113.178 177.915 cv
113.902 177.915 li
114.016 177.915 114.118 178.018 114.118 178.131 cv
114.118 185.746 li
114.118 185.86 114.016 185.949 113.902 185.949 cv
113.608 185.949 li
108.698 180.111 li
108.687 180.111 li
108.687 185.622 li
108.687 185.735 108.596 185.838 108.471 185.838 cv
107.758 185.838 li
107.645 185.838 107.543 185.735 107.543 185.622 cv
107.543 178.006 li
cp
f
119.531 178.979 mo
117.687 178.979 li
117.563 178.979 117.472 178.878 117.472 178.764 cv
117.472 178.131 li
117.472 178.018 117.563 177.915 117.687 177.915 cv
122.552 177.915 li
122.678 177.915 122.768 178.018 122.768 178.131 cv
122.768 178.764 li
122.768 178.878 122.678 178.979 122.552 178.979 cv
120.708 178.979 li
120.708 185.622 li
120.708 185.735 120.607 185.838 120.493 185.838 cv
119.746 185.838 li
119.633 185.838 119.531 185.735 119.531 185.622 cv
119.531 178.979 li
cp
f
126.116 178.131 mo
126.116 178.018 126.218 177.915 126.331 177.915 cv
127.078 177.915 li
127.191 177.915 127.293 178.018 127.293 178.131 cv
127.293 185.622 li
127.293 185.735 127.191 185.838 127.078 185.838 cv
126.331 185.838 li
126.218 185.838 126.116 185.735 126.116 185.622 cv
126.116 178.131 li
cp
f
135.722 183.145 mo
134.33 180.043 li
134.274 180.043 li
132.894 183.145 li
135.722 183.145 li
cp
130.597 185.542 mo
134.072 177.928 li
134.105 177.859 134.207 177.804 134.263 177.804 cv
134.376 177.804 li
134.432 177.804 134.535 177.859 134.568 177.928 cv
138.019 185.542 li
138.087 185.688 137.997 185.838 137.828 185.838 cv
137.115 185.838 li
136.979 185.838 136.899 185.769 136.854 185.666 cv
136.152 184.116 li
132.454 184.116 li
132.226 184.637 131.988 185.147 131.763 185.666 cv
131.728 185.746 131.638 185.838 131.501 185.838 cv
130.789 185.838 li
130.619 185.838 130.529 185.688 130.597 185.542 cv
cp
f
141.34 178.131 mo
141.34 178.018 141.431 177.915 141.556 177.915 cv
142.302 177.915 li
142.417 177.915 142.517 178.018 142.517 178.131 cv
142.517 184.784 li
145.584 184.784 li
145.709 184.784 145.799 184.887 145.799 185 cv
145.799 185.622 li
145.799 185.735 145.709 185.838 145.584 185.838 cv
141.556 185.838 li
141.431 185.838 141.34 185.735 141.34 185.622 cv
141.34 178.131 li
cp
f
157.208 181.763 mo
157.943 181.763 158.587 181.142 158.587 180.359 cv
158.587 179.624 157.943 179.014 157.208 179.014 cv
155.193 179.014 li
155.193 181.763 li
157.208 181.763 li
cp
154.004 178.131 mo
154.004 178.018 154.095 177.915 154.22 177.915 cv
157.298 177.915 li
158.656 177.915 159.765 178.991 159.765 180.337 cv
159.765 181.38 159.075 182.239 158.09 182.634 cv
159.64 185.508 li
159.719 185.655 159.64 185.838 159.447 185.838 cv
158.565 185.838 li
158.475 185.838 158.407 185.78 158.384 185.735 cv
156.879 182.736 li
155.171 182.736 li
155.171 185.622 li
155.171 185.735 155.069 185.838 154.956 185.838 cv
154.22 185.838 li
154.095 185.838 154.004 185.735 154.004 185.622 cv
154.004 178.131 li
cp
f
163.662 178.131 mo
163.662 178.018 163.753 177.915 163.877 177.915 cv
168.403 177.915 li
168.528 177.915 168.619 178.018 168.619 178.131 cv
168.619 178.764 li
168.619 178.878 168.528 178.979 168.403 178.979 cv
164.828 178.979 li
164.828 181.288 li
167.849 181.288 li
167.961 181.288 168.064 181.389 168.064 181.502 cv
168.064 182.137 li
168.064 182.262 167.961 182.352 167.849 182.352 cv
164.828 182.352 li
164.828 184.784 li
168.403 184.784 li
168.528 184.784 168.619 184.887 168.619 185 cv
168.619 185.622 li
168.619 185.735 168.528 185.838 168.403 185.838 cv
163.877 185.838 li
163.753 185.838 163.662 185.735 163.662 185.622 cv
163.662 178.131 li
cp
f
171.985 184.694 mo
172.087 184.546 172.178 184.376 172.28 184.229 cv
172.381 184.082 172.54 184.038 172.664 184.14 cv
172.733 184.196 173.603 184.92 174.474 184.92 cv
175.255 184.92 175.753 184.445 175.753 183.868 cv
175.753 183.188 175.165 182.759 174.044 182.295 cv
172.89 181.81 171.985 181.208 171.985 179.896 cv
171.985 179.014 172.664 177.804 174.463 177.804 cv
175.594 177.804 176.444 178.392 176.555 178.47 cv
176.647 178.527 176.738 178.686 176.625 178.855 cv
176.534 178.991 176.432 179.149 176.341 179.285 cv
176.251 179.433 176.104 179.499 175.946 179.398 cv
175.867 179.353 175.074 178.833 174.417 178.833 cv
173.467 178.833 173.14 179.433 173.14 179.852 cv
173.14 180.495 173.637 180.892 174.576 181.277 cv
175.889 181.81 177.009 182.432 177.009 183.813 cv
177.009 184.989 175.958 185.949 174.486 185.949 cv
173.105 185.949 172.235 185.226 172.053 185.056 cv
171.951 184.965 171.872 184.887 171.985 184.694 cv
cp
f
184.188 184.819 mo
185.806 184.819 187.13 183.505 187.13 181.888 cv
187.13 180.281 185.806 178.934 184.188 178.934 cv
182.582 178.934 181.257 180.281 181.257 181.888 cv
181.257 183.505 182.582 184.819 184.188 184.819 cv
cp
184.188 177.804 mo
186.451 177.804 188.261 179.624 188.261 181.888 cv
188.261 184.151 186.451 185.949 184.188 185.949 cv
181.924 185.949 180.125 184.151 180.125 181.888 cv
180.125 179.624 181.924 177.804 184.188 177.804 cv
cp
f
195.249 181.763 mo
195.984 181.763 196.629 181.142 196.629 180.359 cv
196.629 179.624 195.984 179.014 195.249 179.014 cv
193.235 179.014 li
193.235 181.763 li
195.249 181.763 li
cp
192.046 178.131 mo
192.046 178.018 192.137 177.915 192.261 177.915 cv
195.339 177.915 li
196.697 177.915 197.806 178.991 197.806 180.337 cv
197.806 181.38 197.115 182.239 196.131 182.634 cv
197.681 185.508 li
197.76 185.655 197.681 185.838 197.488 185.838 cv
196.606 185.838 li
196.515 185.838 196.448 185.78 196.425 185.735 cv
194.919 182.736 li
193.211 182.736 li
193.211 185.622 li
193.211 185.735 193.11 185.838 192.997 185.838 cv
192.261 185.838 li
192.137 185.838 192.046 185.735 192.046 185.622 cv
192.046 178.131 li
cp
f
202.82 178.979 mo
200.974 178.979 li
200.85 178.979 200.76 178.878 200.76 178.764 cv
200.76 178.131 li
200.76 178.018 200.85 177.915 200.974 177.915 cv
205.841 177.915 li
205.964 177.915 206.055 178.018 206.055 178.131 cv
206.055 178.764 li
206.055 178.878 205.964 178.979 205.841 178.979 cv
203.997 178.979 li
203.997 185.622 li
203.997 185.735 203.895 185.838 203.781 185.838 cv
203.035 185.838 li
202.921 185.838 202.82 185.735 202.82 185.622 cv
202.82 178.979 li
cp
f
209.043 184.694 mo
209.146 184.546 209.236 184.376 209.338 184.229 cv
209.439 184.082 209.598 184.038 209.722 184.14 cv
209.792 184.196 210.663 184.92 211.533 184.92 cv
212.314 184.92 212.812 184.445 212.812 183.868 cv
212.812 183.188 212.224 182.759 211.103 182.295 cv
209.949 181.81 209.043 181.208 209.043 179.896 cv
209.043 179.014 209.722 177.804 211.521 177.804 cv
212.654 177.804 213.502 178.392 213.616 178.47 cv
213.706 178.527 213.796 178.686 213.683 178.855 cv
213.592 178.991 213.491 179.149 213.401 179.285 cv
213.31 179.433 213.163 179.499 213.004 179.398 cv
212.925 179.353 212.132 178.833 211.477 178.833 cv
210.526 178.833 210.199 179.433 210.199 179.852 cv
210.199 180.495 210.697 180.892 211.636 181.277 cv
212.947 181.81 214.068 182.432 214.068 183.813 cv
214.068 184.989 213.015 185.949 211.544 185.949 cv
210.165 185.949 209.293 185.226 209.112 185.056 cv
209.009 184.965 208.931 184.887 209.043 184.694 cv
cp
f
217.785 179.194 mo
217.973 179.194 218.09 179.062 218.09 178.901 cv
218.09 178.727 217.973 178.609 217.785 178.609 cv
217.281 178.609 li
217.281 179.194 li
217.785 179.194 li
cp
216.958 178.423 mo
216.958 178.373 217 178.326 217.056 178.326 cv
217.785 178.326 li
218.102 178.326 218.415 178.517 218.415 178.901 cv
218.415 179.285 218.144 179.423 218 179.46 cv
218.102 179.659 218.205 179.864 218.306 180.065 cv
218.344 180.127 218.292 180.203 218.219 180.203 cv
218.045 180.203 li
218.005 180.203 217.968 180.162 217.953 180.132 cv
217.666 179.49 li
217.287 179.49 li
217.287 180.106 li
217.287 180.156 217.246 180.203 217.189 180.203 cv
217.056 180.203 li
217 180.203 216.958 180.156 216.958 180.106 cv
216.958 178.423 li
cp
217.599 180.803 mo
218.449 180.803 219.131 180.117 219.131 179.271 cv
219.131 178.42 218.449 177.738 217.599 177.738 cv
216.753 177.738 216.065 178.42 216.065 179.271 cv
216.065 180.117 216.753 180.803 217.599 180.803 cv
cp
217.599 177.426 mo
218.614 177.426 219.446 178.256 219.446 179.271 cv
219.446 180.287 218.614 181.111 217.599 181.111 cv
216.584 181.111 215.76 180.287 215.76 179.271 cv
215.76 178.256 216.584 177.426 217.599 177.426 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 16.0.0%%For: (kati) ()%%Title: (TRV_ER_BURST_CMKY_3C.eps)%%CreationDate: 1/29/16 11:59 AM%%Canvassize: 16383%AI9_DataStream%Gb"+`M*_kIe,Kg:*TDY06(%Pb<At&4-n5Vgl?_AR#0@L@Qp]Kol2RpSY+D6,*'Jh6@,*&]Sj'0SX/i;$X*PNs<dWkEX53`cgA>fb%W`rJ/Wu@R92-dVrYjea-'+P[5C7_2IUfu#d23ZP?C6%PhUk)H#D8R^&ep<,3e$(pf*qTr[iNU_qoEN3uC?&sRXhG4XOs`QgIG!fV%IT0B1_;RssTtY702qsn-fc-FcUT/4]1apk5rRGo"ds<l84U;9C<Q?ngf\EB1^)<*J8@S(/MV\6U;c9n?N^a.T18#u1dMNKb]i,&F%EP)3bn+EaSWoptD`][5'nacVdW=EXdri90>Q"B"^=nmK)+*PN)mGV^iN7tu5VgBE=6*GbV$r2PY>Jp'jLHXB":]$\j'QWJB24Ju^%oM^/#2$nhIXX3P:\n("oeM<,aD/c4;A.QGa_]LDZB49-o#E67e_.^=V^Q8r!C$_$Hfbo"N_4,=h`$e[DoGMp]p0(m;V.th[btdbN%LkO0N:KCmW(jlc_KO&np1#TcDol($hI9XP6&.#JG!FGN<mU#?6KlTaDgo>'#Z;bt%I.]@p$4KD8p>)`d>%0l_qICU62p_m)%P54d%=Q&kFrO(HeiNTli)hW;a@LLedHL-99?h:'8++G,t"Qe#ZluKTB4#UD;m%r6=m]lleNX:JaK/TEiDKtf/9^fhJiJ$]'0FC@UmarSK%OoMG^5=a\:ZCm>0V?rlT"/!:<T8a&@RO7qj9mCEAnC0;Jdq07sZW<(g[2]GNEZD%>3)Ie<RSE.tpS!W96QMfsK@[aI[<s'2_)M.B%>)`a9C,DSpUB+./%B.`l_UE,GEM.H\$.#)8eqQK7i+;D^&_U)rM9eo&Z2gLn$ZL\nW!,.(VX,1."J8Kq0S3*9)_&VW!`&4kIfW%.%#sC"(Z(:t@p]S7g2j=A=0IEPA)]req?LS8DRS>3Jq#SPSN>WHKQ/Ik6A=,1:)=.bi2EF*`F+cF'5H"b\_'elnArpHGT!9/chbX^M%_\m&c@;Q$0pk6B^4#[-.aWQ?Opk2h$++1@sA6d"8b/T2KOTtl,j<'mJ"s9U$e7*Me\hM>GoDgn(MiGo+`qa($n/p-\m#X"(4(umC%AkrFlpk2h0^B$Pg'@mp_TakI3=[:9P[DOE57UY#24H-q)g]iir:1:eclN676d@ESDW6WCoF9BU(7M%K_44M-p=mrFTHd;UFaP"^H%gs"oNd>%>@V#M;37]W)fW@ZtBNE-hC.H5cqh8o=&s$>t,LN'([Z]%kDjoHSk8j_j")@.k1MrV*l=\E&PkWejeUnZ07)$YF#rFZ(;%l[jW6Dt^B?@,%b.qT]#M0)Ia,c2Mu0qqL^]CleUsf@cAO2uC(qb5REMZ[\6o[5CttrFZ)\f@f'/DtZs?s-Pp(\V![9YO$3*Mu>!t%)-4Y\Rqq)_=neA#Xp)T!^ZM!I7c,5I4kG'bk!LTNW1\gNKMPdpM8!a@r=5sg[uY[:7l'd!rWW6TM"jpJ4oQZj#Hik*Jc>#dBY;Gf%n\6O69cOuH'Km<R=#V-@NjgN;KR]?XZSb%,VE>2)3t8s;EbXl"hLaTb?&[f:/_5#1Qb(N$'R7[f[:3_>HOL\fNNFS#'`A6';JEjW%3=1-ZOQq.NZ4Z/Lk*@aD&Hu.O^Et'RVL.$UM)!W+7OefJqT=Dp(6'ir0KHk9Rg'2r:&'+\0XI]MBA]P63RPLY>FTLK<Wo!O1ZHtb%r$AA*&WB+BU.$oZ?3CSmD)Ncmd@+cDNlcdSR:[5Z71F$q^1O+"_5%0s30Q2n-h0UhA8kk6iQ_-lZkD.ek09"O(Sc9*c:j02nLKVh%AJVIda8)7VP/g,PU%eo@f^]kI(@cNW86gc=Z;qPqCb7&L`5f1D*3c;!"TQI2NqJm7Zn5H[mSBDB2$8;kruBk$*R.fbe2@u89C!.5%"/uMd\nC>p^'[):_pR.UTX\<p?t+@>UY-g:--8Np#$@AOWjr>I!E=0t?uA4?-\!AKGl,"0Ljkd@O6_1)0WG^Y2$TtRd@T[F)`"5;%lK']TD?1e%FOCI8WrSQ#Ha_TMrRKk^:_."-]i@Q]M8Wj;-'HA\EtH/MZ+ei^->b1[aaP4=^&llE#)"`@q'k5f>-9.s"]E,LOS]#<%J_C1HE<dUc[Q*p-DeNkK'"=t,Nl4dSn"b\NO]'OXRW4_bLI&(%iY7[0NGaQ[:?N\\ST0ZZq4,<:_/B@JoOG%d<Yje)h?Q<`+D%'(%8`>JSjr33'gEYI`B/-![qn+Q76dtOu2(#7r`cL@rCRd.R&(fi@NW5jm'$/OnP-O7mP`hQVBtFVha@jlB"_uF?*@mLI4Xj=K*:_F1%j<g6?joKtQfJ"fbL0M?Z>#3"pN2f=RjIBt@g!9L]lJYp$+.udU7P`4JcY7cuCrUD+Fm;)7WreWHf`YEuqMsMJgI4(Ag%YR.aQN4C%?^#cA'Z5jT(nW+7)6B4T).GfYV`_mZZ^,%=q+YA1^GW80;97hoOFKqOP2ZY8l:8-mJe.2<IS29S<;D7=/U^*N;h7RN?g:p_EO%Jl%TLkV-2BOW5l/_B7U[oL!E+)Xgd%!X9K2*_$<@?\iN%-Lo=VnV)`c,QPZD7s+OW6c,8]-G6c(jSdLJu/![aJ6DUeuD(<`"0O^1"L&%]fp@P36g`NeC"%d1o^?S*c\>mrHfEDa&`r'q.)U@0#HR[1(7k,E7(TJOpuW3L,9/.KQb[f2Po6]MPu\k3XIfe#cG-K+fS$us.5lD%QX[[2I@68D8Edd-*P%ckoBA5+*9r"HqPNkQU16WmTIt=YPfU)L"-/M8-3$5kVC$9i[sAZjXqsYN.Z+)q4bg,2HFch(qleWY\Lp0l%]=M*%Fdt0VVj<rkKaG:=;39*bPpLR'$<gBQdDf$]WPqoqR]06QL\,Fd9X`$gUO<CsiN,L.EHnuHKhJ:#Qi!\fM0U;I-Yth-ROm(A%gdlladNF-,lsR)DB4F"p$n#+=`RlQfojitB+]Fk.IBQ5MB%_W-g;Uq/TtN6'1#m%!c2gV"E#C"827GQ$7BjcgB!=EB/M;lY1cFGd%TuSmei.4[bneCtjXtH`$3S^CNTWB\X</Y2XM>#j]mKUoog2RE`3T_797:=`FlVMdP,np6\.<>Xc_0e\q2?5;DZ=+e0fTU8*\m">_%Y^[iKOHkBe`gmO>3ERl7*OY2m%09,Son8p-`ec+3(sWOGMtUZNnX81:(q'DrmGDP;5+=9/A#p@q!=CL9@i^QWPMsWtH$!@58ps$I%h4B-fQG[M-*-!4Mn`9t`,+UHHQ-,>J+CR]HA)\I17At?$Sl1&r,uNL;^*qU`AQU91"rJ:.jrq]o$H+F$ku\3=p$tUXV:4=0Il$Mn%1WVOFN2P=P8%Q6$3EOjOA2dmR9S_>T0tianD@XAJ7aqMj)JB/`J]rHQNS$1N;7n?Ee(LU8R'+MDb[GZ3(9Am_%H2=!8tbUg4U3\j%7QmXuS;/q21BbE'cno/Of*,MZ?>Hk#^f0S[K8r7:b$]GPI-sD/&:[GhBi"(o>cQe$^aL,KY:^r^kf<MA`:KQ)XAE5E'iu&8_.S>Z%cL:jQ846*_"/?Rg;A&`R8`e9q=OS=1bN,[8<2)'c57?2RaKpg-kpd9cOfg/eK"p/1W<b_23nKL9"MKN34)Im\9PEe?/g04#PK9\6%d,-J8cfPi&R9<I/>J5l".b_Kf;bB6a@F'l:asYZ(Ua#\kB1(+m("7sW>V_5GO]PFgfnfSIkq''^;16i6U)IJo&b`W=.T&d3-Gfbe%2<o=t5rC:iCt.F-PgHa+peBMYD]PIu(A'Vhlb[Sg>,oE1clQFe>LJ,t:[0g+X;>'(4<pu]H"L@S@e-Gh2hb)p6LkP8bq88plMpD?%Ca>_Z2LLMmPVnr2N<WZln=,Z(s*T\_D;hf:0I!l9/J&8&!Don==UX>uDOn55Gkl_aqm9^Hm8GS3hnF$FW2i[!B<Y!TB_k>SoA[@-%C$Mh*?D4/if/FRG5jO>R,MtM`=ZQH+kbs@$m&V'Q5V[jS=V%V&LA77_Zqj18'X_%]"ELMPXu>QiJi.QA,5\M[Q8ghM)J=iP[a&R0%H-1e[3,I#ZdeU0e@`As,MBa^N4]*)L1Yr\MCRF03S@\m$echW.83#e>`1h\<q@KR53&d!rPKlok?PjZ+RSfNU*<,!W)FMU8WE=3o%r!""[1RIbWXWk>KfZN^Ld;POd[T`K!_&ba3+`:!^aIC;^OhCtcCg"%_pi@q2\MQqMdFa9h&<qW;lH!9]-[E/Z8?J?NhBJE?,Hj8r%Tdc=&g*jCG;8pSVbAa8L@71_4n@&"CeE#dl;7gM>Z"'h#m/H6KUG]0<PCk4TB>`AJF;j<KggVcc.Z_kNpl%qoeQP\-,u.>-"H<(-%]Mo1f2?nHHMJ&MHR48Wcj>eDN+e[kc_=t3H$r5Z#o\Djg,^+W-GCR(c8S;5Y9KB#7\J68(-_D!R.J$q8o]CBD:DM8<:1-*h(Trqb%UmL@I0rZ)_A;Ic-^Vu/.O$QFpp#sU<f=U:)Z!Dpm3%pUQ:7\eiFLmc?4d4O(Gqte[(M=%d%/kT$LM^%/_'-s'6PI2I$0pef`j99g%r>kE\\W2'<Z23fT'<Me+T;JoM,!SYm/:-7CkTmX9Aum%\(Qm8n`Kd7X4b5hMS@8'/-71j5)*F]cF/iC'#YEZH@u@#<@c*SYs&NF4%cAq'!^6:B'`Z\tj\-/-\0")ojSN+1CG0f5onQ!GP[ACA6AeV#CWT89[K!n/D\5ea()WO[k&NmE2W8Ze5Ae:UU.fI?@3YJhXfsf"s%jWk.4BCoG2n$X?0Rsf)E:*GFBLuI+CK3kJMPs#f<l''qB2"%\8FSbb2Wue7rmQu/CjV<4'm;I3gjO(u?2stU-O*[)1HE26$<o8Xe%UY_[B^T^^dIIJocj'HkjAhR-X#/MJIJG_"ae:MlD?>au3:+usSllg(7s2<g6Xk1FbhV^5*c:Z^#hnr3m06Jd;Jo7XcG;/4sGJ2f=%]"t%3b=0`]mI0+-5U[B?*L/'q)@hLM66+^4<_3^];aG`*0MjGaY-)rbDJLZsAq.f$B4]'\m2eST_4\A#(_;\.HbE`UF;o]THKW8S%'^AK7(u)D`pN;f7BQ>A)+ZWGK0UfRM8F>aUaMV`[]b,?ImB;/8J)!4])^+7Q(l:C+_cT-!%sjf?n20,PWFS(-N7s&XE;/O7'V6dM%DKWYC-:0=p)<]T(r=OtuO13gJK4*%9F&sGW^eq_u,.tZPDNDYj5eYW1A@GQ_O+VmPd23l_C!Br2TtO5i^F\0,QAVJ%I6qYkEMtG&%l#q\X,4>7`"J_u>YG,%_jQG?[b.*$P<TMJujH&KbbJ0k:8(FWRXFBr?<Ei:@Vm>AtQ;dB;e#\]SX6/0F?9PDA\`?CXZWpiehF\Jt%293*f.#rG5;(OcmP*'*Q81i^WFgDG*FjIJSMb1WL^6EDZO>V:"]5S`gLG"OSiS#&t7uCSQ@Tp?EA^r>-[oag@3'KI(l$70SJP_aC%#O#'lH!T#ZCf[K]\l2<D]MU\`A8l9E6'FI9/D];RF)-MI:ajPVTil[V$GDl1rNWr2l-Mc3k.)E!g"1Wo5]_?DX(e$knRC8"Z*%g2%_/.ApZAQ6TEI8dd!7'<a2,hsd#(TGs9^@kF\mqtU*[MXPZt_LuJ@)RDhLS*\ZoG:Ej#Cl/8MPeIQ)R+X#qm,:-a2nU-8.2u*J)aH%L\D1q-5+NJ"1(>3d!2a[k$SFKk9/#tf8hts>qs1(_<\Zr6==LK(AbUt&9nt/n'j0m_lCGeWfk5T#f'E@:j4Gn5U5p@%SQu(BK<fM%.0FtXpmg?4Dp^2mRUp0&_^r];'__k9LmVu4L_qQFeCdOl-?e<O2ATJ^NJ0Ot(*VhjI)5WmCJZ!UX_-c,k9J;c:q;6>$tKjm10Js%%C2a;HH]-8_$;CZG"if`m3HGe**)Eq#D;.OGeZlgJZh@oX_m"E[%tnSL/m7/7"2[n>G2R[!j`qXhM9UuN(:i]"6I0[W:2A0p6jJAi%E=-f[M^fMI1&5dS_7P5/iL5QSUGaR.1n-jJC**(aeniCeX',&$W*dTo3#%\)efuX9:#mSGEESu8dqp*eE#m4q:i'8S2k;L+hQK?Z%[5bgRm<cJR$g*+b@@Jl&FA*?L\RCA5SbQm">I$jagQIB4$;DZFWF4kBL9#@qR'^AB7,i9,2;N=5#el$,XP97\Ck>bGP8<0D&F"]Y%6"C(u9A&+,I:Pg-X\Yb&M(%!d:4uEoJ:fCb\1XuNg)<j/KKCjZ>[1d!e:DP4T^b\_J>Wuq4^QZkQ-BXf)eFfnj4]8t?/o_XpDDMD%6:*YQU'&G$1$.Yg/NTOIZDHS9nOEq7h:.PtR'?=,-?CAGZOV)E7@Z'GM*Rbg9@ksWli?4<OFTkId=H"h%EBX2XO+4X(C;T!IETU;%.nDot2+&o72W:Hn:_UsI,>atcS$&Y6(O63pFk3V>\B$HO3CuX`.s-.LM%,pdG$t3Wm?=Z=1:IM$,Bb#YaXL-:-!M1`.o@drXJS`K%W>S_`Op/c;,/pu`.'a:m(0?_hZ<M-;UtG;[>fe<+0r30WedIgm*a.9qk=[M6%S3kmio8I1'C-RH?8RH,d!K*N-$qiD1q[2$j:"[8%XN/M?5fWI$P(nrb2G557Z!5W4#%GMo+&C`Z>t9*-#JOg0RO=#Keg2f/@0f;VWB@!'FBq'EdJ\<:Z;m>!JDp((Ls"ct8J8UF1-JPK%KrbBcAi`+.(_H>@d+-(gef9G]>$>bB_@@R'j4N'.FLHG!9lr=s"qX,m/g.852(W&*lO&V?(Q3q<X!>gIId_PK<K>QR;Q(9.61md1%eg#2?'i!<PZ*(-169]A:qIE3\jc!ku'.q#lOQdb*icP\8PrZ."H.[\!RMaGZq<gP+>taO!YeISkZ0/Z"m+BqolH17IRGLC?IBh*0%/_Cm<P0JS37aop:)1A7A3lq#\c6OJ\,gt&WIF[8_KjrB9-,<WVCE[D.2IWE*dlcF"FOq2naWa3s\.5s.[W^I^&1YPh\GM)mnTBqF%\8DTBX1XP\mFZuEKnecJ6H9i^6nGM:0%V(7Z/t7gUlM]8cd5CCLoerXE69cbXKbu6e*Zq[5[>1+"#A+:0=8goK?BGHM%1LGjb1m$%$W?2X3\PTrJu"*n#ie\AkbuRa@U7S:m"!3"-o?#N_.%`u.F^IZH)MdF*E\WR8UtQY%so1oF"X1PYd';H*pB)p"/$:%JOO*$>;n`B%)+D5U1,/f`VL_+&\8HZogucRD5Vj**Bs0deRM=Hkau%/cE#+7]k2Ku_HV=K.?#IZM65tSE*ERijU]+#GWM78Voc9[V,smM#AeQ*Q%66_^-!n29\#JOms+)lYX[tR]hlDe^m6Gp8`Ub!uCUtG<YiDJ%p65*FV_\G;te]/Ea=K$b6@e-(65`pUa7hXD&DIJ6]b!U=X/ps=Z%.i/<iVVh2[A$FTp,1BtX6IRfrcp.rJdY@";r8-GPQALcWDI]cp[Eo3LR7Mud#MZkFkggCoUW%d3RheUJO,6$J<qDH)>bNd4@bjBt%JFWal[!eQ6Y;r-/@B[R[ljC900F8UIJ0tom%X,WfEDgK&W(Bq6#XV<:n.*h1LCS.=hVuZem6E@p:lS#NUZ8-U*q[PEFcZ]%4Es1W%2jniI*I%bqA/Eb`/M&g5iZLd*9^2.W>B=@*YX4>Q(b=$&TbM$3[#S7^9e74.(u3+RKg`Kp!1'C<%P4=3>/I[9MWm%FMI"NH5+C's%2#*5up-<;!^Qd#keT9H["tE`E],73f[03pIX7D[\:6D1NG7!]%+R:.Z:9m<p6<nN#PGi,P'VeA*bRL:s'U%k(nkhkS98aQh@`>l1%;pf8uA4-4CTgB,Mf<]EM,.sVr?m\Ml,?Y8I=@9VdD(\kf$$FO+%Qc)fOV9m1)6p9VO'@JDZA')4@c;T?T<gl57um+%-I>o#K2)nP%[qoC&[7seIZU3qciu=87*Irp\a'B:C2D<Q3S4+*9Q5,ijP?8ikkeM;Y[VD5C._6VAbW7Z"!(<37HQ)5`X?@`4M=$]t907*0gem8L%YsKQ+I6NfHg(PV]4AppYa0H+)oGe>Ufk%[o%6Cmjd=L<cjoR!<`J]QVMS"YiH6>;,Bd1Tdba#3E/qL_;g4XSV/jS2hW,9cd,Me)h%UTDi)`\%:BkdA&*LIa8FM$$#]Y@V\8VEPAgLus#j;6jY<TF5'K<p0l2`hCBr/L7qFns8^5U''.(&MEQinm3?$-B@E'!WpkI4l*=g%#^!oTVSVTPRZ#l(28WLiNj/B<D8Zoh%=+7"4_UO%$%YY/%R\'$XjqT"S-6+uGc4l8(5J2l'q0lh.eqq)+aPno+Upe\i+SuiFuFM/%=:-3*q>0ZLV9IW.6lHX,mIOVKabhZVCiR/;@U9LEBR&_RF1J1i$ACN8[nc;A&r)/.=BO2FEH5m"l<0hHBr8giZi_=rmm<X)n-h\U%`HDuu4An-/m+KmeTS8,WC66>Mr3X%>==gtMqNG'Ul(e#a?>`q[CNujeK5HDB7[b]B$ikp47KqUhq,"re8@N-r^bCm15%mP.!jQ,.%e261sL]qK]m4AP`&kmACKq=$F2H,$<@H:>W\,epRFWsi5U#:5\)iGE!QIspDS3ru_U>f\CDF9>%&+HRS9a`Q-_RfXn8-e%]jX-CX%'U*B5?DkG;+5OcIb60L5$LN?N:sjisq/Hn@*I)#un-)nu$>]:Wd:1j#T/Ou]/ei>fjeg!)>tsO3@+AY37r0B`lQH7gfS/SHa@A!_%+a<kj!Hcq]21FE"8qi^(jbtUJp07X"-hMeCKTY#>Z69]I6&Z+Hh12OiA^cYSU1_h^Xrc-pGZ$(F-(*L`$R9;7%ii[u4h1EP1Uh:\%%Ql+JDr9`67=IX]'>[?'$`h5.AX;:r4]=.Q>`5Jd]i(04DXigJ'JljW2e="hg-r@[SJ7_2+L(?@6c>@je_qHb$rf3lMM<:U%A=8p%@U,MKs$Vdl?&,://OU8*/'ll'(Cgd<='N2u/`o<2Kl@c6;A4XkY+H87+U"Uf_"Fg^2\$08U!m64I$&P:/1t4))\`<$FICQP$SCYN%V1j.$#,[!1&r,b>#aWb-9kl`Q$uqD[/gCQ:nfC\ZClG5<[P4TS6D9#iX@3Z4BVD,p-R2f"*]jOccZN2%OCILZ%^r7=?X-Q"8[2iO%SDOXX)6U\MVdkFC\K'j-UmTl]S?S$5FU`s>)LPk>G4NW7Q(NW4Wa`1(4Vu/E?!V7d5'H5f_A*`@BV0#5@]V.f.WG[Zp9`Hp>Hf.4%#!SkB/OZYm@]P$D)6Sn23k2bpfYa^;3(]gC$#-EG]c%50?/B.s"5E@N?bWG$651^]5<:-F\jTYH0[)S.@hrM.=us\sB8da5#R3h;%>k<]hQih)DT1,JYe@jg7Of@f(+h6"\rchV&5$tIbYn#]6!7`TXc_Fp*1H::QUKO:D/Z]Z;!F4/k)[I9HJRN/CY75-gA&=_bonA@/%>p^d)3#pGQ?e=6F"s#[:>ad!<+q-.?//1XZ)L)LaK,UIrM"]??aAiVFcl-j)@NgBY2R[hGnqo-:%T#m]%Q`GIpZbl)*+Xb&X5ed:%D.Y3YR^PUQ8"A0C#ah_\as$u`q)p=+c>$*m+.L_^N[*HfG:WED@0b3&V&Ru$0?3%oBTWA%_H5f;9cmcndIiQlHT%CTLTrZI"8aB:%/tSJNR0NWL)%\r*B$D>YC[o41hoK\1?o:djZWQQ'Xf)Qder$,pk;`qQVJT./KfnBb,UrA6e27Zj`:g@d;_@-SVc=bRRY'A:5_dW;%iPZJOpOuPn6-aF<1_)S?BVB,aUsZ&1!H<a4bJZWpeP'4Rgo<,78JYDpKe^A&7K&NE2HGVbaA.Up4^H+)C#Y/7eXWQc30`C]piudK%aYQ3+9`p)+.bt<q?_/mdapJRu_4n)2eq#1Y4Y;,%_0Yd-+OQV="!'oXe>!Lqf>h1EjK"3kTWTUE$+;5($3Ce/J1$R(U(5Sg)cdfX%DJfoG6JFo)gCX6C.<^F"6g+Fo_\Yg0i4[/T&"1ZRQDQs=SL?3LD@ht/KF*tF=Lu#iZa2GkBM)#d?Z_,Z()DrnUP1npC2,Zt+q"R4%mVnaO[AZ1`Vf8b@bi-kT%1B^tc5I2Zql"_cW0I(mkj1'84Ws=;`1!/BN^O!oT*b.g!)*T;ZR]VhMCk(b+:bi)Br%ReHrkp@7"-Cj%#t(;=/)jZU.)Upb$s[nb?OI2m,RYDOU^Rdq6)M9.B^]YKVg)[[1l9XgiS:,#L:SGo2&:DiP+%%kYn1^ulkaQY`bbnP-;p<;)K713%m/dJ*%#oQDoIG)Hh*[SsMM\RV-)iU8OpMAX!aeFt7`-`:AuMAa@[Dl@=j4$XKoR3kGW%3Bs*uCj.p09t!3e$]Z,e]*\1(1n1)!i_%$)XOD$@RTNOOQ*&F$L+-%k$1F:2X7_j:ge!m0s<jEk+i7L+qW<JsI-n.U9V%=tgLL+ILI6:/;e\Le8jS3FRWM&.0&&6i8%3%/M>c%#S3r]/>SLEo!<SD]/gN,P0NE>>hYPV-6S7On7QQGD%U64Wgh*4a4Qu=nF?i:O*M@XH\&a\HHH]b'S75I6B=_l<bRmFiZM]MLp]V%%KC9Z0JZ#8(V/qJfr@#)j9d=Fl$(m;9A!WqM:i@j77))oaAKk3d`RI^bkh%9p**]ao+WcAh"c[+USQ)+7lBC:]fso1Q^?NI8%B\4&%9gUoQP"K5RJP"?u(T1?9EJpA!Gf$]#%Qm\1I7G+;3g#c\1B^gGE'3V'>uoR^&oIcNhP-V[rT>ReUI*O_/NHa8^."7&-p63pFsiO=%kSEb7/g/-%d,%G:l0Xt#E2PD5)b.-\EX!,/m4DVNpFW"=N?T81Gg$;m?K_jX["9!%p^[nUie8.c@PmG)Q_BecZTQg@NZ0Qmb&?fZ%gHeC?+n23C6Xq_1iSn/41M"LXN]:8'dI_6#7tg!@[Y-dVZU2P="RR]&d769_W@0)q7B$#"4D'd88"/?G%`97"Up]]s4l$%8cVf:(%TJhTLq>_+OHs&!9Oa$'u6c\dCS.+@M&7QR_F+ogt0mOp*^18aEa.(OeFQcgh5*Zn0#4=uj"ZXq6_9`lolnZN>]<WsBo6e#[KoV'Z%FbKJtMY1ZG@4+u#pl5Id4m^[>E;g9>-(Aj-jX"KN.ik3`gnP%_nmt*Xi;&u.5kECbm;UYfWCul2iBWA0`;r>J+9Ie420$Fifn*IR%rkm9&.._gm;3F6K/l)V$e+b*kQ%qOt1f['ima=49!\lr/&4=37#>ka/GQ0t&Kcpkf'QP)Q=L"jaHpr$a/6[a&9Vau%TENgHR4hd7%hKrL<Gq;pYDhf7VN,K*9:`"EiYs<CQ!V<h@k:pmcS<8Y7D^/\ch9;4oBkd[R6HNm/o"Du.G+H\V8rE-adUL%*XO,>5(?ar760&Zb%KhDh8n;n1N8.+YQ(p1kcKgK.VE^1mY#LR6<h*<s,St?_Y^>oHq6<c]_U[Lg!YW[:OUQ>I(eFAou*qdtTQGu\)4k](.qBBb*'G:Ub%MM5GoW!EbnLpl5/[ddL_j^@(S@-Jk!LS#<ep>FFf-8>6%LLm]t)H3Xe81hYKM9$3E):Ede<jYS+"a\\P[4pH+_l_Di5Dt=fjphW0%n),rh)r0GHjU=nXRp30&8Hff$mP6)Zb1)i0ZRG:"G\"7q/Qe4r//gZq:t9\C9UhqsYf\.&8Fs(;.!-=;W1hR(]VqG']8Zli1bPOT%Id"hfi[PhqZnV@2o257e5S([J?\]_"=J/Q%mL9UtB8(TkbeqJ(#F<GRim;T5i[FBA[!^GYc,(6!?"R#u1<U:[[#g#=CgnG'od=VH%ieS,Ej$XT>OCXEQgn`<'6k$cH>a;+HbV#W%$)WCV5U;c>KBd-TDI[:AbrqPlck`$W>bV;03[S]g4Mcu!.q5D5IWB=/P#G*("a,YC%Nu_n[e,`0V#jlf[";rp1K7V1?&e().JfS6H%&=RkM$O[^;^$tjk2_,M(JM-0<\_lQ#$`)1WW<+p#%TFN1,!`k;:5-5p*,uZ*aWgR%Y[%`h!O6C@&C9/Aaa[iP>6L_UWQNAO;9'5glMWsX`B6RnBL`h$8?jNHMfQg>3XT(")G[aE!Gl@-(rfR;6Hh)==LnX%.=;JE,AO>r%N[:qG.jQpl@<-H3LUVEM`P@:0<`e>f;O`sg3k0'A'IO\pr*0\Gl=M:T%25Y/n%^(//<L-E7=rt-]Kno0bc(HI$u'IcGd5);H&Y?A%b(YGZFlkbsKgKDr`OH3nOegGoCjrIIDNV"sW'!oCi_lSLp(m(I4I0!.bYQkn0m<`uW2*6+JqG,hTct`/_(p]/b12!4$!:5Aqaap0%`JE6@m:3^A#5E`ATo0EYaOYMT%q3Ej.'TI_P^eEtnsBPpWo@b-rGo(^RiYP#UBkai`Hl%/dE9A52,lhCY9'.)3o>X6Q3i0R$ZqRO%iY[]u@V.nl-j8/+%&%b+9Q(Rs*ZbVU,;"?&MP8/6[$V)\JEtBi!^Xj,$ukJ$cp1>noV`X:0FS?jT:gr'C%QWS$8nQ/Tq''."cp2`%:$bsUcsKCG46Ih!/NXF>Mhm]*HifWfp\O*jFTq2KSqfdSiN<LVP8cDXb7]SrY#%6&AnNa$EuE/EOGLV1nDiqT*nVqP#J'9&1JOEc%g+<nVU9c)o-$DVt_hN9Q^e==Te`R/C3jj/#0NI/%Mp@h3GfkrAW%MO1%19Y&6nkiL,':(oiB)ZJAK0l)O'\1:l#Xd"W9M,Y[>%>m%M@N*4&\/&D<43B++a66;GSCI^nrCWP'o@&O6t#Lne*#[I^<lInAfrbs^]];M8n/Dd?30Y4FEVQ4`JZ21*+'c/ij!_+117Xu!<)a"%6$25l0b[fke!\g,M$@fblc.lk(EtkaP+!F4E0*u870Z+P;Kmd5=,Xp4Ll0-7@!*6gMP2SCA[64LM#o,J%0SrZ%WYJ2n3fcU%DZ2-%Yle:L%e,:9#2],%Z54#_Z@lYZZQKP)JL,+G;Tt+a.I\_AJS#5V69.PGN0*Ai+[BYC&DVuG8>G$D#DPcAf7^Md[k!Ar7;rK"`SnBa%7/3i:Nc'!5+(u]oJN+*A81jTME#f4d6&UmoF;C@N`JZ=>H*)o'!6l;Y@\$ec^^;[:i>i33)T%Y3PYsP,^s\sX%;7dS0;Gki`fEIK%/[7>%m.(?]80e<F'0*g1U>agZ8HfWuS:tDo(Pe"O`23h+e(O07$XMB'<@d8O`M)TK1hqk:\"a0ei_9]ik@"f^CS,_Lq];mXHLf)`%M13;LnOQb<Uig4+n2KR_`dV3aq<TtEj=p*`:KH\H\D`>_#Rs\b4Aj8]LUdECCs2q,`R-7W=eXWu1m)aW8%C*596Xe)Z?QS:.mkTq%EIC>\p6J5W_F.p2epJ8iQlKW\>?kW&1RPE!Tc5L41^q<QkESXg:qCUDcshcW<rk%I%d8]_5tI]rD-e((6'U+2q,[DI6BAF9*"i"I%8*N&GLOt,ESoco9()KG_kr#%R%%1BZm_CC-Rhk!0-$i;HfL%)P8`8mN<X#hd49tV"QDX,?_?//rY"oE[OC!uc21S@p(KUhN6g$JE%r*Wc>b1dQRO2_hu:!1D+`,hLT7>cN5)K=((O!3"@DQXqT12AG_UVZC`nG/UT\k&fR64IXB(`(u.JB>JcbHStr$r)O;IR/`@EisMH%J4_=Q.&"36bdun2@u\I$ZHF;:A1_C+YX0C.VMW5!G)q@#2LCFUc-f6@0KMT8G6bXhaJ.*NTK"Mm%9F4"9i/p%^8OH)%Qkn.2$!`G%H>^l@bSd[>`>16H20StM`J0-=+R\G9'X\NZf@(<94?_&E6;=XOTcn<\R&Mh4=r>SiE*q`D:;GC>4Ea@2BbmMs&>rtu1KBe*h)abe%d^UfnhSV_,-ol,r:,1K:/co<h4khS;hjcYYh@:6*W5N78KAX"g-`1RNVqjE+(9SmVpCnL.o7.DCPS[7uL"4cpF@u<DAtW)u_eY]c%&O[<]"3$:\B"fL-8hrM])i,ie6(*D!_*Be"'LY>YK+L2b@U!B%n-F1%rtWAl*&K(N0ec(T%U"52)_:&gButiD"`co&K>E4E'VZ3$%X'<FQA^YN3N#MH<8krcEW-Q7=!6>G`SRSj^a"[i&.?*72$m&ddk5Y_+*130SZ(L6(M\##BUnF=$;dSgJE*h/9,8o+Qclnjo[)<K4%$jR/[pP*,hSVfF0oLoLNY;"7=&qG^e%#m"`Q\(<m(*fOr_%.[*GtjWpTFP)6(a^DHn^tYl*])^tVBbMRZ"V]mlM(W%Uq'r"0:dYm%/CkCe=2PjW_nm'cEO]Y=-q8MlMAC\`OssiqGcHP>@XBX7;+M+VE67&g2?sSr$l9G*2.?%PROI5h1[M>h'Tn=Z*?\BNY_nDP8ifVF%@)/MY+(b78J<W%eO$gn>NoghGLRH;p;dO;;,*`3D%SROpY#_2:K!"Z?[b+Sp^*,-&178VpMK]I',3)Q;<s(iFBR"*?+l&A\.P0o:%_1Q<FilF3(U@^IhX/5s607!/*.Bea]k,2>JMn:2V=()Jp4nROWDd2Is!8_YHc$o!7<pX/-ZeQ(iC[BI:gPogW6b96JMm(Zrb4<02%>H`@T&AG<T%nH"n2]2J:HgmuFptoe`9-,YsYQjKInL,C6X$3U9f*?pN;<./Uh.[>8/j)(mbF@<boF*oQ5N*s-LQt;6dh_@OQeuo>%LST0]o\9<_YPLEGN*4sYmFLJ\^G9&D#^$G%]_96W`ooBuIm"i%UP./N*N'sl5'Rf[YpAh@pARuZn;-WSWB(qI@i9''l)</lpZnCL%ENlXIin/.2RKYZ:SP)IASIZ+j;aTQ[WQ*tr1*/XlT6tUU78/`]K7e.kllLn]UgQn3WIa)7!EQ5q%)Uu5UFn%$qW0L`Yt%f63XCIK%EtEd>PDN:Ph*e;:a0==Q*OSCm"Zp^WjcJ'MCNi,<4Wr><dP3RX;<s6<?QY;[mj0ZOS#AlN%/BK8psXF3Bi>N9A9!bCE";CkGuiim%EOBNFots'Ll4&t*-#.D`]XHQ6%h?JdG(7*/b#(D2=nCiP\R9?"$^P!*)<2'*%DBi28?[1i>Vs1s!3-hONkN(@*`X<,XhEu:BQ!46%?o]OaSi+"N;@o7#HWMC<Ns5V^&Nd1BmGZjWRsKEWfhjRbpSQEp;jRB'F70`SAT$q\c+UZu2r!JdFm[Dd&fAlN\OUJ/eaRq<ff]gK%]cYkaghY$A0"+Ro9WkKTUo^-s8$02gHTM4X8uS>%UFXatW"7n!BEJL1EIfT_!ES%lkl_sAGW9LEh,T3iXQ\*T9;n[>%pN*Y&Ch@i%(Pf,nYc>ktP%e:m]q_?23*O#8bPjB<E/#-U#BWOn&j5N'H@qJ)a39K>gdZd:e6RpDp(\R[.-&be&'(5KYl8"Ef+#@WCcC&:o!'a(%A>@`sNe0&0))]'K,aID$L?$*IE#A!a#%\W.en?]"c[cJnb3O$JDdA6bT,'F[$oINNPp$**VT&S<_Uu4gTJGVPZX.6I0&1LH,s'+j%YMC49EL5*Rp`m[^^/\uhj^Nu:U$Huk:f8?1qt>%W?V'G1K^#)'=gO(0*0O!R0MkfM:Xkfuj=5CIH&"I15ZpQET5$b$*'c8'ehl,s%-`/pKjqT!O%,.K:dr;+383KTbkI!F+0<G[WqpsG7O1'[aOY>`Rh`GJk<\Ehf0"p8IBHgf<K<HFpEe]gOZA\$0cGcsh?lh(F<Wu*f%LC?n,aO'C@+k#TI3idler1ENlg@U+hfugrejW<7kX6SD.7d2el9]\ReC6-os**0h%]<g!";q+=?@\pKdSO!.tIJ/W_CDF.PN6&)g%QnNf=rc,-jqtbAg9Ts6?f$r.nk$m_8`7hU2B"pOKE\>SY.&tlGA@5ZSa:o#e'$4le^=8FGACf?.bXL;nf:;dAAR0-;=1u3CReC<r%Xrl!6/IKWKc#6J#_XVAZ;,E;4T&68]M6g)]G*4bDK5NX7m"V)#Y`-[^g$mEmDb&KYI9%U@)dYRg"T^uRkU;c=EE.8rb4s3RMWrS?%VE];rS\Jd]1g4Z*qjlY!4:SotQU-+U2P\`OFJX@c4:B`&<lP*='4:Fb=&l?d2g*@NX'bl&.X,C^1s9h1SS6a=\+6'5R`oP4)Y6T9%+1!0[e?a@3nE,l9AV4pd"b=04Rs"h*4=@m0DXLB$OKG:$Vc+ofXY\3SQ;LF`EU$g1,2HR,H")BC_t!!$ps`H`8T&SEBc,!u>f%).%ImoJr75NfcdP2bqe.,>FZIN]Ng>>Q]-Q5Zs*nSf4GH*8RB][Dr;@:VSagVauN)TJMZeCa!#*n^m($1n*BBnNXnEP/Mh(VZ#LcGl)%LG+!+od(;0\GUT?cB$n]nk9W!@h]>D.3u"o'q$=5[s]0"g"!=5H4ShpG?of/%d1Y^dq8NV:W]\`5N]d9;r[4.]JdS[-03[b0DfN%%$o<BeA/reGMhY*DSoPk^F,A@$%u7\Ji@rE?`,(+E*+#+RR,:cIR/V%AFoIgej(KJDP;4Z;&e:]:0&\L>f-VK7`(i/Vnp;Df1KF#6%>)1!8?CPo$&u'3r"i)sJ_bBb!cg4'kPZV:(\akX?E#*@$/.qM5T7pWr[/N-__QO("M?]^O9,m2dqePh1R/M&3/1'[rG.&fA(X%cm%>',0Gqmi4)^opA!QFSAU0%'59Re&U61hGb2&oB8Kjq;OR-//3G'[0RaCF.=oR+&T.S'/.q<h@PN[(/;gbHn`ARsfQ/+6r3ZM^Q#H%@SIa9$TTZ-NAJ6CZ;Fa_mdIf)P`_RkS)8VHfNQg+Nko6#mZ\!pP?M5&U@ilHRqfS6?eF'""@)Y(-)=j'aYsK$HUTkdbgp&Qm;=F:%C3SFthWdDZ%ti85M(9+4(0?S!G($QE;&#Dhqd0^"]=RlHY1o3j\iN1,IqQp.&%AF7i\S>*,nft3cBQLa^T.:Sd&OZO5.)m9GsoB1%hiGj2l7Yp:\Iq7urIUDNd@i2EHG&U[eM=<KTCN!\C\RtN1=Pj,`p-pB!HK3A@7nXm.:4oE4AqXE<9;tN^GdEmn*=u0.\C"7cp/R`%80B<BQql-km,TW59\Jr];Ll'3Ld'@F'HF'nLfd_e+"/@3&ATS:@U=`h2e\84:W&=+4J&Coo.6&M2E&sGb4I6%U"B!=`!b6cBBP*2%9QN6N!CZM^_"htj->UnfP:uqq\_KoWoAep-EUs#eH%)8G5>Fs4eE=lodsITIIg*lo*@Fd.'+U69m85=_F+/d)5=1q`+jZ42B?esa%UIWDJDQ6b7k\*'e)ndlW;S)-,1XU)d:G*Ipm?Y>B4P&ZC;>V5S3kZW8piY:tO%8:,dNRC?Wf1Dmg#_N4b$3GAE(%p6E\ePNFQpm:%ol48\Xm6\6;0$E#KD5&aSSiMHg[mJ]b3Wb^ceI7HG$4\(r8kD/ceHuqhO%%,kj'?"]8qb/(-Wph>l/=*dJ%gf'94+C_UbL=+R"8S%(++*hgom8'8(fm@G/tc%*-+r8b85i'11J*"g8Et._93&Em0`/dRD3C::&Pr6TS$KL7*HQ*:q!kT1d`gtX5!:Fn;o&cKD#9@7$T@_%Ga`Gn"_VdcYq59KRr!<QWbI#[@eMr]-.m>E>u9.pB7oMY3YGAg7GQ2e2KQXXgi#"CgW]USF2,uTD_mr5)t'P2IN.^nU$eD\hki?'%7dSoKEur*@<@Am&m$.H-G!bS:Me`O1:tP=<N&-j:dr*]Cb7*=nE`N#MfeA>.BW0h@0]dLlW8H5]^I)Mb&=MFLEUDWc1>Td*e%^<S%g8"&.?$'%(h`I`WbF.q7F+4/=[-aFUqkn%8mjouSVg[;^P;,3N>Nbq@WUnMd>.388o/XR,WXJl/2#-Fp3V@`)bd;^:[!Frcn!Er#%?V*,5[gUD9nn1Q$R*gk?jVM^@$H/n`KC[n7n<Q*Z5LgAA3TZ00g)#/*k\(fn?qCdD<[gm(CWl`8`UrmY!7!d/f?k4uQ<CcTmh;=_%B!Z<Bl'AcNb*#!CXV)d`]_:GKLeW#NNl0ji0F9&,IegVKmq=udJnp?!)4)Z*<b=dC-2oB9pbJ58C[jW%bGjIESJpZi;5VuPRl.6Y%7\(ISF`D/p,;OIXb^fLNCWh4qeG*<dk\6HM\Pm#+e<j:7`c#HAO+J!1ACp@Yq.L<ZNe5QW?<]RsR5J$8@iX`rnN&5a!\'>3GhJJ^%\r`_eSWbkqPa<C/>Z8AekTC^sbsD,A*-MkCm@$GD91Q5@gE![lLBXhrfmNt1pY)/N8b92FQgaNH%e&hG:L=c<q7QoGEg'Y[($:i'%c.Z`!>#"gp1o$Z=k2!W^R<*fFD(;dubcbk5_!_W6D,T9bNs<9rFkK;9?TL7>9:M0.qAh2*\e<&GqUJ$L`+cS;*ZU,#6n$BE+7X[6%]i)^fT5o;QEirZX,!U"6r33`42;Ri9G4B&g0Ug%CV-nT1%e43Sgb6_LT7Ih7F_703#VpNbY&4*h8Cl+ibom6uFo>S)g>"(4Rr+e-%EeN!i\A[RmhXrf$b/hB/_)F=Jjp#0"B?Uh!\\WK-K25WeRi?`RK?(AWpo\C;g@[;uPjbT=>C=n6nL78lgu>ra=d`KAF,OsSn]eAY%B4!`YY67=9M_>7W/%><Qme'aj#D)a.1:?9$P($[F^+u'\>E_ic#G&gq,"gsS:O,FX[=#O*r5OYo1OnQ=Gig/i'on@shOSU;jOjD0%N`d'.kJ+dlZ<c-(U2dLU[BCQlK#<dB<E@W8#D_]oc]o.Be)BM'8);51CL;MrGF=fG:V2i>L!6VMVC""V%'??L^#-&6SbVMs3dJo*%J8;d-:B-62INQPf>/(N.^RMOVldFCQX.'^CG*hYp0#qnBLHu4U.+[P/;>Y?<ikBsRJ,/u)K'8FQ9K'N\lsXJ]FZ_Vj%`<<#(iON\%aH_28l]g]Rf?*#(3AnQj\!iW-_GS%i-L?gY9"E9E(72d'R*%02pg<o?>iHT#eA$+$W8.ApQ]td<Nj[H8C;^lPpq;Q`!<N?<$sS*h%S0`#JGlcqe<S.9:pUXc>I;cFMoI>4oCMBVgZJf']S#_"QZ*&2'="qtnV7F;sFo'Nk?+P7tG.DFV6%/!D]$AVEXJ^LH\XYA<l(=la%bPW!YO]3^g7%M.hY(FEQmA,qtRPH)`'d057,6`&u1*Y:K,>rK+P)P3B"c*;6p?;9./Fi.\=kZ-EAUJ7GPDH3q5!//ZG0hl4lHK"J%l.g<VI.(%$eFU@pg/r.)G@'7b=]R"JqmLbs@sYk3?A#A$G5T_Y[kpjT0(d=5i=*rLY6/0e(u`&47<AuG>J=28Rc%>Z@qgCmD?A#7%]45QThDFt",l:8AZ?."HY*?-fQj(=/=#Ktag,Dm'MDG.-cA>YO#)*#`DeC#bl**-ZC6f=B:2fV7(Z;AcN,*i=aYhQTIu!*n)85$>%l.Xq_Z)"In:\uF[Qf<h4A=R!+2Hd1=G<Nt=%,re>\m=2.2#ZSdE8CS^m9R`ngp;C*EnQ2KqKnN@;:Ri<gJ,;IOE"1DDOe,B1o&4e%[G-mqg"ma'K4]Ha%5*fXRHIFdTK^E&i6X<\b-#fCqqH-4b?177]8CCZ4kuGKBl`UNXQEQklL2Q%)fn3T69`kJ(NHm0<?W^=fR`>t%p'*g,GbjgEM<X!nlfep?MlJ]&lK9&V9P2*[_GH^7]mB)WiA3hGkN\V`'[4\+OQ:6%3fhfB"2GW\?L%2Z$h[5"gL'EX`+u$=aG,lV%=2"#[l%36,Zc%`&_lrI1r1NV\:]%BKUYVQ?#JElDOj%_3a1[@2XcoB$5:U1>T2pAGd;#8RCVEg!C:7PSVFQ8R:+B,>c+BV/O6>TI%^SL'`eZ-?bIe]^=>L:hoA]_*cQDlrG]k2VWmo3)X,.H\o[UrOK.Y^glaC?u]VE(74O<RP;.B4/K@;hqMgSU6-77fJI.S#bXIDXU2%f^`>#?X*X\i1DhTX/kp2_sutdD^;uo$i=Hqp+(&2IWb0ep"eN1DlGm8e`G=fY>\^P'4>^A"VqTZlWm=s2ob5#>A+EA2J4A9dLM\G%iFkK3hW'!kY]!39K^5cFUSnNR&>=u+LX#Zu(rp,^[QA!iq3o#oMJu@lG7[eV#NOc_ojuJZ^4q:*lTpGJFoJ]sHe8TbSb?-^?LXD1%KM9Qh]@n@WWm+9m>38fk9j`)NY/d?p^$8L,0rj"g%L.^%TX0$L>%<X,e7*B'0YSE4'>,O!mm32,:&]d!im[r'J!U>89JHiAUt.]u%3\=FjF@"?^GTB\qC+WNW5?R3o<UrHTWu4fs*W/?=JJJ1lb^B,;@'L*+r!t=$0=nh=?2=e/;iA9[U3*\;?P3(t5"/N-pCNrM;tXeY%D2D?V!TrcePuVL<faDaPo.!_.^MOM9A6D6SP<J8mK#<cb4fek*p7^8hcoVQagDfcNkOj?aHl,pE#jT+N:3bD9MlHpk=Z&s*C8RNP%[CDm,<E^-GcVuFF7B%BaK#k0,&#q7##D5k\ArU-+2/\ISOHOrNru<?C!-4?<SOZBtZJQ).p$Z>`Fc5'g$U[<-IU,8-ce0-_$*M;T%0)ANm2d>3UK3l<Mb<XBCEtKn-HF9F%-VK1G:/X17Me=cqfCE6p<(nE6I1D$b6\*o<!:5@>Ti`f^S5?o-7Wr'Dp,sBl`S7@p*gX&=%k\*bNeGZ%'81/H&YUuIq$&7W1jHi@pFANk5YO`<SGh<nTC>;+Q94rNA#5u%jp`C2b2:oi'GdBu]A>OcM:>oq8m'\O&<L7E4V:U,`%L8]MI:6jr6s2)Z.^d'"2GETsWncr&2&.@ff,aNZ/Vu;VebK1L*;o.\b(WqW3c=`7dY=ZOV9nVdfd?[Y>mq`6"OJkqhM!Y;u1]4`W%6.WY3_9BP2<g';Em6_2H`P:YkQr0OeKra](*4]\+W\/2@?gYOU[9iN2\(ZAXs/REfTY^?%J02TYZXI_`8EC^$46?[:B[&?d&t3W0%5WA]j%#T_\aW>%)_LZ([&QLpZNn/eZ!1GbD9pOr(KMjB>ifam/m9-H]1Q1tYGB!Z^B,I5&&WgUN&mOKnGI[Z9(^qKt(mr/M-$>o/%=C?pl8;=CaAs>=]m4Q$Y='$LS+l[B!H:>qP9Hgt?_lLb]gZrI&/E>@H*M.pQY=PBa@*K(Jrc;P@kB^:`=.7`!=PtZf?T=7U[*Vmg%.kc%DHGs+tkT,\=UYb7c9!VgELF^7B<$^,fM!.ZHa'ZP5Fpir(0,'T9YY'[@5GiZa^>`]Xm'I:9>o"B>?#s;l7k6;%f,sAq]oosG%L3^b='u:S7cS16\3XumBH)=DGc)\fV[q_M0HUVT_-#U$YY8eF^B"OL7KZm4,A:@iF1?]:l6K=^t+pu.eGVj_0BRck6SV:0?[[D`l%T1V7i]XnNBcn"#PaW>TT+In1]TLG*=o>9IY'969KmX7pj/u^UjBRK0dT\$@X_LNY%9Q%q.<TRq\>GWE`*H1]+h%@H6\23Q+".=(I%J@5*Th[+bGj=XL8G'u&*kQQT>gAM8=?)jZqfWO]4-0`5PD`$lWf\,TXYV@R8gCR(GJ>H$N"9Y*l2UW8^HZP"YE];OLagoA/P\;&U%%kkh$H[K#Q$&?4>R/?*1\CNT]]db!m7"lWTl,h^/m"U/Xp)k?0UT-_DaF@LQoW'X_iGiuf(llI!qg[,S-]Q,LQs-T1lg^o<*Yl'0%U6F=<i3n7*f5^:;XD[e/j$)Xk"G<)Y/):_>/^Ypjk@lV48PjZamu7sfJkhdC3#AE1X5C(b,!:H@lnQO?RtAn"I6?d$eA=V7'H-!3%l:JI/Gg[h$pc@U^)AuQ0KK-drX<)ol\IEIh86#;`rLcquCY1fkGGOj)kQ'DANZ\D/*t7(2+#7H?7;=''[UC&F<&_V#6!l$>29<l!%BL-0.;s`f8+@O=M=Ef:5'Z[XV41h@B!E`H(!hcd#!'ka%cP/7!,9&rCHSF4iFOXgl8(Z&EHW])3ru4ti>O>:,d-e8256VQP(>\3H%%YDu$fH5<l@d<$W[-EcUOF?K&pH9Mg_)]`MPb.Pm-D&7G13#Aq^u^n*=?"=.n*bd)\_RS'@3b,\f)HZqC$\HS(%R^ob0Wf=8LK0@%"P/+[Xc`qO@Ahp/<!7jP5=3>m"KruSm?4ScKg:C.a5?-.aTla:DL6V%(n]B?98IENkc#,ip[0FHL&&tYh^RH?6C6NPF'LIH]!!VY%8K*o%Z"I3S4]"[MWW"7;iVKu$@gEtuq')$Rd;HSLD2&!IgOip;^r;r[E76FE^C9OW]tTH8X/h@)?ms!($+tK"_d9fP&o)uB*9[\Z%4f2NRL7MtnLkm,S=#ei;)bSk57a8'l@F0T(>HTJXfE9_;N/B-s&9RFh2C:_2QIHDe:EuW4'T'5rgGQ)[LQn@Z2k/i&#DMPLdZb;t%4O'K=U>Lq#KbN-^47-of*RXot/se,'+5lu+5k3GcJ5on2$GV?:0"?U!PKJ`cqn\s;ns5hH(Wb&6%`<VeCF<]Z9'ofD1KXFTMS7BB%4kIi?>oV0tR#)NZLpor0KeBDU#``RWbbc&]0%J$20hTea/""p#fl&mLL?l?p[#t]&H("09D21=]1U+?1iRXnXic\HqUpS51m%Gh,%ZLH++JPM24$JY/84_HK=I$$QJCpN0%aak0fPsI:5qgI$?$?<9H9_)j3+r8"qB<hb]>ba4n&3,E9`UEkESDOJ`3>)u/h,1dVepJTF%`lh6g8O>Zi6VJ^&G`1cZBTm;9V:\ORDd)&TX_nQ!<Z@;$T\JJW<1a',>AXD1PO<-8Wa;:KK$#b_,qIBA&d'N%15lk\N$4j)*@N@Q%(0Mj1rYhFW2Ro?g,O:1"<F>@J]dl`m/Z[HoO9)Xf9<0cDD##Y]B3,c3ColpfKT]V7,rS!1A:hr-FCID5&W5*jUf>!13iQ5PHs/u4%B=AZp,h7()Wr>,]-:(]sG(QrUX(jY84tcli4/gOZJkcO[[pd^!2:2E`WsSYNi6(=D^XhnMh*3"r3JfE"A@2G8*<sEc7t\BoCD*t[%,HQ[>8RG2t5,'W;oLKgk0GDcZ#FjPE?8YXL$4*1+fg0t,)M%4C'J`?9ajp8q:JY^nV$pSAUSA`K-Zf55ZheAi3#O'DVia.!q03_h%dC'C3M?PKKf&]^=-ll2P`-ctHiseML>)W&EGlhW_?uhnXY91;><SI(LVrViqWshtBV;+'=%hL>@VRkY,n7js^5jIjdq6]EVlGSj3%d_VI>B@`6l\Y=_RA?GPS=hD'Ofu;KVNd?(gZ[F@=jrbT![54LeF_(b_,eQSLBWHIKZar%;H:CL2DR,V3]FdgIFI8_)FsWPi3F2;'%`BC-*7(%kCVmWH20jfO?_I<=W2oPrg.U`k_=\`:aZsrL&h$Fh]"[aW8PU1!Z3[V-"$u3!fo4not+2YJ&LR`u)e.c-J!KD<JXug=I%Lr)hB[U<".93+/!RK:E78"SsUXZesWaQ!CalIT2llg["ui(;NUCXENEYckoiht(h-*qh[N5I4o6X)lo6k-6V>1MV,Es*4ftA<o8B%^R,MD?4Q=D]*`6V>Fs>u>!n6!0B?>@SOr'Z=fA\N$pT?."V+,KYVS4K,2baGN(]n8h70-'iLndUVuiDjS*2=*eHSofH-r;C`'4M3%_jl"2lP%\.U/6+\Ti=umg0k\[TEks[aoW!*\e5ioX6?KDWjOn`!ftmr%uttl4D>&NL>rA@O(R)c%1/cGWKoT'6_\dVVOC_c)h&6j%;r`g/@#kldFdUK4:lfENh>FuJ3qO0nDcll6%r9)CJ8"jh%[E\b3!.u)QbXpp-FL=-/N6DLs4=Hn%VI2'Bse.:7@nfPdV=5*;>J]+%nNASs]VY."<0)<2o4rO'rS.b<W!Qp6Es?HoraCgdTbW;B1JTI-`jlS0*6CjBk:7FgHlEji&[^-:\9jU\-*.T#4WpX:C^d[Fd-]ig%GIm$4CD@]kLSp<@[.pN,>H@`D*`O(A@a_]b*uB/$I_G^M?M/Zf]dJYSq?'=J9@G"T*AFXL6T"rc4=iWXrL'R#72:0Ej%qqd(P[#P%X%T=slqt#4+5:u9^Tb$b%ZWkqU_<:r;9)R;[i]Hdm.D#UR0asW2b4=A:icWD]-j0.Loan@B1:frG#,-"Z]mqE#nW,D5G#8e'-8;]%l(75H?/-1?i"cC([b$uFGl#/-l&;UYcl9b44CP]gct<URD3W<0JeEEVg$A>ANsEAIE38l0bG*@IKMRlRV2isP=rT.X$^cJI^[>d)%/I_,OD"g!X6P8Q-@9Gb*#GaUc+@L#(OO,_<\'7euOc"L<p*kZ%r@Q^)MW6Du5k;9m_PF1n3#F`[C6CS%bN264E3^4h%<>!6?UN87%>L\b+fL."1@utQiklL/EjP\8+#'?AkR9m8joJd@@M<Zj(<pJ6fo56D3-Fbbp#JKTfk*tOTr_/:QM`4Ii#V3ZH,!+,f/G#ni+Nbr3%gj#=%GgFBaRk:oggIH,90Zl-2:;/2!j-3$/]^k)r^,$ZF;C;Y2jO@C+!`'`FO@`q[[n\KgK4)&$r!_!P.S$*o1i)ZE9WY$8Q5Q?q%74L;Djs?`s.;#$1l=V9jC4X\NLZH?hFq;]$OcUb)<fD(7V?3GiUFu+^#oGX[p%+MsJh%Odc.qZ\aYiEOVLZ,_m`NA<WcXAt(37Fq%e$CV2&f/kKFed(/G]nr*:0<J-_E0I-._*A]ER]'G!mHL(Y]i2n4m3+;:6(I,OSsN(*,G(*:%1tIJD?7mWtWY[U-<T[4BS'o5OHCZ%nX2P(SJ8F61sP`SM6s>s>cPa1W:E<@.NpsRWPe"^j02`.#2__&"Pp)Zj2"'b#"'eN\"&Q:7DNlEqIW:1,bOVPIeLe351)HmA-n#b%)l?!/m_6Q71@<^Z&$'4pdBlP#Xc@_S`F2kce!&X]g'N3p*-9Kq'7%I5_f1!J%,buGfB@cNe.!A!98GSTd.NEniS298\9e8nA^lsp%d)//]YI:Tr$0m.*%ps-J<TWN6LtH4RTV^B2QL&2,";pgnr0:]pWeC(kc@_L7=qr++4F2hdH<%'?niXQO4WrMNVJu+gNR'$'c9#6#%oEhj&%=CrlmLo\f4CUol6WcA_G5H1H4a]iP>al#>H9?r?dA4;jh451nJ-01k(NY+(NmB0h(V'ZBf_TJqF47JI6JubFot_==Mu2Gs%gOj'Sq8(7N#>^CN-@@VN5Q4h@`IkqD2u;Hpq/gP^\p!.QS34Eko/Ki6db[2#:Q5U?GF[\4pWR92D_*Kth5Ms\GjseTNuRh"rSud[%GhaX,^)Y[@4;b9ghK\hdh:di7mA6L.5CU@<LUV1Ymep]+NT!M3gtIVXo_"Ouk,N'?c9KV=5CY54C%g>s9s#-neXl/`NQT+GnDs+*%rF,`Vo06UW_^F<I5Q7fCHiI2df*<DtdFS;2^>E]iY!5,"n(6AJ+2tnkf7V)kr>dZMQBR"T6`=U7q6p[L-7WjA#D5Oa4Yk*r9l8S;%AS=Jn%DCofXmrrGE^sp$dHS`UUM^=/[,E+&Df>R3ai9<%'QH/eCF?OOTsnHUh]D_hrnQ_!f'h5MK74efHMR*7oKbFkch>NDk?@/D%T5VKuW[oEMN<XOZ0/aTo#Q<]&iaA]<%+5C:ej!=sNKsCgTTt4Ef\tYA0:+Eu[>u,V]C4A##IWuJI.2p]2'(/8c-KF%iRXKIB.FEm%Xh";fc\t/\>IV4sH]KreIK*Gc*kg9e"spcM_f"9)j,X+dIkPrkNG$7;-@(T#T'Um!K+_KQ=HCemhh71XNh:.(YkKJWFn*0@TqgKi%K3Gqp<nbu&q4QJdmj87HmF2#_1hahLCtS^&VrR2O`h7ecNn_4KV[iS!l'IsB6(_-mDOZQF5,RB:a,Nm4>K>\tqOi<qmQLAhqfF?*%cj,Um.o2m*ah5Ppl2K.]rd:8#W:g/'f(?@OWIs&DIW]StS/ST[#-BFibtjt#)7V`:(/DFo)d.dtg;_#`DpnsId->hm7JAqc['Gc=%nEAH@VgQkc98a)X5CI*+k2]hJGg_N[qTg8;QFis1T_B+P<YgEKT7oF@-Wi.FY\l\I^KVfZ#r2^-DRh-sk3&g3f<gn=5P]Cti3<Ef%S)79Gr-.XF-[!el7sE5%6!o;WVNs+g8:KmBP.%uPmq*K@_j`<NKs*]<F)NdUd'n52?S_rC4oXcj!?JPQ0T#+N%INP@rZCBWDOClN%RXb>,3.90Qo:'HH&t'0G^>7\V3Q`K6LY(8;:LC3"&,Pk=qYoZm5(-$Do[E,i9fa]h09`pFqqc3J1C!gABqL-NV=[&\rS'Pbm<`GS%:bi@uG(4S4Rn;PS_X<$q)2#YQUTM"$T;N1a]ir!mj3LLo7#mC<=2#ssc$8.%kCXhCpC`DHhEP5\I6+<HpW;F$32Tp6Qhr:U)"_5n%-lE2C-/JRt%>FfA6#t=\n'5E,kih8`"K"+A"s<9<6!)t0RrLahE%l\2j9?KU$sT3c8t/Hf=#+H!1a*3uh/q;B:\>Ms#sn?jDnTUA%NHolInU_5XU[V]1%gKj9(C&D&K+8+YY_W/Rr'k/BU&FEeheA[br)HCOpLZ)VZ<-#]6Q#/OEM/o:\b!A@P54bK?i'$AXJa+mZS)^H%kimc]-_bhP:.B"S#Bq4G&?^LM2t>Dfo_grPFEle>X@fC;I.LXtF!_U12ci1T54sm34(#:c*XA>+$AqPAY8_]b3Qul^oq;33aF8I)%qWLfK1dNkZf'Af\#L>//HdD+Bqr>q_4[$CRbtk]po:V)cl&gF9AV+B0%\E-4e"/?E\+\`jOSSP;KnJJ+fhXi8XZT(1V*+d`nCbLG%q=NRlG5k_-e!%8\l<hrf$&Y:F1nT0@C/$til]Ib6oXSBnH'_71Ku<>pmT*BS4#cSDI_;<KFM7\E+O#60gj"-Dc_ahCL2m+I9#ag,%RC<+i52s5\paG\)_;8P:Vu18(p.'.'525t?EPEPX[t`JOS[\jScrtWX1q<JZZI"0#I;Y''pMD7'<dV_cls!/D)5Gqo@5`!S4nmhI%$hN7=po$J]o>\\USHaK>:$jlJ]eLD@`s[&k;=Y06)L!9A06)84m$sG,p>hNbQSa)=9%O8L3mrmfId)"D&j,gCR#'=_GK>#!Iu*W4%/[lfDg`t83k5&K`V7%'O[tC08KkOS'l!t4fg]BS#6i*J,qgU@+-(DujH9r^;EM\srk+Js?*G,c7OpAC<M2a%qlb-KXPm2*]\T98>%P\U5-:btCDd/F3G)kGWSpYJj7<?=%fi5\=LTN(g7(mN[*7/R!(%8(SriVG!E:dX*6Ps$O/s-\L?(-qma:<3$g)n!=E\*di<8p-#)%:g!V"@6pgDMp6##j7)[[T87iRIp/a"ofeF4]CO\%W9N+6p3HVmlb[uA1$:VN/QN2'+7!08:+Y3SMl/h2*Q^V=UcBK8iGrT*cbt]J%DVnWC(k"O20=LSaYmrOGg&"SAp\sB7*Z&N,:]+k7s.rOSnM`Y5&]#3`_oQF8ReZAJeee,%_j<MM!*+Si!23U0GR/>NqlE]4qaABZ%lLJr)[NIbWA<!#Sb[-4MCG<ncN:*%q:Us8XJGa#K'\i_CG'kC2_t8+)N[5+Bn&,M\4Dk:0mCBp75X0cBs,L;TBgA6aRgG`uOS6_=%$1#<QB\\$98Ue%"4-5Vq8BXfheJCYBLCXkW1ZhX*]6bb9^WJlr+oTKP6(G^GS&OuC9Ak#do2locTY/"\+dW!&odG;Fb<h=n3M#F/%=9!,LG#_CJG9kb7V,EfunPsBqAt6:!nQU:]Vp_+a2udhl4u_S_eURM[q/ifN'.Y\]mS/S1cg,Su@qLUi8eLBlJ(u$b";E!!#^D,]%Soi\7?3_L*'0$)cL[,K(#H+-L9rHhEV&Ph34)7hoIp=I<mr+L^:#<i;Eoti[HS::J^%((l5>=ZPAF2Ya.sVqpYR7jTGPLN#Ls^?#%b1g5OK[M+Si>lCQ]p!+[QD)Oc?gc_n^qEsqR&5Xe4h,q7)23Y;q9MSK/UNgJmQGfRS0N#/Fm>cHVQ4m+eeP$nFNSZSEnpmneTI4n%lH!9LgjD'+S]b76_`.EZq"X>D3i&-N$R-H)f3b=J-_ZniU$t>p1ibu[nclp+8ARmSGl<s/8V2l[1>59Qm)d8`0FPue[;bbMGsVn.%S<CtQHhh&i8m30&>*u>R3UqihL!5NJ6"c-+'5cmL.!&Um/<lR[%A:hLo%I$rg2CiHj`Cj7?M:+Q2[?/+e*!-Gjm*osO,?P"5g!-k%E9\n\C,8D^r*7488EZ&Y@!<bqYp_>V)r%8f=,`?hdFiD=!A:Z-PrahA-tVAS'40PKqg9Wc%$InsGA`<*%k`rQEJ[^/Y(#.:o>M_D%(p9V]__Z&JZ1Ab5ca,H<0MA*6h4TbXGK2WLjHu`NVm"7je!h/^.TbMU]3W]YB'6E41\hH>9XZ/!J0eNn3q%"D;)LOjDOI<GPG-Wp%$f)*QMW(mp:e4kF`RFHiQuCt1!9'G1#tfa_:]_o9>Fpg$"j:3RK\=EW1:F-bcbO]%TnH.c%OL.$7O#:]pbY+38IfV.D%h/C]u0mg%:(<p(hT4)Q;T2/G!nke!4":VLJ@]km!>(T`YiJ!-(@nqG<<9<A#lmtP59%AL$7)gR&O!!A'`0\LRXF2^qf`\`p&;Z2VHOr'l^rnN%O^s9e_PJ/7))aM6rF8ck5P^.9*jO4]Gc'.]XX$67P"Ro,/@!--$hLfVZ5d60cN0C-&l5pHMnMc:CN$4u8Fh-7c]^!7,W'd!fn>.A%oQa\ocS167?*XSjBd*$"0C:*3%WMe.<S\V28kO^+HlV%0cf!Y&I.5CR#gl2.M:ke!X2LTuiV0<&jE]ubT>TXUqfDR]J1S[R^4[oU%nCIY_*$n@GjCZWbd#Y0SIu]_m1uX('B-N\a$Hb2%q*e2H/jh^tO&:-;o&3I=0:5Pm\9AT++k^>$2Sp7::&&PjA`^+Bq5>&"q28qX%'Dorj][?ZoaaGfMTuo\3V\@pDDgH%.!)MK'fTh%K=!Pq<JWmg2f]oba=[J[t7TZr-ags%@7G@%bYj/A2^B%H!1)4EB>]gZ,2[DOR%E^&q`SDW_2m<8"u;<9#ndTMmN29jmu/;l'/.s+g$nYOu5AC4?lc@&5LB.\VVX!m]U2^HR4_p?8(5Nc='X;>;>7_PHg0%3VlI8AMm%.@nFQ#g7(ZnajT/<4dCb(tU_d1edR/:)Fm+pp@>']F5O`)sGMEPs46O:a.$Jo=bhd-1u?@>AP*K9!mR!]a9NR4@pUP.7ggF%nVBb%k0Iu/Q"Y([M2'Ss)%Ad_=g:Aq.%VPIB4mQE@T@<Ym9P61,I<[_d7UTjdSG.F2W;8UrL@5h5qhCcH_p]%S-D,]>nj1rbE[c<D'67n%^$Xoad.5Rm\rL5_gkj'U&t<ON2\'E^4b1NMjll-ACb_`aR5N&HIm$D.bfg/r:<\mHhVKY,A1J%U@ePc.&+RX:QJ0bA9Dg=J$CS:i%:fE[5.IK]#[En2nqI)oZk7<-:]jqu0M3I\nIc?.NMXKSjdfeCX7JNn9?:aR4!89kh2^G4mkL&`E-4Ok\%*re\^&)$aRjIk_13^XN%9Bl3H5$7%8r;-B4DeXQ,fj,"uXh7;BEYj@WcD08i]njAkm(4,%-UkdGlU=pZ)?$N%LA?0>PqX;pSU3;Sm=kGZF(.0;.D:g^,`k6i%EEIUlN!3!G@2PED_#>Hh8n:g`<&f;Qp[1/Xl@be%FEZNk/]!^X[e""2F"!o]mc$pW-s7;tREM&I3mTfLD%M$-?-_tF.>6.r5g&-n%)V\3#]TO44UUE"a/N%:d8p7&J`al0bCLr7`AOin7f_Ye,6]I<;MsFbqERD4jZco`piU'JOW$e.([i`<9\d/fQTpT%Z`Q3j$KULW!%.J[@SB,QX+I;\O+j+n'=n!/E$jG8Z3`HPk$FJJg$M>a`LC0C$dT\4A'Y;_cYJ*l-<q"F=UNMX5^)=lq@dk^.>bq8,)Tp']*aUGaK%`mC,pkjgOnW(apU*4j?[Ba.jT[U@2s])2st3Etu83HY'7F>9od*'&-:)0E-"_/n\aj_)s%A.+^GU!(cTUY158O@,@AO69Q94,7]_%iPmY:KOo/K*4l%V3i\5UkKq0LP&iD&[dQ-'[-d2sq!:\I7'MRN8?&3;[Go!hqeGq)c%M((k$ZiLV"U;;*)Q>#ITVNsp>r/H3oaF;%#&Kft:64h`fJT6N.e`X+Q"7,ghsbKF'.&+IQe,Ah*0qLleCRcd3N%gC_K.TF?IXhG>TT]"bf9e2<?=\F.<C#4WMDO#=gO\*"c6]8%asBlD8qhl$pp&=VORd;L/>k59)=6/XWqT/qnklG9-G.5A+j2nN.4:<>5Hi+p-+d_/gVg4iU1C`Lq_\>g6'@Q"\\TCCe$R1)=\iQa%`%m%s3fAc$l'!JQ#KF6IbXXOY'f8Q$]l[7dRCri;FpMZY'N:Itp/3X2Yh6B3`(E,7(Ac[Zl`A0IGiJB0DA(Ck9kr&A),@7k1=`PO%/20Xo9'1[>Wa3bmI,gq<p_%k"#=\GA[pi+5m*rE/,a`sZH85^(mc3>3=[;qRQD0d1It]WHb#&;DNOT3LFoGA3pq/mi:.u]b`1teT%ZO=qf*CM7s=d^^M3\0?;Fc+-YXQQB]@@F,UP*&-o'?/sk?Xrcbqk\P1e$DGMI7biQRP$\\o:7_E`)>JapKQeCb9aa@khtN6Hq-rr%if!>0LQ=+!X8A<:YpV*:!b:]b1M(&LX+OrAiYf<U\f-:HZaa"&/QM441UO>#mk:WfUb<*HE@Z2f<,u9mOHl,?`(dIa?B/9e+O+'J%aHIg4J)s75_S"%=,?KU5U&9ga,6a6'-R2car9n5XpJ-UF`&+<B"M"i<PFW:C9&7b<TT<riY4u\DBBj",DO,A4A>e*,,DaW=VrIhS%6R?/5A@"NmO%]tX=?\J@asc<La8ma(R#?0n*'.6&+QZ+k(FR2`JX!gZUR(ELZBV/CnAm_i*gq(=W=_l"[Xq#(TCEYlkM0CCh)UNd%7^Dc\TALk\3`sU_mO43PFr$._7(2%L4Yi+RQLMt+AY^+'k?4WD19#a%k6gH6C<8JtU.5u(0dj#Un%l%c[(*F>,#X`5j2P)`Ab5/U%#IbD7+[7?Zs5IK3).6cOrjmG2:*"r?b$mY1Y=]_e)$AOQr<3hTZFrmWd`3\$(K.RCMt6.*#L-"5W7&=>`H])O]K.Ka1ac53fEqBu%pQ@"?oh)f,DQ)FcjB\QXVRY#^c?iT"d`(:b_'g*3;jX*e=8r3(ZfK$#76tja??ABd3V"^njMU(JW*W^m*-eU3\H3N:iDOOrbtR+X%HTk[c)@G6S^$'jRjLq<>,OV;ti<jK0\<)*JfSPk[W9)_'iKCWOf!,]qZCO4d*]CM9Mhr]b`FC*uFA%mdaL==/R)l#05<L[HWs1Co%JAh8id:kfUMe6>$+-esOb[-Z#7f0`H9Wj4CL7B+U@Yk<2FkI80a`qI_>rEQ4cZd.[T87a+qlO6M&rSHmg[jk#H'Vm'HmEtPcFXKV%B=ZX:UrfmcAba!C\dWYeEM.M9HSLf50'5'"g/#9@PECo"qRM\UaL,Te?*(9&lmmWCDUZ`8Z_"fB\F;D`\5t_2>N<DPP<LNg50L^n%WR.:R)6*JWZNc4V3+lMJI&;kPi9%a?&uf>0C2ic0`FVl-l?=BhW?8l\9L^N(EtK:hO=teVN)]$&+u3&i+15mW'..^&>T[5ofpAS%%%PkW)`+M<K%,[V&)(&8?dcK+MVo$i+rnN=$Mb&OpSX0^[Kfcp(1/>*%gV&8GH&bi`q$nU;%/3CmiDR;q^E=7Dh*7cMT=rQL$tW9Y%hk-F*piN#DX/^1bHs@b/e-aDDeNbeOb#\'].QEN`Zg=1K9'S)DQOK3D>`c8=h^]c,jPA*S7![LP(QD=_gmlThqj;XL:3(D@mqBl;%&?T;aCYZh7nb=*N='Rq7ID!sQ)sjcaC5pi7rp;p72trn[YQ)-q\k=;uF76+*T"[+1m@X'fTCljBhXea%mBFu??%)f-+kZ2BG-oVQ%K?QJRnQ`0&X>@)DG`L4-m(>.CYE`sm^#I.ONt,O3Pb$.KT_@pSKg0JIZ81dJp[@[9h-/!iK5/ZEe[u=&L"G^Y6.V]9EX(?%nteX9%\QC?mL6<?*RI"P!45LTg-;:4ch-A/sG115`60%FoHZY^A@HZFWp!"A(bY!'UOI(*5R\+$?gY9mkoZgK^gr^Nlb^U_l?gk9*?%;NU%,EodL]B5meX?llDB@tU7,n$#K9tt[3?W!p!.'4Q^.`?(*+1IJ\[-he;H@5&6E`*V!=(imCBoY9s%5lIUX:TCkf3f\B)(r0MU?t%U%Mb3:bN_iGr9sWYdoh>H4l!,bEW1r5"U,WZq]jBchjO.?rP&dIXJp/[49ld)CE$*Yq6R3&F+mGPZ-0"cY?6Y^Tf;Hni"YZ"]`%UMk%Dac;u;8oa6>m&5;07(r8i\%W[]K]/>]kiAT0-\OIG?'%l?,!62/D5,Xo>?g;VG"5tn6MP#QVFB&5Kl-ol-as2an9]RCq?uY]!H!4%AnTShq;TjJmE^tj(F';pZ`3\[SL^0^XfI$m6I(ZeGK(Z6A2[`I3K;ZA0.`SF/XK5@pFdk_/hNDb0t*uJ2I2cT*T+Y]ES5GJZV*Hp%(Re'bVVK7tUDK+gQ^1:2ESLCOZKW]%3kgl].@i>c/kn@./6m9T?/#4Q6pmM$RkEAoiB)b>PYIL@>@),(SN=a8P>.D-.X<@i6.p?m%U0-Yr]%e:+$d5D?c`OqFCq?t`a=%jp9p^$,P)+\(J8DeRnIW090-Zmgi+1o#ZK[8@Q]&q^9-Zp%NF,XC>u;s#`FRGojjI_SO72uN%i)4(c`ni@LlKY85[s1W]Ub_a`%`QAaDZu%^7XV8'oe)`?^TVMVU_0-f>kIpYZF(&t3fP39/OcRn9!LoXaN5u4//250QCs>%opc1b%![LcCT^[-8pqbIJ5QZfTTLun@3=hqX5`/5AP=)7<f.L]l9\@>D(=?(Zq(Q4hRCE-D_2HS04`fV"=a;[3483OYUjK6Y<V!K/jt?8m%E\EYtPn[SHQ^,[hQ:Rnf+H[b<*51S(Hul^c^9@*nR9VD1dVJ7X4c2LlF2-jtlS/,f\i]Y%mTAm]_2Ia2%ZgH>0&W<OoB@2WIhL<'%/7)R`Lf47AUiN(fQ\V7-pmrsbAtJS/$gJ(/%u^2rdceJkcLnt'-.8b\1foPj%'tRGPk,:)-ok^k-%a3g3gm.c3%(c?@>g(llY\JM%#VJir`&[4&W3#T^NU>1N-?dA&Ta4R3`.KR16]nMYj2[CZTh&g2&`*86buFCB8ESt.O$_caJiVG6o@[438*Sj4Bt['"?+UoX!bj;$%RI$o@_Ss(PZnnPsg8oK`,SOs;]9A)Z]A8CW'bEF<O;Ad5*[B%3#W$bpas?(T)CZ'OpR2mcI=LfY(GbM-,H,Z8nZ3SmE-QCHR47.X%j78YWA63!qMgC"!H*Eif7'+&phirFaFk5dr]Qii!l3-E!0<2?H58S93!:/g\Dl[K`i$(k,iNQRgl5PFFL/KD3pE$+]_m]u0$q_T9%F2-ZDo..0(EHd.KQkEYDf(W43Hc',qk2SIf+Yjsc_qg$Z.BbFt8F9,skKP@eDot0A1<b$]>s'c3,sUHADn*u;h^cA"Y5B7,<,XXL%m&0G&epdN4WB",4X)_Z$l)\"3WMh4+m+lbr9<:j"52,2m+$kA7bLCXtEq`hdIa0&p-gle@IP)n<o;/<rM\YrLSI:oX@]C,J1I5B7%=!k[F/W!%_'a4X.E+0]f//Cp4JmSoCqkfb#UlrZ<p[RFB,qA:k.VVRr,R]!t;-.451=MUk(6pZ)F3Sm5.T[Bc<i&D$e(r(#V"/q7%]CK7,,c7XK,'\<@c;%S=0mq#_GgC@[ImPk`\Ld:,HhIr*Mo]mTe?X!-"8eq])sKu.mZEYf>9A3AEE?)PVl+GLPiMU(o4k;r3m>FE%eE\.`hNYKs`Z/&oI>T]eKrjIs**33)En5;<N[si(_*i+Ml/SK&#8qI+*q-5%k`+-SkC9\k$D6cf(=o'@f\Lo0qsqNGh_qoWG$jjs%a(EN)qrHlXgN]Z4=7RC'Dm:S#=&4&$6"B_0Q%e2!\*pe;=&o/]Cb(JUmkaOnmU[d)%E;aUoXIRiUu?%^ZZ?)9>IWFZH_7U,n31Fo%8oV>om$jEQC)aY]H':8Ph9CT+f<"_Nh2;IPR9U>T[r"JN1nL-o]^+F2hBQ\\Z5i<b55ii")mlmN"AZ[P/s_5.,]iuro"Om/4(D+M%eq3R0m7ZMm9kM?2k7"qAgW:LYj0)\eU^]rRqrU&"V,eoJh8t#)i/>(tK<DDmBuV@/aKW/4q*X\3-Xi&(5@0ArIRZK,Tk2f=o..4%%pK-Ve4[*!4NRjkAP2Q8p8h-CkY_ILOigXR*a%n6E3lS<p6<*h'4Um:^`N2%<;IOJjI6UIR2ALO/Z;Zo56`Vt.!`%#FWhGU0<1MSt%]Vmcq:krr)Ror]R8Se-q<LHcEnR`Ol^i#PO[(NKP`6FM/a@[t=ct$+UW:<gGd&S^H_J9U+GGX3&QiYW'PZDh<-kj9nPZD?=&#a;/%EB0,:[*4QZip]X[`[8XSqSsuXj+l7PPOD1*RjgZ"hGh#]]"eRJH2XHiDg]<A6g]UqKl!PipTj'5cfaumgdE+C,YhS^GG\o[oHW["%pKE&Q5GMjOIZ#O`!M9#ug9eKO1@rJBXHpu?ic5I#FT5H*BI)\q2/&;%ha+](BjR0d*&Nilk,bK;/E&3s*Rb\&in)f$+A;S,Md:Mu%I=.Gh($jUB!5XLN.'J\B]_gs]j8Z=M:"Q."QEB*rcojoXQs$H5b,ib&"p8>AA\\DC%2aaV[ZQsQcIm^(C]@kGL`F!1a:*J<T'`Y;%Y0+o0+Ynce&U-J+*;m0/ZA!T??Vm'Ui(0_@MQrU6.F1</V7HAfVcOA6*WN/s51?>4Wc-bZB%MK@.,a\a*tcZKk.*Mq'_(!P)ZS"Y%<R:Qk/,pZho?iJ)Y-.</<G"FgZ%&gKF(@JGp410F:6dIOZ%%bpq=p#@oiut)M#D*PSPL0/Xmj@9)I!I`hG62>&c9d#^lOHUr9-6g%*srSVW#3;Pd-2Va"o,>WJ;a-^:Pf/NfGMC^_r7L`!Iehn+Ka4e*<eF/<"@8/kAd_u('XK<0n:+Gc]8./j*<?9R#SBIe0r+nN<(Rk%nn1AlI\9=A0n?C@;Z!fq<F9'sn)Gq(I7[;Mk$.fqMt/H%(&h!do)2c][cJ4be!Q8M"dCYnb-uD9+/s5D7JR_b,QD*bjnj"FjCK+g%ql'@V?W*,l[47hJ_Zr876hG;j_&oiFpZ8rZITT'WW/n%GpJJJp^::=Qo4^k=%J?F+I\2?nqV8Z2#?UTqXP?YLeFboU.^Zr;ronS(%p0W1Pk(`_k\pj[nP*]%tmpKZsZ!;]c?,(lIjB@^4pV<eX.u-@2T_lR:IKtAVSF,=Blh\kJA>-$\B2ela\$"W)+1*+VolKEpm2M(1%:fd1K+./+LPhe87oOl\H4#lh5nVMa(?,$IP\kSc*9;q0#YZ^ab1/JuffC**IG@)'VB@QV/02/Zh]e?G,[tL.C:TE`)E%A0a0;G]-%_%)`qO)F,R!oN/c;EqXnh`dcH;q8(RcHpu*?,*pefZdIiS&s@Val+[SWU';^EN`$7lZ[;J^Ts$;Yccm"JEnO+oo&,3ebH9Ff&Br+%X3[s7GOPT1JmC]K^B=2`gZSNulL>lZ\<W,Xa7h7Kj?C-rh\Xi9/$80MI6KNWA"g'_!HAYMMRM@:e@L)69Cg/KY`-/B+$.;X07"6q%07N43`;/akr3pP<Dfu!gp,C<l#X6#+hs>%&CQ"fhO71O_)BZ-&[tO-IWqq-h4hcs`@f!S#%?">J:FjCC+-HD2Fo>n\gC%$[1h,[l%lhZlCWIsJnIW8Z.K>j>kXKbR(lZ[;J^G!mdA9Ijbd+7rRFo=KJmWAhYr=6!qpW<+'4t?taNa"-ep&"Yppnk&uo9M&0laLP"DQEV^%.*L;Af(D*AhDKM7I<Jo2K7Qd=2Pna&laP3Q1faJac3sC:Fo=M]DE0dfT-!Ur!PS%3lM=N#[9lqKcUJGjeb)"C75P`E^9"Kp_1J@q%Y?tVfn)/^u4-@:fY2AS9c<'[CON0OGPLXJT^CL]<.`;0W-EE3/lh=73bSSn(CM.\8JTF(um0E@JrcS/L4rb&ki`oYPXIf;.q]$.@%&!G=XgtEk?0qVP40?pFTG?,(D_ku7BJbO4oM_hC_YHdB+3IBmg)[ERT.=9UmR1jW>AK@.Uj2TA@`q0%c-G&jcZ#BX/?Ya\`r31A(%pZmUGNP!M,]a=4.CPR@"HYpGXqI4;OqtF0cJ+M8&Qd>(`R!ublr91,n@n//a^<g/6G5_?jYMW\(f)Bpl[$SQ,4Eic^Dm+W]duDto%`7N?(rP!;sN9an6rH.l'qN'r\f&G8GnE5L4T&9DDl*!;\GQ.GUkB_N(qrl=T%c'-p/6r,9X5AC%nbMG*n*[pFq>TT9f8mr'LYnVK%0jJ(tF8bt\L\dcIL;X&erS"Yhn,N7\p[Ia7S^Y%A);BH1eo/=[?<]YanD'I^pA4K>n+n9l]#tn=][0s`ch7n*Q/S3>hRrZ*3r7uU%\o[9+f+3WaDr[&=DjEr;hbK]p3-AlIhjV:%@;l0^]QsCp9,*kb^=Ls%7342t?i'0gX[gk9m@R`OTe7W6;,?c]TC24=oB3Q2fPduR%)"P6+^;7JSLXnZaXc-pUqY8.Wc*)'Cs6]0H(N22aJ)eGQpL!AQ?$hH"dN<LKkh>otYJPG?eUDh\R)HE(Q[eo"E-H!Y.J<Y/05!`I%=**+d54.KE'/WeXXj*aM>MF'9c45Ughle$6GlR?[>o(fBHuS26]>O<dVdH"LGk^#)k;M0\rV#gSp%+Z>m[WSbb-8Q=HY)sFh*91l%*S-fQ41AS[B!m$K;0V$qLeu*<&'o[9[J#>^Faid*<q?&.n(`21imR5+=7MW)nBKd3"RVd[[Jk!TpP,,8\+/l7cj5]h.4<u.lUUMQ%mO2qm1*Y`d\K$Ydl;nhJ[9%Bojs2t2f14m9qu)Kc2V7PQQT$O(ninF7p1eg2ilT+,0-@lRm@$+^jKD(aUH]f8J!f(U/jGk>J(Qfe%]lLX\FK5<(iODg8fP#bZ[J?p%i0kaj>^27lK'UH]g9%,GGVa"4qT8H/BAmQBkP@7*)nN)*c?2)Z%_8X<0),.W#q(&pgg0mX(L6sp%[f,:?$&n5s-hWem6f[Fj(DBi*j`SCVT/u"Odg"ftp>#B9f._#*>I3'KhdWntCAmR9N:mRr(@tWhjH#i=OT'`FL;b83rnP!ZQ>baO%roM#bqQo5FDf5Sflf*uWepa_oZ@l_*c76!oBq6(<Z)a5+Rql!SfU"Poo@B>Xm"P6&k+S=r&+6?.kC7o0kjM1=TAJoo0>G'/P5U%-%&'o+lrHQ5&)ttEIH(k0PRR+IYrOADrm`m6kV8)fs-I0Ii)gMP@ksUnbJ1>D[>k.C'4$4Beiig)o'srfjhsLqoH/DeQ[*9n9Ij71)%^FOdklOEpJ^ZufMhmYgUI"(;-p@Hm7\+0BgR(qas(#&#7*D2m[rUoZVPLD8>in`uhXjQ:WUZPe2&'FodEY+Z#mVI9T?=2E9F6l@$%Rf)@*SYPu'Q+q]nhbVQ"BOROiLb<lHceJ1P0:k_T/ml?be*U]/lasj_m6!Bl@'-U+LVEZRcc_B0rI2NS:@37egYmWJjLZ(l9GFIK%':L0+c1g7\e).h1iR48)YAXg+4FZh='Z5-_K>.1gIe`/_MshbF]HKM0q>Tr,ka/3:%t=<MlIjdEp9s*^(h=^qr*dp]Qh4@gpuAQ,%36!P:BD(t6nABC-1'['*\+k*@/BpE?EdU6ga^)]TjN9D!Ab0\FgJE9(gVh-RV\jLc@(Jm@-Z9r6hRPXqVdf7IDOpcT?R,#h*hN7=%EVAo9GjWL7D"be2*;5W&<\g2/cd$?3r8G8S?+4hIniG)0I+j5Pd.D_[_X:JY0"Y&;Y5M@Go(?Kt*QlU/Cji_Z0:r%=7(70tg^23Y%:R("sV*E8='\_YI(l;ascMd<;0"3aMpuFs7NU*.?d:)@EdP@lGK)4QeiDXflkU`[jS(@&MA[pZ10GDWWQ!.<gO=ngpr)4ktX52'&%EML[BU`jlsce['f0.tDlDbd[F%Thb9huDCeE:&^Mla%&ALn26PkVr_*?f")k]JYmI@d>UZZ=12iHPJEQ\aP#]jDC0q^:R5]pj',q%pKt8(E,"=s2cj522uK[i&NC$$d&q`6\B;a^]QsX/XV]\\Tujs;r:Mq#KK$JI];+]d)k$_q.Y+43p7GL53odQ&-'HrF6biOBCHl'l%0-"g[$m-1D4bQ56Ad+t`^AW2.HZ9KZh4q2g`Og>4?#LGi3AifM>(4)\o(ZeB5FdeseJ&`7L)[PWoR%D9j37i-rhb1N?WN:/'XplQ%rNhn9hs\k)B'3]aM/:q=R&r.#Pa$L`p;qVtU57\;WoVF)jj7AKas5@,HG,I:BD]r?g-d(Ja+Fmr";Bkb57qtc+LAiO6m->[DW6_c%M/W-;.8AS\?m_#20K8KOo<N9J#;$/4C-SO*ngt5D4F6UQTCM"0ged,FgLi3)d)995R#SPW3nF9PFi5?HNnE,R]_Uan$[08'S^R=\%pZm5bY=k!cDn]KR@#H,9ESl.D?FACtlKV1>[V*sqBCGdr<n=rKg.jf@3bsqh\MnU*l\h1SSTclV]5+`k\TrPap7(e_c<NPY1NWBD%9Og#R^Rsc[UK97;X0_Pl]UnqIB;Vq\J%_D`Hp6$Q]be"l^KI&:I/ha`]\NP`lh:'#:L;:Nm`]e6a^6hEH1H?[,>VXiFQCR0pGub[%G-;remO!P0e6#8%:E/?Ja[].Ug<%,/figI[iEi0j!$e.N;gK:G<&?Sn!W"gM6C3K\U;*(CJ,)sh(N7%3ddaNE6qV`J<ol&9@@r%W%cDO*'fmAK!C."i!S]?eOg0amHJ?rTGVXOE.Ok1s/oj'^hK[WF7#$jB'QWq:p&D?AT(=]L0<?Mo+s4q5A4?FUb5O]'O%qjrTbtjB2%D4\j6D4[alp^?h7I@l#![aBt<h`a,oJ%4I[%hHnhE95=67c/^J^AH(8aa/=2jt#'7+iYQ>[Jc.".ZZ`;qi<G$/&+&Mp>=b2PKTHY%NgBqkF]t,%W0^<>VW2]imTe]'"lV=)bY)u`g^rUno>V!qhimV_f8&GX(7RIiPI#9#pO;/#?_?@\qX$\Geis%E?"AM5>Gmo%q_Q"K%:RV":ri(epO2(SSoWo?(DI*80;Y[.Epo0P@b2&[o5L"ZF4hijG2d^BAp6XKLeh#J;YohE?;n=/Vd^^Sa^KnMGoZWaUr-NWnd91mu%\F2WXg(rDUa.WpXj*%+Z\Np8mUfh6"gtLZj^q;e?gUS\9f8ds[^H9nTSilXXVe]V+kEEr7rp+9+'/mtYIpn85kZ*bg],UJ1oA@1X%f0e/kYp]OlpKM:45L5tqV5$ia_mTIUPeA1;T0L"QSCQ?,JKdR5+nb*SSVP8bZh`3lq8S-EoQAk`/iQ0do,i\^<RLg%h5ZfXgTl,!%Y]En$\YJ`IA!d4AlK`kqEkM8sQu0M':OIB`o'p4&^E%6bqWb!%J,XP7,1#PhH1Z:HI^jDB644i.cb%q[9o3W9'R.L*fD0O,`9XL+%hL'%tGk\bS38#&Xh^ZtKql?4D'V=tUZ^LJ2N%O1XPKRo=[7SoBioq+O'P"A^X!cRHSX2S%RG1R(YHH>SJ7ssc/lQuUiB!L\=#W;C%;n1NrHd+L/Pt%!)jmhbLpYsN=$?t9)`Qc:r$I*Bl-Z?P<[E"gYDdV>uoD/3[1V@S*b8T9NAI_c:B/e<I-SN"(P1E6QqB+m;ie=-V%9b!3BA)prO=T>=7HM,d!Vae5NG.#O/Qbrba]99`ZY,8poWuJgdhq`R!j3?K-rdM+uEol&@NUtbl]Ck1JbKFgIG(/3AhfflDDSP)`%H1>eFo]jHl?T5/o9C_#ep<0?qX!a0jN.kc3ZEDomDS7,JMQ#7@0)fLpo).e)^RTRsnNYjCZd![O=aI0aH=lQo`fXV/%`9U_h:gg.%pERu6?ZC?o"X,aqlt_%t,<Ghs`LSq(hHr>6e(1'M;]U#2\GP@8l\kKj8$&JdnMHCnrq6/B5Hjrk`uiWUIo7o.:M$pGVXGBm;r]"R%a.FP*l+:lbNdZ+7i%o8Gf:iSR*P.UrekR8JG7N+EekZ/@eb-<`g[!J]_tRrEcM(,d:B#A0lItd[?d!0SpiZG+T^Y6%@HHtk"bdJE%$,@]:9i1VXR*\G:?S!UQ:e\qC`)6_l%uLZ]E%FXYpn4"YEqi!LqN1kToL0YV?jT-he0!N+IcA16#R;P>I&VA[&]+Qf<F7-qI"ZG]%ht!W'_++b9c$oInn_bXF"-F]i-lsAp4>ajrf'*\c%U#'CE*6cpr;Q-<akI=Z#ueKXGO=&UqaZWa^-@#Z/G6%4ddMZi48/F:fsOa3%If9G^FMd!UB[04_'6`N0Z9$YqkDsZ$<U[u3YO&.,Y>8^O@5qG=KZ1';7(#8<Q7%Vq_@G1:909qMp`ntQ*cTiL/N;9W1/Y$#nG^%8%)h6an\#oeQh^;3lTOU7^fVK\`Mbi]S^O?($\_5"6\'4'-=f_+u#IXfupaYA0@B&JD;:sZqX5#Dh9C/\F+tn@e+`kQMa/VFpkhtND%*3\-YROGkJ#EaVbQ"OO]r._Ro+$,b5l;qkFaugW'IH?dX7*'jQ1][#sGcLIP@HR7T<R#h2bF=Re)Y_])(bRt1F!fs_buH:dWRca8%SUR*86EdN)48QBBEHAr'*KFK0%p.*GARkPZ>ifJ8>^kt9C+f6NVgJB$\U=0umI5fs(NU8Eh^mF705NHS\BB*"34]:C5&nEI]rZ=5%l5P5F]lf1K!>aBlY4G?!rArEq^"N2X`etMLBD!L9gl.V=<l#=$-4dBiP(hkIjt+?UemA45`+:gKU7::"Qq>_r?*!kTY\.gha7@#Z%53qMpD=b)O7RV?53n/Q'#MH>RVcWchHd75fF@_CZdk'.$bcNV#MZ3DmK/;u1csuSDl'q-*Bd2]:!?*G?^pJsIY%cnNS`>cP'C2P[%fS"s^*7P4>$kDKT(#\nN5+FeD"NM<96*TIc%]/F+q_rN\oZ"U>80;.qC]EJfDZ:;!bKtXUcq@/^</\6@WK6QhSU@iueb73g]JrXk%bS=B[c<bYTl@o'aN77+T51,"DRD29RooD0hT/rO7cfgC0[oHKf\_q[M[U5(3^H_^%&p<X?f&\^Ncb.)&'s#cU?<XAY[Z]/GIcV%C%JYS4YI-KVSn*G/-Z1Gi.[Caa\q+"MYStpb,`f(.@s5J$u#G$[1?g5+nj^@ks):q8LL'!0g-,Uu2b$OVn.D:,uG)*ZHOiiO>kcU;E%[[SsF<,BO7/c95+510:Ib8"F2O6c0Dcd)Hd&Hh;/E-XAjTjr8cDgbV^9@mC?qNZj%"b(L*`@P;?FW)TqlNK!E^GfOb=,/B3^['bK%9";N,gHV=WS"@95fS_td._PD8/:jS;g[t*K_2!b>[.A?o/5pKBp=1+poS+^(0@IUM"SXO@=?0X9.hu7cZ/KdBR,?IZ#D9=4;(/tE%UrA>TZrl&JC4!8+gr@ra^H6H$gGd%'>N,GSn\N\LL,$:>lWVl0I]kO,T65GTA+-$R06j1S/Wf2])/SV#lS^Eqir*XBp%aO#2kp8Y%Hct/NmsfgXOj.5op@sdKje"h)\.]<.FT3=a]YBKFY:ojLh(8epq+'n'd?`lGIic4+?kE':,OqD`55hDW&.8!h8b4N`hHAV2#l#3[%V94R7QG:=Y+KbY4qeJV]I^#OCr#:,YOY$Gihu4\aYD\JA0),#s@f86ppWh+ZkJlY&%k_5ErG)6-0>II*jO05jkO*k!IE09.VLcC,%25msWMV[AaEQ/EonVqRj@V>Z(KfsZjkI?Q9OYa`n2oqc8?K>&sTfV45G:l$Zk-FUR&Z,[P/LW>o\0JBJl>\WU\?@fHBn:@<c^ZO9%cmb^aLjK8@qJO.-*4*9\naa^!Td0)2QOO/g,%Oc,W$VPUXG"'dG>F8@4e:t#Vth3#>Fp69gdtLTP^/k6<hM:U*)4_]%-M?,69--c%)-5''cSf@n@h"sk+V4V=L(+d`[:.k6'Vl`ee>I5!&?9SKX,ug*"4P!_IqMis("MZ>F,qreGhQ>$<t6;fb-*nqhS6o:n^3&]B7I\K%HMlZk2_/cGs)mlCruJ";kL6Gl;(a&k>>J:[o%mAjCj#'_b2Gi0kMNqaq"OKo^L+^"r8tbpVa7oke(1X:(KXD9lFi8>hJZJV8oM:2%Ejtsg%&VfMd_eR*h<K:]hqe<pQ_/aRJ)+5k<qYAAQ-T4M^].@fIZQen&^p]\\o.2=e__HjX&&9P0.VL-lba:0n"F)!K:>p9.W%lF%I@mB:n,.JM]p%nfNre,R`q;'PbO(SUf*<sYAW!,2;]hpkJmF_PCp.B4n'ZNH^K*uHK3Re7)7f[2HnE[/Nau>XCM@DNMmc^dZgqH%%FZN:q[iSS2hE6;d[i<pPXep)Ch)m$k\GErj@J-N5(S^ORaOd51*s9O$7<rG/r2Ljp](BB8FoAg6%7<q61kn:E_n,<`j)J1Fo%ikK%d+fIadX:6N/gkk,0TJ^2hC5:^5-Aeg@pD=e?/7>`D1%K^8P.36k@IW^]"$U"T<ssAYE'o_H'm1]e72cZlXP\[`*ketGqWLejinp-%lS<qQUpSU+Od%h"Nh7gDWV<4Fj(1Nr,l3)Pe;[bnOLrSf0-f(W^?7t+;s%QHV15k9Nu@mM**_7op"c+P?T_OUHJua:D:s9N]R9Gj%[l/$Z3LSVI?c0^@1?NpU$U)MRYBM`A,]kfP,c"imV'!=#'Go5SDf9@GQs>!)1d333$uAH?hIB-.-?C_*4cJ^#QQb\MH5n;XC@LOf%k^kqJXnr5nPa5k\q6mfi:Y\RU9T6X.GO*/&G%+^#$1ie+SfHq6@h.TLO5]/oO^T0)-+#K(8X@8UjKTl2/e6"sElNEG15-R)TpO#Z%OVZ)!%ML9i0+.a_foetC/eN\o(O?nK]/X2XJM^eYE0"gV4OXa:S"4(?KAcMn6L\5gPF(C`@;Mh64sdt4jIYG:/:6/:%9Qi?kiB>X%hD#;RL`d/mYtI5-7J\05%;@tZ5mFJ2jRj,&gT;h^?qGqcAZ)cEZ@&M9+J0S!3LQFuI@D+,,n2G<M@3B!M!Q-0@k4>h0QJ;4@20_A%79r9p(Il32Sb*hYCD2bf_YTMX6CN1Sc(\&Q$=/I?%++^j.*EDO.m,_8Bb(lr+m=VCN7-E.$e7=aOmn)B4dP%dXUfis4Te`Y9Lk0\%:AU%W;b5A`(M(1+_#Bel:]b\>?^C@:_`+;ujVhP?r[\_n0FCGkh'frUL$-O]JTZu.\fcP1K-VCV>SVk>:D1P.!siFK+F#9IgVcIb%\Wl0LN%YItEbJR0$J3DV,@"IL03_L,]sK]m<EXaF*"At*pZo\'a&Q8DZ5hu>0$17jGR`7G\dOfEAIrEc)aTd489%WHe2Ul^pVM0-%_pT:^1\a6@>hY`La`uoR%h>0XG'8$CQ8H0.jo$S8aA"WTE(5F'CedPn`WrQ]j2_cuOJY<_d7m6s-[Yp^iL/@_'RRNkG=,JDZa0Qq%O<jtj)tMPr/iX3Q>K+]'Y^/B>U/C&Fes7j9H$(KMC@(GeLh#/t*Z55::Lc[OO&gokKbQ4aat0'aDeVfc&lsmHPD:iS]c;gFaEcf@%RNI81NNTp3kTFS6'@)L:@bD%DPXptt"c'a,,R?FR33;BW6BPUKZB$p6N/Y*+qIIoGaTt&*$/+,)?+?c%Z+V?>.s2?j_4ZD'bAeku%grXFUHWd@hm.Z.V1C,0,i&q,3""8C'L.Q9*lt_\G^+)f'Gi8jSWuF(f$*k'%2Cnj])ElA:O*cOYo9]7r=OPQ*m:"&G&JC(^_&c0g%#T0PYE6.7aQaHsWPGJgKnW5FqCT$J=+.A_.1(5.5R@pA-Sf]*0?\Q9m%sos=ll_(uPB3RYdT@T%Y\!dU_O&eFXt(H:Jd`sK)"NY;%3>kPHH'Uoh3@q[O*!D;Oa[>Eb#Rg`>8Q[L)0'(@gU\87;#Bk96'UCVfZDg;*8tG<$=[e@VZO!Z--BL99M%CY;9&WKC&ognW?/S(9%7HmN1,RT'b65oY2<YV]J8`3c?%_X#ofXEjc'*]fW.Xqh7(b(2__C+D4PXS%Z=N")jWstgS"7NH],&S!),m<$Ii8LF=QkF++H7_0J%m!:3hO(4D"#[`rpGu5FNU!<mlip8?MMsJLj7'&7SJMG*b(,';U:rD5@apAL\5n9A]LQ89ol\,L'*j?ba5SB5B%+/?M#%B+hOkSE5%)ScPBkc'eS-8:m]JErpA([[VcA.]BM?<\EtY>Z&HG.qo1iQ#?7dKL%4&&+/V^)r$s44,&Np&sPhil:LrZ6G%^6QGtIXanalOO+5]%+^*_]SrkgT<,E!-+%C"^`!WD6K<W(DTj*g8!nKV>;bf83Q?5`0`<R^.M<mT)R]$?ZI]IKD#f>Ymne4m47O9@Yo*B>RL;;o?+!O&a%oaYnlHjc?1cMpc0R7=k+8++;b#&HI50+J0LX)dW";ZWeo0I<YfU4?]-J.$?gGmKET6u2UV!g<^6JHRV&`^?NaiQ5#2DA\[`')&OC%,WVjbf[5>u-fL=W$&QeWoH_cKSk>.U\m10A0^:A@nke6bWZK><Uhp<`Md0#_p2T=1,UBO3=`=[.^+<Vo6c*90eIfj"XSdU4<jnIp%5,`RS'2Nl*Wi.JCAr$F2-fQ8T.J"[02tG=c0S^j6$rb1i*S,q$$m^,f[_C3(DsGmueCF@j?_6?06%tuufK#5PA,ug0U51c'>TON1%I4hZkc/Nl<U)r3Ugd2?3(G-%odO4*4_6OHSi6e8<^mmi6lCkBeb=o3%<^j=R@#Jbi98*XY6]=uN3_t;D$F-f>C*GF\G[c9a-Yg`P%Mo5T50<,chKhbFd+OcgEA'$nV_akNb%6PqL5'qQYL+)n_39AcuWalCIAcJu5E7rEib@T[G5Y$jIQIFThJjJ'fD@chMFV5R/>S!Fk%L%L`!V.kPP-=]L!"%K*8H(bp"Mi_EU76urc<B6%lQ"('?W!ge,coXAN<=pnV>2&E+O;l!,4]RM;<hc\YKG/3&j:XHf-FDj(["Q`J%Yr;X0bL;5FPc:AE6Ce/l0CK&JdNPbTPER-T6Ic7Ol[t34[:-*#\ARP5Yd`P2d,cRO^n;-+/559&Z6CGm%>+p%U9Jf<Qn&Y>aIub7%`=A4J&Lso1]uV>S!hs^p=HINaDMncTH"!<Vm\WP*93Mh*gJRJI?sPP,d(WM!PHJq[c@#@!/N9]H6g>.r\Ogh+JDqaE_<)pC(TuSe%-C@3_=8T7*NB],`$.m&e3:R#H1MML+UUE+#1e$>pYcp5a.V`l.<4dhP%?O>XIUO>HLsYh%^S%?QCmO6Im5U,"1WZ9,[n\\B0J<b8%`tX=4-DC^A[>V?2-a6g&lDTU6r222@\qQ8`^k%Lp:-P-fa$=>E8m$GrKr@I2I0N=u,dTLgL/0P/lUNfm7[8Mc8G6fCMeQ-nGt;[i%`%d83?[/cl$fnCe&^u_SNe-Fket4!/Oh1YV7@4s>>2KDKL&js^ne-:"$m@n7dd:M-+U=:!-0pb<T8"`7\3i0T[UZPCZ0d;tWlXFg%B[VT@%jMKRh4QZE=KCLDH!7'7`;q0FSH5MpdHN4sH3Z<lZ&N)EkcGGs=>63l2&C6,+kX]f01uq25!e`RiL11rj-]*lZrikJ;WJaE%0Vc/e0"`2SLr7^P`D#D]:+E[46>hBL=V`J<ApDBk*VGgaar.iG%*KRGJGC/Z!?t3IF9?c\)p:W1)#Ha:j@Tk+oJ/t-2S:K<iW-Af%N\->T2E1uILMSIg#%UsM7UAU>h_a6U-OnuX+G^ZdCEq1K5bM-_j$VmtaH718OdN<6oMjjkVkZdBQ>eMA*JPBqR(R,e4s_F<6o[cb%arjp*UYEJ2its-V0[oe@9H+B\8c9eb$8W!NF,djn2fQr<)jH&Ujol?3:J!7JK%)e/oKnoh$'8h>m<[)k`^(CT8GYjaE5C%>&_U(R%#W07\7Ns*d3bAK0Y*s[u.$3g0[+Bsc=/LLbLY$XR1P?j$DnoC#9NCg'<4uUu7lOgNFg2HZ9pcA<+]'`6e)YaO@Z`#q,qTPBZBU(R%Wc,'gRAf`()MH$4l_,0D<X@Lf<^\)rC'#Q((ra/o'@b,plKf[MQ@*@dWrC(1nJWc9#ZIIWVZXh1e1tJT@,mN!TZBF&oe:m<*>**P%i1016q+GI(!`L7`QT=$7Ou:'+Q!b*i<Ekr+p]lZD(?lhk:VN$tmlT7iH@F!63%Sim4m\i%Rc9\sc9X=)#9Lu3bRYhT:n!%k^hH-P%+L2"R4iL<^nC`'-m,RmZ[`_]![DJ`5_g_:V>$(qT4Y&sO<G!i2Q%RW1bG")AQpoXC6;R83aq>E)-$JPYK$i2noM^S33Vt#!%.\/S%GloX:YYE9^2t?OYejmWKS:*617IBNe0J%!a7<S-&X&KBf9F<%rfhlU:#T$l1N)U`M\A>/GKM*q'r!n??#dh6p&@*J];ZR.6Ot@@_%Vre,G84Ch%Z3!hU36I@;5f*U(P8=m4L!\:q%!TXCfn5MN3d"QokSc,c=FG.&FE/df)A*SklS,9Tr$.sgRX%k^99Pl:VapX$(bBH=%Tuop4d$\DZ@VA%>V19iX=#aMp]VG&OO!O3[J9D<CB9U["Uhh-(@1(.'f-K,;WDX6/c8.G-U[1mYUD)DmOZ)<X:/)#?(i)lT;/"qB%PbZbr_k?9BU)IB#_Rp.=RkOqbM%RT6,sFFY/L3Z2UglE#M)aCEorT*_AIY`J-ZW7`\H:?84d*<184%g&%p_^_X@2Q+]!&g$EkmoJ%'eq!W><PO@bRB[0bbuQh=C2+]^MqtcmcIq=Tg8kn`<c>q*'f@"#Ea%Y=*"aPp*SrjeXHCg=FhW]AMXho`mdoUY"k=1*;(IWc=+/4%;j\?QPZ/-"(l>)W_?N(R@:Oq$G>Dpe<26+8.,Z48RO-$XjXOi*O)\re->1c*O#a*B4AQ7i9a;n:4?S.VckG6gZ1#_@L0"o;31-N.%qA=od^j7t/F[sM^N&29]6$6XG7bDW]+`SE>%j_MS>u]'qP7*0o,UUTB?ch`@GtkjU('eDRUFdZ#h3TsfMopq)(0ZcT>gd/FXce8l%JeT'B5iG!q8lS"pm\0gm)G`Cj^jJ_A-5+O=mt&1B*:<i6qFEu_EdcX:Wn)hhc)cGbk_R%2,qX)gAGK,bUG;lMp>C',d=`PU5paCQ%DsctAm*/<rq/#?hFd1\>'ngL:EE&5`gbd;C*Z*(8b)<lamKo0_YnLE%$/`Sj-Rq5P5'&R\b`MVu==*0AK^g-"N<+Kg?nJ3M7tcJ7%luf@IF4et_#<!.0UG7iE:M$qCO?)$V!2)IIj##Fq1*O*T);pNRk7e=V?nD(6F^%-AVg4f>M3\41!Ku:SLL>!ESCsl?l%B0n5@$no%TG.kMGS1rnD)E5JCgf#aaF]YCJGXVu`t'XVO@Hi>r!:pU6:gkT'Qlfr!^/u-N<2eIZ#Of7)+ncP"RHG-lLkJn!hKBL_o&C:V@5g3%Cn&9dl=dFL_\p+u9bXW.?qQ!c4ZPZNb`[,-`.r)!""1Yd#mHV3ph4*C!>>kd("&tOLrE4og6kPHO09&k4jlFtJ:@KKB:Xg:7RA$d%<:0QSYl_2.U<'s&m/meUH%h:O7d1=S#)<a/RckI*iC5%>1mCSZI\Y1$`8fbVg^,sY'ia)tnftZElO3an%ip^7DH"'@qkWCp#=i9u%%=5<D-:e"Gq>e8>hHfK(#r5Uq'#VqT/5\*spdH_=<f`,m@5RIF59uNd6q(1q#EA,H5XY-GT2tJ9K&)S*S_d@M0@0=LXU:-Z>hjip%@0V68iFsjd$Kfd.#S[f:!G&nY@,$?0PGi1_0'qVo=I'5C+@X<_U+$(\o[lIB%'a_*0g(fEf/gEZ$+9*8q@m*Hj0ZBW/5&r_W1`($%-85\TEe66OQ#8KV?o96a*u)p0:HV\)!tTVG1rq'm[SCfFPW5*u!SN/@:Tjs$,f_9;M@uqEE/@F!h@RGTcsk"A*;*:_#mZ&9n*.cK%WeA7hLV)g.o@/DF:*n:6kU$]]]rJr3.'6'$-';XW?Eu7792sT$Ee6J??>;M_2)aY(e=<4M7oL<=FZGg`crFHY(!=Y1#/dk.GU<IB%+[-Z]hVeQN<+F)l=UDHJ?nHp,o/p?q5rdL"IUI/./Y!)5?oXgk6VmA9=ru5r/5D37VJQB<")TP\9VeSZO3*@Erp#'[k]C_=^r7JF%4O;-'6!:&c.QKqV%^*tj-oH[.#1s3`8$Hi^1(Ip#;(EBCVELVNeVJji\.V(.Jqb!&e.+pj)V^:PEH[nAR;f6]NY!g&HI2`jI[EHh%O=9[^@iH>6b,YT:=X(PbFc&:l,2>B.GX.mac4cj,K>L;rCr'D[a6&AFae9+&Z7PT*/;ZL,1\BMiWI@`)]Z>J,m>WfoOTIL0HOE^"%0WR4?&E5#Z#Y9f6Rd#ldi>Rq5g$=1>gg5PSPJ2K\X8mjh!6T@"k^.p8?mV'?1msJWV@]+m7;WG?OnFg!;J3WPgmIpR/@*EY^"RIC%SmZ&Y:c]4+P.[CV'T$3??6#9-iOj+J:dg5Ap["#3)\+0'TU/4f/OlE9E0:nF5h83N5@>8Up9%.:aj)tj.aY!3f7ed\'lgUEM>1\=%%G@LB2).@9!m$aM$"3+u_%e]^"[>%I2scU(_%*5mg-j7RY9=OoJRaj:keg@4g46)I(JH3Q<I8.JQ8I7'(q+JZl,p5Vo[rHb3t,`3%EF:?@\GEu<csUXDQ=u[1)H;:i.53aR%7i]oHdY=hJUQ$5".C/@joJNuB=1ZZ.OdI[`_MYnU]e:Wi^h_OkI@U+mXcU0VPR_,HRMkQ%IF&@@JsK`b;&VNbO3hqr3[4$K`\c1@_tuRAe3MaO]IjGHMI]8r[$H/Qau2V6HBh%m?1J6HXP2,#8AYZ9c$=?#$/fc$mZD+D"'BJ<%<'_\W)a\fmKF/'B&npUgeAo/BfhG6#E2a4kQNn3,P]?9AjE=-"TXedDW/?tlEL^EVAEX)I[CcUSW9:E)eXHY20oq<-r\eH]I8@a,%i\Dia%Uo`$J;4uUeOfK?@]\dMK<Rc)1%6HYie9,'(2t:!!&/F%FKKO/Jei#Qo%=lt?t1u"^`&laCuYM^hW/1/!.EW*a]^,jFn6[4%"B&-qTf=C)Jju[uoftKH75L'98])kfoh_/Z3')&VdDq*qaVT9AA&qgd733Ll`h3bT,3/puS:d)j&nXI($RaH?>DOMC!"'#p?!?MT%lbGorIpl;1<hfDgIE[#F#Kf"c?&`sT;)oOp,b*`I9X)VpJtgT,Fc_b<i@-g^UkWU3.#Tq!3#PD3W*;OtR7JV(kT:q7U"<%2V,A2a%!,tWiDub.1Gm<(INeRQ=,-\ok0h$<k]ZFI+n2c(.]F*c=e&bN[0f+ph"sEU?[>Xs]:.*@i#6KN&*$P"-?.f11=q6/dJ3ZCc$a0;*%\->u%#QnQH5esPU`%qK00Mm9&j"iA8U/dTP5mWY]S;(t!^3#Qrjdit@6L6N_J@lGK!'lbiR)qmG)LuTJV>[>#H_ai)LB(V<8F38K%6>@fWJ3c*B^^i-:._',(.T,IO]/qeS(mkSA$%6VUeYPEjjFm.t_HV^:6=<RjURXTr!#$MDHAt0.VVWAW+[@OdIK?,i#Z"r;j;JTb%m?Irb+.EEe!=B9n=u7$7?p&H\dc?,'$O02D'R4BtG%:hCRLG>=6\lSD+W181#h1mA@[:YQNI$-s7di9Q>8RW*CfBC2cAhs\VGAn"%R=c#``]XMJoVrg"3Aq03j:29c=+^9^5QJNSLduaBTHk*eEK;+5]s\jm+6pb>3_U(U56Fp@33$b^)@s>-%=F@@mMnosEDrdo.2m7o%6e)n$)$'_FO1:FWdtV:^+TprlGJrE)cCkUfSog*uE>Sm@W%kN6l'rauN/^VfX-%fn5hgmI)i-.[Ud7ihE!MI9&==WbJJ!Y[7("6b%%1X]+6(^mPROLO)C*3O@FV<UmhZfC;kE<_8QkD\(12DG3&".`k!mR_i*9o\3%=DB=7:BT/S?=$`RZ/YA8rPThru7rhFCjJ.5fiTu%h3;SnL2in;lAM#O"V+7F,4#=,GbfK!kMV:)I;1;u!@9]l$&GK0"NCeiH0e,f#=O2j%@SPn(9LpCmaSrWL'Ei#4Kd=nK,O(XQj)Q:%i7qY6-[:.sLamRS"jdBb"Af5,e=LiS,8QSk0(b2rJR1L`aA,I8*$?)c&:*Al6,Q\=L;:7H0VW9#Jha8o;L7&2oRei)L4QDY4ogj7%o+Dicie+!^P_;%45XGtf<#[AVS6AmiEQT3?XimfZ#>.898ta$d#\L8nc5a$u1PkLrQ.NSt,9Z>"Xd2cJZ'odVE/O]4jq4\`2\4up%";=TX=Qd+o.VV]n:MC!1.JEc=a?bV-)MMQ_LEIaQbDZfs82Lrf"i6Rcl_n2*?"G-d0A.hE>U:h,,q4D\22DH_8apehD%%;@"(aW;%'*=S->r-@p^pWOD:+_`Qm:!ZNb(Dtg&oq-Gf\HmQ/h=GmAhVG&*7boc-Pcp&Ga!Rh\Xm]SbZ-p&.m*?n0'cu72aQL)?9riMq%lS0%VrVg1?;FmO5Br&kCFfc07+\D<0m!%FWOtYP,E)VrC'+pLR1I-H!=i!E("3e'7s^(aFteHF7fr&&_ZLekA69[XB,bbt#]'T`]>>#Q%DK`0\367r.@o!TNUP_75`&XOPPD];o+*aGP*M5TS@6WUcFXR/.1u(59-V;ejkR73r6-MFkj7u(eg2%T@e.07mTUj;>g>isB'.-/J%:=/,`JiFY,2254nM;uti-\"nl`V`f,cm*ldXO8KJ:F>[TZCpF]m.jhB1UtG[A;Q)%^1`9RKd'?DYfK]UScHD,+pIo"e2G+7eY*`q%0F^l&9-s'X![D5rb?uJ@,.9c3P?C.Y"+[d^oRZUiR$^I?idd"-*OnEi9=N\B0LM/1TFX,<rQfl#8]DHI_k=eiQ&Of9!JPuJPBq3T%Bg9e[!;Q39$FAq)$G]><[)Nbc?Ve3Gf)l%6=YrPm#%181Fq%bF)mX]-Tk[7:6E[WXW0Tl0aH4i@#$b&`p5fKjJO*q1ZOs\Qq[[YT%OMa4"&4VVoK_b'p'oF*],>',[:ic1@VaW5'[3HgbLee<qI+%bHZ_@@d*=I(!P@c*L/\lNtm3JM05SrNre;oB3#%e]c3&*-!NBjhE%"U.9FM@p&HQma\9+;(SF&^eQ#&m<n^hFCXgf#M1NOPN<Qc/dL?<p.4ZX59iab9skUCYl'FLNR':Mb5#>'2Ck>#"o&n<:*`BS:Moc%<I9KR&OW>;npN@U5hpPljQ5o/FlJ5K03,uZiDkh2/)#-<!PDP9V]Q2!M9^.#0GHTFQS_E#cUHCWPK@/&K<T4T)qn3jG49T<'r-[s%0N,YhlnXUSAW#`lPrP1@h>mr;[oe/cZC'!T&oiR<_e9.QahWO7n[HK?i[en,)d`lAe9KV^T]r53<O(L:<D;W$cJoca9OFI4)43-L%R;0,G_/dmuWsaQqOic03`+C>C:8fL!Kq>6lX><+b[c0<gcZE\5;kM5?:UUH?!&XB!'F04m_6R?dk+8CCPZDIiCu7)6O]-QN/-BQ3%"R/6KbI5%\0e`TsIBO/r`l](4]Q$R$l:rh;`-RK4)fm7qK16NJS-B+PlJ1ij!,uXT*4V$Y4`'qE5c9!8@O0>QTSjB5[#5hH*<b@6%arCK15f6ZkB0!I,2>&.6K]9It?"d8sV?j10$@#=#dcMh\b8$O9c*E;UN5Kr*!`bUS?/)\1^u[FrL'e7PU>Af]*MYp*#ul\2-I;So%fC\i<Q:-lT.bb#UphJi)\9?#X/E.0c`lhu>+Cs$;$h'Gkr*S-8",mch/1cUVWab'ej/>YUiF=)Bc/^@X91_FHKcA<u!bG\+8AIBS%]<b"*L.HLq.Hh%'a2p`%#nY@0HZkMSqdhtJ8:Yn@T7:YZ(eC`?YL$VgqruM6_h@84i1%*[`\ZfqiJ?SPo&TU$Q3.L!$:\Lc!t?Rc%@L;@g7l;8BM0"f8ibh^d'b3tEUC2^iO^\$=/B05hm#a\CBbjN9^fP(R"pBr\'llhhkh5#>4p5LoQBOjq.eiG5[d!4XY:<0cKF=I!%'MG0Ph*j=G)Td[]F@8r:fnO30@*m!3O!Yp1_lh-P0Rj*UP9hWE%Z+i>,1aUjE,\.jnMVh=Ntcm]ZQ'?>!7/i?/dVYp(Km+N37P7D%bZ8+Hamq7p:q.s#.O5^gHMF5@F:.&JYV8VeiqDLkXqEAF%ePHc+W(tl)K)jF$t)Ma+>uM(7T(EAZD^LIb;^87I!unl1_G6LfU#=!%fi%n>T^#BEnA2'EbH)/(cpQ-\$5;mEU<#A1$%V&HV5qC`X+g]12T%5A__A>((arj^ZB><>3e;l_%jHHAq]i.6`3$hSRrp/UIEsd^%(7OK<MTk@QH3X:HoX0B]i7Q,8.;q,pGE8Q9'P^>q2HU$FU-1jQ^dkd^2XZI:;8^ci_D\Ek5+"?m9"!YJiO!'`<-W,bJE[B;fqK/O%9@B?i$uHV*En.;p4^0-GG#Q-ji#sbIL2L+3bR\==P^)f2=HA'_\'L!<#AMCa=u2`9OehKp@U'dj,,D3C^Pis!cl-V;(WW1NEmPF&%Rr%BkU$JW-'EV@)L>'IMdQ<-rd&UGH.YOWmrJ]P9@)$NE!OdLdTU9UZ@m$W^[I;JY8t9KO!n!'aU!72DL%3MUJq36hJIdBD)&$]e%jOl_q;kI[=:6B)pVPj\RY#@N[2RB],McHmQ'[p8R1](Ek-X6**bHd86FGFHn-I+,)cBc?0Za)H.$l6`_9TEUXG#YQ+TM5<Cj`9K1%RQ&uUe,hZqLjAg\K#f9J>CQoNW$^T2ZAOpXX?TOY<7W-mBsCa#QJAU2ZoPgYk:9$ZZ3FtZ*n9#Hfj]j+\1FLl@'3-T>G4>k6H*c=%Y046lZZU7478^L<f*t!7GY5#pUQYG@N^@nE(dfMq.\;I?XGX3UE&;l#'Q[:L?L`?'1O<-9"I37l^B'`p5@s!Z(.18%eGmmTPrU]s%MSd38,GXh>m-:O>Ykg_O?P5(f>7bcSC2K&e)"k3p./?sj2_<6(4VniA$5\hVG4!d0:9S[p2P.0oIMVZ\5%0A%X_cA(qkThJZ$N@k%.@,Baq4MNY>idXj^+_]'a2VCc%b8RsVC1i^38Vg:XM24^<Yre%b>nrp1lnO@<tJErB;A05P#H9Xd;N4,X2_\RA?b'E/Rhn'dSbf;%`hE'6Wgr+>3BE@u*0hHuS-(?SH&3$[U`:up<Q1q@jK@Kd/](ZNS5fl5C-9!pa=C$BKji(i3^r5k3&`:W@&iR!0-YX\^oO!N,uC-(%7@5a"r$(U1YMYr#m(^LSXo^DF(#@u?,>_7!FJt\T=Zr8)l`RNRH4JR)TH?ej]f>J=Lu3IPW<YgF@))aB0.X%h"puoA8QPKUl\N8'%R[s^&B8B#Sj9gd>BR:3<,:eEN%RL5j`u-U0<2p-sTmE'+J.'oO#f4=(j;R]n!H&SlYJ<5!%HMsq":0-=U/<F77.n[#3,JOeC7Kpm%9os+,EE'6W5kXm\k>?k_lM@0i3*si1"W13T#)!Kr+WCl(=""o\@X9F^UnX8Y>Ro;./Bj"..2kA^5,5/jJ//B#VLf-jb/T)A.&+\3%6>M,mWECE4BaIOdj^PG(&APS3/DFcV;OF2$fPF<HjU1-!CA+G12TnRf(6Xt8;\ccR[]9aPK5HAP]7R`Gro4qc=KrDL1raJ^1F'<S%Z>=;+pp2,R8IIoq(+\*V.ZTKh/H?-5:8%r.q!&8!a5NR2&<,%M!%MQ4r@b:''-X8=#3Nk^<1giJ=B+>iIF&MEIYTd^qAg7RXP%8X%o=PAlg&Q=(d"2B8/Q;Eu;WR7F4jrsL__A)E4U"I\5/^hGj)MGlR+)n9:31RPdC'n(M,b%/L@i(pWEq<0SYGKoG6N`G,OVd79Vo)n%a_7V39Vog?js9\U:S[#M;hGa&%@S9Ul6o`M'I1Y#WO]9=>&&#0DW-PmnFt-Njd6(2P%<&r7T0(S.Ej)2$6q5/bHmts\rDH+<9DD?%-j5X@KQ3Hj#EYNe*&[#C!g-uqM(tDd"Y[K?NY+*!-O$nN;\=op,`I9=;HX)I`\SJL<Ys$tjrJ@?qjsbh("Q1TKc=S-]s7i<hR"sd%bK;OC\Ktab"4^nCJlt1&a_$.L2CF(M]F7A_OF>/C(*G>*'=T*V%g\r,QA6`BlU4rO;F+2:9m+bRfMMhs)6DN?CCp<g^i*h.3q1Z+%!RPuo0q90rU\UpO7@a2t!fJ'.A?g)nTnUljjJ2&d`$7(/+*APfnf)5^@9G&,7!_^mQKcTdR')C:E>[4>#m.=p,fFBlngL6S;X&oR%,U2YB1,BIYFdsC?/)G"*F<p5.L9GS6kVGR_LSlFn@r7U=#Ti<Mges5QR&QKf\PclrQ"A1$e'>:7!2?.uI_^VGPTDB&Yros0R%A)@%6<7c6QYH&*N^TQ=lkh9(E?CuJ`m[3u^d6'VKI0t\i'mtrrTGh,9*.HKoF>I]gVcGtE7Zo8Mt[Xq+HR_`L22*-F!C;E'h68W8Jq9U%&;+dZY7n%H8AH+C-DUtG-Ei9(kqclr5(Pn(NSP#@KkO80'17IDVeNRg$U^#Ld)1P(S[s^@#@U26.l.uE4p"T7@.npi;;<<$>6kQ=%2P/B"$XENoA%S,>NB&jFN]'Z9n#ZoG%Ubc&IY9BXVFJKJU&O.)5<beFA#E1b*_o`O?5P5s1hqh_Y,E'Z;&'f(DLbl^V\Z:iKMEj/%Z+l=i2[jk'*XaJT0E[p"nplWhWp!m>U1bIG$_sr-"J1\g_:4Sp:Hd=Cl*)EV>8o7iakJrY8:Z5@/J89-nUWNUdFpn#-YWau*tT7i%"p0Y_OJ"3_A5<;f6k^9Nl%O7EC+^mQMaXt/1E*7Q(=2eS+oQ`>jcECKeSu`01B%WT@&H',0JI,BXC)a5Ogu5?F)T_gR$\jL\M+Ld%MZf>_:Pk98=QjOXRX]pb:,*/C'5CSM&o3eG?ut8'#">YNd?=K[!0nE)X<kfI:M(<//9CL:BA(U?)?ss7!u&d3ed2Cq+>=]WUZrPK%2[[hSY<WJQbbuMsSO<Mh5YZVHO?C=U`/RHHQ@aO-Dm%::@9D+M3]/M,k!oF,*_?]Z%>q"U(=,VT\>rO/J_/`m8e!R!$$mO/iKYI,%:-gHW`,8BsW+,6=Pc=n5I5FbJg^"ek7UNq!$p:W2m`74,]Ot\O\u:@15WAO2;$R3Z`CO/A$kkH@!k[q;b$Y2n!1^VS!6a@0:u2`c%'ML+4X%PG]#0LSI6&&@<GKHh`$\!`$V^k<,3>&tmRN^/f5Q^G+8-VdR!pTudTY[8IDau+5QJ0&c5!uNY?C7p6Z9.?)TV`=;/I[7Q%eHbJtqB)+KQ*;d5>t2C+&MgHp_\:1$&;*S^/6bEg.V/HX;h(uB=pWDbh$,'=:jr^\7J.`u,M21si%7MB+^]bT#F:icrC<![-qClY%B#HJjLlQpj]@>T]NhLR)"Yl2dZ&V@S0MkE8APjPtBsbY^O>J>kBuH2qNrlY_NJ(D:-K8Dg%($[[ok)K'gk2D\^bM)5%kpG,@+hrU%Do`1,)4")99?SY:`QZ11/FOSFi(oq*2<4(<2Lf.@6D7U)3StE@M!HZ)F-%O<:0i\dn6-;-'JSe.''8)@bG*T*'3o=%56,<RF$ZfT%\.@d.$M5Aq)c\/tPJ-7.H8KTn+d^)WBcV136;!iN4@+ecb^^k]CC5HMj$g4u0&^Ib1j.9sgR$-4qsjkKlAMFd87]k[1ts0j)1:)@%U.-^i7$J7c4,,uQLk7>G%333]anu-;nrB%1BcFU[q`)uM9dq76c/_n_\=I;=89,q+lEh!FCILLJ,4''4$Ds)PrK1J6%2>_.^'D*T%5Y2f1"2l>r`eid2K9jr:'+TkBk.c7g3_"ckQD[hA*@$.:o9_kikbR;eE"+$#Y-CP!T4X<H*[#PbW372mC#TSD?f\la4Q\bPY'*L!%$<cr@9Gk]Q3s`qG7#DXn+smQ+"9ONiKUXO%T-"?I-0,?s#Zs%OW,YB2Opp2%N!>V\"sPN]9IVdtiQK])=Y^=un,`W5TEO@LbWUbt%?n4)SckKdM1=:C>_DG%:AqIWJn-SU_OXIb!87U4ag$aL6JN\Nd2c36OVOXI8WPOP2PY4#6U]UH6eec-g]qS&-1mE'UZ3B>_)*D`!%]d'gE%3p#+!LApW30F%*?D?tEC?D>fVpon-oO,\V=hgk9]GqX5@bXJb0LRXC,\.+WjX.89=Aic5Xs_8G0Gu`iSL"jlJ^Kq>ZstR=%^6IU\lWYL!P;*&@V6:!h3j8T_#PFFLS;ueii'm,N#[IJX>)[-P>1a336XVeWn"$huMhc(YrmR4"+IibN.3d0J[:^bMU7a.sf8f(2%jq04:[6'7R68;TKmCK5%$"A;@-Uq-IB7uCB,ok=;VgD*5As``ZVbaM,_]308']I08$8<KH286;<=YMOc74W'^0,Q09kp,X59Lc4<%$'g'a?]][qFVJu?E#47;M)iFCkQB+N:hbr/'bR_8"pIdY,Ded6+Qs@Z^`J:ol,/n5k]C>**j`7%MQ<LQqB04>-Dl/lZ\1gq*H8#5%.;jAS61_9Gap)N9_^[N:\1gC(),4_'h#+t715uF=mYES"?^_gRmR&VdL9*(DFD%Et]I9co4#7:<bRmV5'`1*sNc7EggI*7ML:[)K%eNf"N_/^O<:7W=TUrLbJ2+Q]\nj(Z^aL$=g,!MqaDNiC[M-/>A[+'Li-U>Xtk41mtel^(c!_5RW2>7UN,@I<49!QZ:"uKb1eU\$$%RQ`A!DF^m5c=pL<NA@fZPZ=(Oke1V4?fFuahZ^T\RH:0?&&_")/=IZlV.Bu%ME8`4[ms>hlP%*.?F.T^imhc2-("31_H/rj9kfg7%f35328oU6s]KYE+-bmo]eDD=TOH,e=jA"1!=0r<c!l=HX!;N'@4!Bl'^g<,-&M0Ar\1hsm-fU5'$:##c$4of5%M@js"8W2Jm;^YT%cA]Zhnh`?o<?"P=:J"FV(a^.(J[,F+"u)s,^b#(KI;.uN<H(6%BKQT/!BL(>KH(otPKO9$TUeH;O+SXKR7X8/0b#ml9]A0LqJ4&G%1E.*)5,+>i=0m`ZUB,cs7M'kTNh.f`)+m@PA7/#qceW;a]nM#>R^$MR>gP`#&EU\Ig5ad`7E0+fFS\R?+!NArLBPFBns<_mV81lZ%cV/sKb"Dg.409M+)b*^u3n!2*6A&-4Aah@")MeV%8^LeILi$h=Qnt$XmF;&,r"H2rSY`NAH^hE92.n)Ms"uGki>lU!^*SM]#.<_T%6a3YCjY7QO;b.p1/e9\;q3a$Z^mp!l`asdQm>q*,ULd"9e-jHE9`kM1L(D.3))!gh\n+f1g,t#Z6emGl#9OPACCXM[(&ipN:jWM!%ABi4',V#P2LR_b52.T,AK@\G2RU_J,#`=I?(nS55_-516Bq@Ft0OoQKp]BT5@;.XX%]4kMoj1A#N*&qr16A4Va^YBQWj2aX3uur#%3/1n-Z#n`5=H%0/[$E&[bH:V<ET?O6:c6e9aLr'A6P@Xhacq0Q^%DfG(01kRfJ?`@e?&dqbY[<UdMXg2WJ68FOp95g;U$WjA^ICW%#*`6Iq*A+d>#VWb"M9VYbYq;[:t(CNan'92#%9>q2W=Jb\>+>0Br]HZ&@MY^",*$^i&J#MNR9"1bXI:`jM&?!F-Uo7j(aF,+tBuV%YGG^f*(h_T<j)r"@>9%ooVK#po/5INKBCfUlGHrgY153A7qDh=o!hGA2_tq:)dbs5dGj:FbPbgR881qBD@sN>6a<@Mp=q!7gs!f6%>%C[18]skjP"()*&.a_o24e!XkEuh?Y-VS97,SXNl@G"f/-d_Yh%6JBC+<$K-7r5NBY`"LCJ7=ZbV,GE'ePb<!M5+Q!R)GQ6i9_Z%:5pmR8@1?)9?W1I>=h`ZZ"Q.[H\70+`qYWM=T2`*'!pBt"ZCrF%4&)32$fZ=]N;m*#aFjE^]9QR.ZgjX7rNbsO=02SL-@@d$9QXO%lNH)[fIe$sD;mhhc>,+#mjnP[YZo<h9_3VZ4U9$@;]G\R:`-j*W?b;rA$SkT%*6jd3bT3A`,U7>Y%qX1ThC+hDZE(%gc<^d;,J68%De:D_Yuh/q;emaQnk=/K%mr_.iu\NLI1.+WUe+8?TX\a&M!@II2YRtEWel!]g?M3!8I(`CNu@D,!Kti<X_:tGHLgAk/SQ/5N]*P5%MklRo[Xbn$3<Utu_ICk$.D;/1K-c_B5nbEI-0BOZA['DWZ\,fq=m@ga1p]3Bq\1;D$IY9n_c_bJIs+PS)SeM&e2uqQ(^7AOK3GP^%,+E#8nV3\[#5/aS6T"6BF,gnFlF=PK$\ZqMO]09;*GSFV7%>GhRP7*\B7h(8L.ONb[=e[%<lq'N!7+aHCo7:iK;tS@I)[>?eV3Nq%i[JVR[EX3)a/I"^J4;dZ6hSr#SkuVZ">2K,X?96QYX_k62*F.J&Yq,[JEca$&N#8:/@i8B"[(7t1)Y6oBH.X^XYa3TK3A=rQps`t%7/-_SOBJ[l%GPSR0G#*M:]ut'7BD[>26/1l!95W^[6O?WlXgB5B`b!OL$>ALB2p-dQ:s_lN!`ol0J?fb2"Q9Mo&ZYU`d=4"I2/.,%lWp@[nf5,t!b<\pR^%_M'3%/L"D:")]u;\a=I<cb_YgC.*(c;<j#Sa[)18%"gC-Fj&`]sXg0%>HdH?.LC%[lI>k9-dL!i#cHZa=%%QDiReR%&lm1n&U*QpuO7TOqZ;.p.+beN4V2BiM#leX`A8%()pENJNfOBE]FA9Pek<<5%NJ=p;=X"q0)1%+Jc>A"D$63#TD1lX:N%%VYB[/,=:QZRm_*R8-)PGEf:CPJPD,s<?'\'*.ud57gjTMM;j3i=^#!JPBA&H%tKD%MU(Du\B1K0f7QEZ=M0t-\Yc8p[M)rrm8Jjl%:Ikab#YfMIVnjeqo<a.EO=9>9OW!TGm=<qZUQ$ru/A9YNU21;2@.EN5g]5JWj*b<-Km#f]S\TC\6km.db&ar:U+Wl`OYA3u9Jq'I%G9r/<+E42V)oV*A/CWIO\VDb8SJdrbPoKQc<;VhjQNu6Pn'lTXogcf;4!2`.U_Xp)`E__7B5+Bn:s'KTG>Qd$#Lear^lH5^XKW2^%rWK\N77'DG0l8[2YQiLISCQ?u<48D5Lo#J!+?Pm$_Y[^L;&0gc2?L!TJ@N)0]HJ;rW^*o@>knc&ZF$^kSQ[0E3a_9PX<0sdjONs,%-r`3=-tEj'6e/Ok\;T#L5[ap9-n+]oMH0jGgR<A1*,E3,LEn^\FqSG`3Sku4U72*C>*U,\;0t_3n/t,d3\@D>D8SKO,W393UumEl%&P6ITj-UD%QFhfKLC2J^R<a$h9U:tW4@_FU:^"B#T$iu/RUI%Ff;EXU$:>Qm#OV/oUkPF+e%,mrM_X4a%,P,[:h2lV/b4HIR]t6O%\qMg_RQW@)(C1`OI@1_<hk(S>DQ7u3YYYJo#V[S2L-J4+l:6YV/Ba]eWB6aOX?+L]\4G]@p%9jt\i;&:="1smYIN-SY>g\N/O,4@%mjU'pX!p:ng[N'SSRpqqjnDI$7KP-\Af6/?L$qYJq7=4nq)h585\EDlQJ;UP7Ti$T]HpLb=)(elXn9'/ZhR8L.t=\V=a@:Co?(U9%J#iM?T#!NE'TD7lq1Xp%%fc9N`HA4GXZ.:EK_TcR(#H:Pet"-]<IcT/hF<KQV9?[e,SF+cV-JR:Q_:U\UqrH.6HXFP1l5(+e!!gA%RHu@l%O21=l#djh5N:uj'JgXb4GNA`%*T,GP7X.e'5&E)'bMfhh[CoDeBgj&Eb05"Pjm=;_BYosdPsKB6_sjrZhbYDW@Du!&g@UX%V?!&4c0[;T"^oLs4DISslp00<WAj=YW29dGHM+P[oPWT$hpGF`=XYST1L355\&ktpRHpq^1H63L0!8,-b/u_=r&09A-sP9VVaaQN%d/$.fBMJ::,UJShN7#e4Z8*h/B22b$JT[`"5$7(h2_%^1WtI3]->9bQ@O.@h(_%pi0]qEMR26JlQd!D1]_P#!!iS0i7nqI"f@NEB%F!Zjh4,,"bHoRX.baU3Uc*J'Q(DRNJknr(UBV[sjOWXa7:,'6+=FaS(*E0Fk<`+hq:u-)eFq'o*]d>O6#Tp(T'7>e>[`f-:)2];l%ELcmL^)Ah[JsN?q*Yd6Y<Yos"@hmtaA%[&!"2)Z`(lj/MX=iTlUecac@mFfH:e+qnMFbb/QE'AOUrf5GA/HoXSCX'@'"96c:Apn8%$eI,#'$r]UIi^-aF+SYY!c_h`f4`&n\,BiP2A-o<US]MN8cu/<3feBh;XY-R3n,]i1oTGZ#>>F,XU>Au()1[&QKp-6P4n<<5,K(/%#)iI'78kBUb=)J]5naXB7$\cDQjjfhDj6C)3olS,dO;@72loN5-K1=KL)Mm#*_kAL%D$@k>E]UPPlkJ!=L(O,CS:+W?pe3l]31<+%?B$\pMh/_Y!!G"mUt,Z]PD(IG8$/T=)=DfjXY@L.:)$1C5bpfXpE&Wc@)XAj,2r6oTH'@")V%s6]W12d8[F@l1PCe$L,I1EJn<k/%*OKOP>)8OkU_sLo_6BC3h(YRXNRO]^TKEF<fHhjN'eXhb)M=V9Y7)u6Bc)!l>gbUK4sS7YJA!mdR#>R$hrMeS@KY>;GV)b/3#DfQ%?ViT<27&o1rX1fWAcXc>U;*c8brC;PK1d4@#WMub9MUX-!+r#"4L1[jloWKJI<2#5:;J7ZCkE_7F!Aa3%qK4%$9I69Sa@T,W:\\A%dd@GeHa.ZKM7,W(.41[X\X#+nFJFPc8^2Ek-kXFsC9pJ>T%-m]@<2UkIV<iLUg6C".0_2a;RS[KL0K6J#V*eS\3!'p2q2I,,O;Ci%+<Q<uC@+/gPsbV'm,m+A&h@IOU[i133Z*B;bO8U?`(#aq,Kcff_Bi.<ORcqIG3_"m]tH+j>I#B3^L(CR4RbNE#dU`o"<B7*7RGu@%C/WPU1D`t"Z`\A#,Z!8SGIc#(=974nbR9]>%5j+SQq;gJGOuhgVGC`*KGakG`FOEG`]e81+U,u1<8;XgJ`]C_I3N(2hSS5</h'L[%;hl5[2K`\u@@dn.=%FmO39WMG3qXaPpU7C>GE.BG<[j]#1=5MSL9r%r/<#>#Aq4^dg1??m/cOIG\BI>-E1*ct=J!dmE(dF#0t.:i%0\kq^k.t'LUt&N">@Bs40Y0q-A!V2M=$j+Meoi'8,QWH@XgI'm[I3'LWEulV$,OuBZrK]ne[p_[jH@62<S^7H;6b@>[^X9?2<Gkb%GQqXr5b.0j/Ifi[Lo1DsP$qW!CEfAU1S7+5&t<or&'tO,N:06j,u'TXegI6T]W-qniPrm>$TJH=aA0.@]-Ji&bqYisjourgZ*%Pn%LAf=GeeD[_]-or0OVtiX&;YY19dt0!#d^ebVY[6*3A@V[+H+Tl85EG?5QQr%'PD.L$2^tk];mbVK@W!BN0;F47,"BWc#b$K$ANFU%rJ/PKO.gtW;FIHnZS:"#/!mf(_)]Tf=le9cp/_nNiVRq\q2$"5N<*Vh2geo,8B8Lf%Ht!2^hE<'kQ$enCZE$bn!dOGa@e9,1XCuB%c;Gu8Y)AIYJ2fCO"qI]:?#E?:&^iA>-qA7%jC]7iLs67JWdU&7W2=^89XnAnE5_E`G$0ihVJ`G%5>HqM0=(a+IHlTUGo]C:+e![F%T!DdnH#cm^9jKV$k/t<(FZEq/r@kP^Bj,P+QI]jNs(5E.^u8fS7pdtBQ49R1K)*XMbRk7P7Z.7)h1qHYj33]^UQ=]u/517jQX`jr%>-fj%?86VG@A8LJ<fkB11[A?6_Q<'r0$GL9c0NNBJ"s,>/k[J-A=\"!LB09?8(ne>IK\%l=qcW]:hTUp:_MCllFiYbTK$$d@qD`-%$O>.K5fTfqP(T$/5Vh]UWPT6)p'<KL)@[@)ZGQ<=;?V-"@menGEHP[Dq47mZ[.`5(.qC0Z;KeH`BUoO"d!M?/UI)J`A[8Hm-A&3Y%[<J\`N2+ZoC?QZhD5=%W/-L4lq+)h@RVn<raAMYp[=Pml[PKeM-$hr*9t=m<\>7_A!TJD(])os=0sa3PD[qYOTI#,KmcG8dP4c_,%+lfiM8q1g,deo&]\MRk?J=L?-TP6D57KAFX5ugB8*F]eu"Jl2;)a<:M$X(bdNT[qYhf/VrQt:H:W.K/fe[rm,USY(l-cbG>HX^k=%jq:1<_FeptVT3@(j`&V,-:/j`2IRD9.TnPFUT.TFKXYj0.4V?XH12\+=Xg&si$utjL1g(7W34nUCGeJK8C=WiW82b9A;rki;?e=c%hi3q]`^AY7V53B/4NK@L,Xo-RIKa!=iYDa!O^glhM&S[c,7"'+V1a0SGWi<;4VL(hK">u?d)$*F7<@J8J#sG"bDAT5%nEIEEm1PO%[@XJ(@m+hq)&u?T[hB!)4Z_R0;rq;fDj[fUl094R9lh`[<EZbC"O-4r_(mq1"+`XD=Ep8J#PQ!UNU>[+k@`-C$4Y6_@!XtU8>D<E%]DuZa<63.OaM,[f`0ht..a<NsM2X$G^jogUSK9`uPFW4(I"O`[nq"]kF_Vu&eIUEj!4u)gE9PZ>@O(R0PhRrA#7g-FKOpDNBAnhk%U(EMh33B8LI="bJ%FD!'LdEfT_,XWl'a0cKMI-LT!,%i5mD8uXG-d>CYS+lg[1<o.hDCf\?F?&OLs!p"i$JcHQUeAa)1/m(oRP3X%6h"EP(!pBsCH90_8Hd$k&&p*bX.05`0T@ao6:a&6bu^SdBG'j%e6B4VAordNAsY?^W--s[DkS9c,'Z?jR5G'QC6D5T@PM%[+`4#\%P(I2tVXiZ<+fg!!dU[.";dI<aUaOVnp*'^g;K#a9nmpfiD:U!"V)2736;Uqg<=!%X:C?kc#b$8#gmSY5&!I3AdFu0%F.:@GeLX4V%0M,n"@9EH8[MS+G0HWP=\4YFb_%9(9(>:BTDCW9UT'Y[>XK=itGI-QPi41J?g;)%i,u'@N50Mjen]%XUN2fCJcT+o\\1KBJCSpK^%-L/0XT+"nah3Am\TM5=NAg-(hW8'pgjjm$[(6qA-4EK$r[tu_1cpfOoU33sIn_0ErcWlq`Mki\ljJ;S_L-jVEGmp[#$q45YI>j!]%`MpkGgtrEc$L50[;u]^$?s-7JBVopDEd>5r!2!:(&\\#\Kf?!$:J"R^]p8`c(\>.`Q95M)#f>6ONV.UE"[O6OM3o_r#^L$H<I"do%dps;:PP*@>g%%HI[A)AU9*l.f99UT!nW\7_V6iLi3b6*.,t*HsDkWdsPVY\#bag0c(C*DLZa*2ESM[B=6Xb8VXd7B9MI,")G#YqS%?E0>d8!VGC'P5eTs0q9D<_E@;UQj/GlBZ7hF/"1Y6+Y]$[NjL?L?d3!Vc`!M<kI3p.8t)JXd-1/nhYQnj>Q<]hn$A&^30mZ"G@Q9%3.uJXJ@<L_B#sEu).%EC'_nWr1pB'd*F)]e/c9*n(*h8#7kNV2M\0iC,X<d(Ga<Wl>(h9X96aEPD+Y1%.gEd+%E34C'I<'^-k(#f%q&q&''dQKIZoVA.Mt5:^dj*FmNXG&fqDkRG?QL(bK.5\aJ*6%B(@Qtpb6Vi%0ZYB[D;Qjp5@K/2\>.or#t-^/Yf5`E^hO"Fei?7C%W*[AZoF^tb:6fg(Jn*siY[*$b=2:46+McY>"^\X202F##!8,^P+If&W[9T/nkpjn&5.+\@b9]C5'Z3Dlj1sc>J&h%p0!)n#3oRnC%A:3Ks%>FHhSLRli\rmdIW`'<^#KfZj.8E`Mou](fd=Z/L:K=Q-#4rXf74X]?H<n4/#:IQp\)DIMnFL;8<i$L2cql^u$/0$lP7GVI%r/Pp$bL`#a0&L$.dG`2aen\b!o0^*)*eIo??'oIQBgodMM'#!5\H<m`.*GFXRqiV$k^(=76++VY5T\PT#.nbBaXGE$kY&DI]<s^F%i?\W)lg3fr;(5`kPLb<.;a"i*CgA'K;)iO\l2XKYcD:":Ce\fk/N/r=C)0E%2&cluc-iDZMWLE)e:\tKkaca/(.(#+EDAMY7rcW=%QROm%@C+(RAohgeAj`h%Z_?m</8a[O=C.Flc-ieCC)0,r,Kn-8'`E?QPgQa7ZamMCZV\eFBdd/,-F[^4^:^jiPs!N<VrX\9G=l0j%H)K0X]Mmrn='^.Q4s5$_Y.KG*<K\%*?PX6:g4knF_2F_5n!fT_\r4X*SOj*IA17d8%+VjC!Vr3/NCeg<1d70>H@U4TAC>o9/-RdM%_A_Xfr^hK4+Id!fP:_q'Xe..W;0rfY9QQB,Yo.*G(o\D=0Pb7UWHlX%9oaUqOFWLaor+U_(hrjo6Z[+\ccG+#qbZRPW"`MOP8`f2%U6sMA]-?ecPeNGdaq*Q)bRN-=>8$N@T:%(@@+<-<6trD!W7U;[RDc?3j$^n:Qcj1`JZob+:Qbo<?C+[uXAQ_o?Y%d\a>+cMVJK7i%]m4CeHb4@5<?V%$9A4E(8T_\a/r2?qF_N2IB&'P&,+rN`1c!:eG!SoiQRt.#YDo#P;OQ^6UfC\m]4I,XX.,BBqq%pnr!hber/mi3%9!AV/(n3R.=t\"+Vb]r`bQ=l\FkbA21:::)4cI+I@0;$MaLT\\KloG:[FKSo8$.lq+k2["$Is=mR&R:7k7DLi5ff4CW)CdK"&h6(%BX8s&1boA3_dAPPU?:1TU5!,i;+';F<#aB*VS5!]7^[=533&3`qUD^=+mD6/W=G168M.d(Ue7ZQZ6AK/.1PGT<aK)KAmPO]?04RR%*m0D>1g:93=jF4aAm(i\BG^:h$4MDu8O9ILZ.#8D"cr^I!<+;Y[acE&/5.C-Z)B9,olRN:0dOk.4YY<%6aE;#c&fGa=e.KPWJk6=%)-5b[cH@f&#iBMAR`;>4W9-/0MF-Sb#N=5B8KE5Uh1EkLk6)+F%O2TABo@cWqJ_NF)=d5d6I*MCg20B'd53,>>p4k\err]lO>C[L%bYMM$AIcm^H&bP0Q&o(lr6f7Z:!]iC`K[-`;Ea=Q1B=?eC&0Re6(6Ij<!H:)ab(;_84m.qQ,6*C:$,S1DlnqKaQ=A`(.\R6f>g?<%$C#`"F^>K1<*<a!Z7j;djtFr^/hF:um_W[M<&1;qEC80bkUfo5bZ5f[UTBZ<(qX[U3O*lY4g@#Pat/g4.j7^Zge9VI*0?V(S2oaO%'#uRHq,>n8o10F+QD6PaC;at3-C47]NHp\Ah&'%,[pJ7n.&8nA%7rdf[$q;n]Xs2.l!YUAneL8kr0aD?9$$$N5<A2IBmjbfb6T*E%UOtnVN.SkNZH&%?3[RQ*$qH(>j>*26Q56<;fe@,B>/OphV"foB.HZ\/gSNXN^K[I/#e\5AgsQPb6%rO_Fn2,kR_pQm-G15>kVR%M%),$9ll'eH,oM1#FoLoVN1`p`rmq=N$HSKfjOg%9h?]XE0=VAF8P;V9MKoudoOhW"]T1@?c69::sXDZC4J.:hgFjo+,&[_mT-LL)?%U&\\O/=*q-3`^;8^7E7@W8A$%"RAHr8u[UVRN?CjWhmaUL,>nTa.D%SDeMle7t:__m54^I+`Ta*H>;(Z12FB;Y/p`rZWn/8pVt]H%2/::CdV?J@]<m["pk2>JYkZG*=Eh8G;ujb`nsUl)L6*^]6E1He+mD0B%Hj]?05hW.I=&;4LDbGR*PL6E6ce#3IaFSO5?KB+Aj.,2%Dt0ZCn<]7X-KZ[ik%"$%kL7YqBMb5ie4:-c<VQ*-eb1dF/,RBiK4+)@m#OuPnJP?[8't6M?F$`[18m+TeFi,Z3acGU.b%<b[&b?]%L3[=:7\f:ED!$hZopCCde:HLh81,&X<QuSH2s0;WO&X_#6aF*SBi3]t2QZ[Te*B+,[F9Dub!UG$9='nFf>d^i-u(u0Y5rk'kl(!]%!:!e\IYJ_9^?YY++m])\PkG%(9%Nm_Ru64O!K#&a>7IR3rpsEcj#%*fp5Om:2acTY"p3:3DA*Qe?Z/t(!),`sg=7dN5.*-aJuM[M%AW>h5F.5Lr10R%C)6L8]10SsGOjQY!^/nmQ6E*"]Z@YHMUu_EQfeT#;X,0aIfS5J&fnP_KfnQ<&Ch_O$g%+R*b*EMQ<OP^RQRuQ*%6diflN403sB"SQr1YtHuS#[]8iS<4-hC%FH%84e.TOA.PXV@(_(K54]+lr#J^BPY.Rg+j#">1CmNBNG(Y]3i6P1W#Lo+YJLaWRY+%YA6]E-G2WjZme@;OJW<I4Of'qDOY0Z-#n_3P<BU-<G`JkMf9)(M^?6i%u,:e;^#t`p*K=6Q$`;ZObARQc9a3TRQdOC?;GAK(^UO>%*E+U7+$,sQ5t_2kpTd4@BO,0iVl7uVPqZ=7X%LJbV0mBN2"<lo+3aj:1g\,AP^=`-G<_'&Ar0;`?O,&YDHh\q<?)`O%Dno&Q4Vc?%k$f6MV.)?@7(VLDK+(:*fIA53d&C3d'[umi%m<llAV;Gd&TfH1RTr,DN/lE9#m8X0,)ZW9/Qo4jYT"e'd\Ka5RBXrAUch<qf6\-?%5fuacFU#Mt+\+\*iCmc=/6,Fn.@gN;$Y!59U+<R,V2]6.6jq`l/&</C\Ib8<]_k[*HVr$)a\knmArL7CfQn'C7dKJ_??;9'Ni^)n%)WluI6_221=o]+'.e&/,bjEdE\p4m-'rG_5dR5X7WriBJM-ZP\^2dLP1M7%=gC`FORV5N\\Y)Lm;Da_>m]_%7mVT&-<'kk--07M(%Zr.\>g]nS-T`!`tjgiFU_]3HeT\C+l.:.p0<^QDWR5AUT7VN!;Lbpt00EQP`.X\DU1FP"%2c9t,Ve2*7VRBsi?21/])6naL(/2M$%Z(WHuhj3A5aN$LY1&+d_?lFXB[3@=lj^X3O@_s;[It02:lQQrXMM]8F[kMP_9?d\./8VeQ`2k[0qF2a]`5KBI`6Bm&!tZ?\_UP0,%Ga#6,<[7mKDm2:8m\VHGZedWumT,1362(YiW8]Hb\`8W:>Y4&(DFnXP6Tg?f?\G*@<p/)'eBYO9G+#<":nGbVCaI_r]eKIh,0""H%.8H.a[@h]E67Kt"gtS'L>CoGbQ'<.RBuQ+9qPGGKF$QUrQ&$ri8AkmAS<\nuRf\]#@L:R!EcJ,M,SS00!2:/SBB/83+giV`/[U[u%0si6HbEQV^lHaCORg/Bm49t2L6+j(55VO<S'sc1kR[dY37EfWtq>mEeqnhpX/7gW6f*p66;X+m38@k*,!f.dQ&qkirb55r'&A!$l%NLHW@5*fi\1gC?4Oj;3^SS&_,8&hGV<\b1DEg(%=P(ZDT5ZX+5BSu@)=G!7J^):8gjR#d^8mLrIMc9ui'6Ifbd^/:K#Xr2j[QEWj%W`#Z/]T9&&B@JKG=fSQV,#q[,8X7MaQdc:0W=lD+"t^m4;C/nEK9llgFdu.,XFr-*<_D58q4mNfTAtXjTo#p?E:8*Kd_t<OWq>qn%N3NsF6&L<+0.BqR^r\C;OuFLT>88[A9JlW0Nt8l/>#5tbRC1=V/gaVN`/Lp'_?5Ab)mWS&ri82TLm9*f#5b4X@@:4RMi8X-hLN!`%<dIeo0Scde'.k]I]X8AOYcJP&/@g#"`E_`5%7Ecfac]peG_jYD<JJhoAL3^W=U?EYZAD&4j@d(XDr`MDbR^DX-YPscP:X7:&-u?+%99>#:b7rR,`A7*TZ<Z%X-A&m3#W:'fihNEI,ma74<AKNEY"8,b-))/5ScY1Mq1CQPIW$\;__5aL;;HKi77P'[cE*,hT$B<@Br*<b%5^lR3R(`/=2c=r`pI/5tCjQ^.S;1GE:=k)/lKh6f)70ZI-.Eu8b!\Ek)M-J"e^=#>"T?hdrNU]1m9OS*''cAEV=Z&m;L1G!7JKiR%^8R?KKR[[k>?91,1g9=hK\_TLA85>%CT-oqf@qfZCg!;U,]/[>^prr7YJC<K-qqD1&/];c6^C;S%np5cO=Y3HoFK2]B*M)b[b\T1%d"m-7KNJe):$*a7?!n\FUmqcF6;5A:A>_II/uis8RW<4t7U%+iMno?K8\^E3;"ZP9m1'1R:P"&FM/Ugqc:itqRLf#QC-,*q[6KL;%h,t@X>=bD#Z["\ii4$D.fkNS8ar&i2H-/dlQ,%T^0!:GpB".!ZNuI;iVk_[A$3r3KmY#K8?C.(`UqmSB9bSaMm5Jr,@G=8h%u%AJ%6fOTE(;"3ga[3STI0_ifAF%+TiUb[\UJ!83DE\!fcC7b1<Xp4cq=rXgDf6]s]t<lJjk8D/s52,eitj?[M6c_FIT_*mB'8QnQZ%%J%hu<<>ImB,do'M2C?b16&jo5Q^qj2U~>%AI9_PrivateDataEnd